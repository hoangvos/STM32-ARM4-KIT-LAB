
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000322c  08008c88  08008c88  00009c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb4  0800beb4  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800beb4  0800beb4  0000ceb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bebc  0800bebc  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bebc  0800bebc  0000cebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bec0  0800bec0  0000cec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800bec4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d070  2**0
                  CONTENTS
 10 .bss          00000404  20000070  20000070  0000d070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000474  20000474  0000d070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e65  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000407d  00000000  00000000  00024f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  00028f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001137  00000000  00000000  0002a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002507b  00000000  00000000  0002b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd93  00000000  00000000  0005076a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d487e  00000000  00000000  0006e4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142d7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006400  00000000  00000000  00142dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001491c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c70 	.word	0x08008c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008c70 	.word	0x08008c70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2108      	movs	r1, #8
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <button_init+0x14>)
 800057a:	f003 fabd 	bl	8003af8 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40020c00 	.word	0x40020c00

08000588 <button_Scan>:

void button_Scan(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	482f      	ldr	r0, [pc, #188]	@ (8000650 <button_Scan+0xc8>)
 8000594:	f003 fab0 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	482c      	ldr	r0, [pc, #176]	@ (8000650 <button_Scan+0xc8>)
 800059e:	f003 faab 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2202      	movs	r2, #2
 80005a6:	492b      	ldr	r1, [pc, #172]	@ (8000654 <button_Scan+0xcc>)
 80005a8:	482b      	ldr	r0, [pc, #172]	@ (8000658 <button_Scan+0xd0>)
 80005aa:	f005 f8dc 	bl	8005766 <HAL_SPI_Receive>
	  int button_index = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005b6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e03f      	b.n	800063e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db06      	blt.n	80005d2 <button_Scan+0x4a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	dc03      	bgt.n	80005d2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3304      	adds	r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e018      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	dd07      	ble.n	80005e8 <button_Scan+0x60>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dc04      	bgt.n	80005e8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f1c3 0307 	rsb	r3, r3, #7
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e00d      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	dd06      	ble.n	80005fc <button_Scan+0x74>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0b      	cmp	r3, #11
 80005f2:	dc03      	bgt.n	80005fc <button_Scan+0x74>
			  button_index = i + 4;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3304      	adds	r3, #4
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e003      	b.n	8000604 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f1c3 0317 	rsb	r3, r3, #23
 8000602:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <button_Scan+0xcc>)
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	897b      	ldrh	r3, [r7, #10]
 800060a:	4013      	ands	r3, r2
 800060c:	b29b      	uxth	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <button_Scan+0x96>
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <button_Scan+0xd4>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2100      	movs	r1, #0
 8000618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800061c:	e009      	b.n	8000632 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <button_Scan+0xd4>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	3301      	adds	r3, #1
 8000628:	b299      	uxth	r1, r3
 800062a:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <button_Scan+0xd4>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000632:	897b      	ldrh	r3, [r7, #10]
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	ddbc      	ble.n	80005be <button_Scan+0x36>
	  }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020c00 	.word	0x40020c00
 8000654:	200000ac 	.word	0x200000ac
 8000658:	200001a4 	.word	0x200001a4
 800065c:	2000008c 	.word	0x2000008c

08000660 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af04      	add	r7, sp, #16
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fe1c 	bl	80032b0 <DEC2BCD>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	b29a      	uxth	r2, r3
 8000680:	230a      	movs	r3, #10
 8000682:	9302      	str	r3, [sp, #8]
 8000684:	2301      	movs	r3, #1
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	f107 030f 	add.w	r3, r7, #15
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	21d0      	movs	r1, #208	@ 0xd0
 8000692:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <ds3231_Write+0x40>)
 8000694:	f003 fb8e 	bl	8003db4 <HAL_I2C_Mem_Write>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000114 	.word	0x20000114

080006a4 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80006aa:	230a      	movs	r3, #10
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2307      	movs	r3, #7
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <ds3231_ReadTime+0xa4>)
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	2200      	movs	r2, #0
 80006ba:	21d0      	movs	r1, #208	@ 0xd0
 80006bc:	4823      	ldr	r0, [pc, #140]	@ (800074c <ds3231_ReadTime+0xa8>)
 80006be:	f003 fc73 	bl	8003fa8 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <ds3231_ReadTime+0xa4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fdd8 	bl	800327c <BCD2DEC>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <ds3231_ReadTime+0xac>)
 80006d2:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <ds3231_ReadTime+0xa4>)
 80006d6:	785b      	ldrb	r3, [r3, #1]
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fdcf 	bl	800327c <BCD2DEC>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <ds3231_ReadTime+0xb0>)
 80006e4:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <ds3231_ReadTime+0xa4>)
 80006e8:	789b      	ldrb	r3, [r3, #2]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fdc6 	bl	800327c <BCD2DEC>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <ds3231_ReadTime+0xb4>)
 80006f6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <ds3231_ReadTime+0xa4>)
 80006fa:	78db      	ldrb	r3, [r3, #3]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 fdbd 	bl	800327c <BCD2DEC>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <ds3231_ReadTime+0xb8>)
 8000708:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <ds3231_ReadTime+0xa4>)
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fdb4 	bl	800327c <BCD2DEC>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <ds3231_ReadTime+0xbc>)
 800071a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <ds3231_ReadTime+0xa4>)
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fdab 	bl	800327c <BCD2DEC>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <ds3231_ReadTime+0xc0>)
 800072c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <ds3231_ReadTime+0xa4>)
 8000730:	799b      	ldrb	r3, [r3, #6]
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fda2 	bl	800327c <BCD2DEC>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <ds3231_ReadTime+0xc4>)
 800073e:	701a      	strb	r2, [r3, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000b0 	.word	0x200000b0
 800074c:	20000114 	.word	0x20000114
 8000750:	200000b9 	.word	0x200000b9
 8000754:	200000b8 	.word	0x200000b8
 8000758:	200000b7 	.word	0x200000b7
 800075c:	200000bb 	.word	0x200000bb
 8000760:	200000ba 	.word	0x200000ba
 8000764:	200000bc 	.word	0x200000bc
 8000768:	200000bd 	.word	0x200000bd

0800076c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	@ 0x38
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000798:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <MX_FSMC_Init+0xec>)
 800079a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800079e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80007a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007a2:	4a2e      	ldr	r2, [pc, #184]	@ (800085c <MX_FSMC_Init+0xf0>)
 80007a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80007a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80007ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80007b2:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007ba:	2210      	movs	r2, #16
 80007bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007c4:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007de:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_FSMC_Init+0xec>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007fe:	230f      	movs	r3, #15
 8000800:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000802:	230f      	movs	r3, #15
 8000804:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000806:	233c      	movs	r3, #60	@ 0x3c
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800080e:	2310      	movs	r3, #16
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000812:	2311      	movs	r3, #17
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800081a:	2308      	movs	r3, #8
 800081c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800081e:	230f      	movs	r3, #15
 8000820:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000822:	2309      	movs	r3, #9
 8000824:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800082a:	2310      	movs	r3, #16
 800082c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800082e:	2311      	movs	r3, #17
 8000830:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000836:	463a      	mov	r2, r7
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <MX_FSMC_Init+0xec>)
 8000840:	f005 fb74 	bl	8005f2c <HAL_SRAM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800084a:	f002 f949 	bl	8002ae0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800084e:	bf00      	nop
 8000850:	3738      	adds	r7, #56	@ 0x38
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000c0 	.word	0x200000c0
 800085c:	a0000104 	.word	0xa0000104

08000860 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000874:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <HAL_FSMC_MspInit+0x88>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d131      	bne.n	80008e0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <HAL_FSMC_MspInit+0x88>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <HAL_FSMC_MspInit+0x8c>)
 8000888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <HAL_FSMC_MspInit+0x8c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6393      	str	r3, [r2, #56]	@ 0x38
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <HAL_FSMC_MspInit+0x8c>)
 8000894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800089e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80008a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008b0:	230c      	movs	r3, #12
 80008b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <HAL_FSMC_MspInit+0x90>)
 80008ba:	f002 ff81 	bl	80037c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008be:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80008c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008d0:	230c      	movs	r3, #12
 80008d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <HAL_FSMC_MspInit+0x94>)
 80008da:	f002 ff71 	bl	80037c0 <HAL_GPIO_Init>
 80008de:	e000      	b.n	80008e2 <HAL_FSMC_MspInit+0x82>
    return;
 80008e0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000110 	.word	0x20000110
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40020c00 	.word	0x40020c00

080008f8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000900:	f7ff ffae 	bl	8000860 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b6f      	ldr	r3, [pc, #444]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a6e      	ldr	r2, [pc, #440]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b68      	ldr	r3, [pc, #416]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a67      	ldr	r2, [pc, #412]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b65      	ldr	r3, [pc, #404]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b61      	ldr	r3, [pc, #388]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a60      	ldr	r2, [pc, #384]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a59      	ldr	r2, [pc, #356]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b57      	ldr	r3, [pc, #348]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b53      	ldr	r3, [pc, #332]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a52      	ldr	r2, [pc, #328]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b50      	ldr	r3, [pc, #320]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 80009b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b49      	ldr	r3, [pc, #292]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b45      	ldr	r3, [pc, #276]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a44      	ldr	r2, [pc, #272]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b42      	ldr	r3, [pc, #264]	@ (8000ae4 <MX_GPIO_Init+0x1d8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2170      	movs	r1, #112	@ 0x70
 80009ea:	483f      	ldr	r0, [pc, #252]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 80009ec:	f003 f884 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f6:	483d      	ldr	r0, [pc, #244]	@ (8000aec <MX_GPIO_Init+0x1e0>)
 80009f8:	f003 f87e 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2140      	movs	r1, #64	@ 0x40
 8000a00:	483b      	ldr	r0, [pc, #236]	@ (8000af0 <MX_GPIO_Init+0x1e4>)
 8000a02:	f003 f879 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	4839      	ldr	r0, [pc, #228]	@ (8000af4 <MX_GPIO_Init+0x1e8>)
 8000a0e:	f003 f873 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2108      	movs	r1, #8
 8000a16:	4838      	ldr	r0, [pc, #224]	@ (8000af8 <MX_GPIO_Init+0x1ec>)
 8000a18:	f003 f86e 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a1c:	2370      	movs	r3, #112	@ 0x70
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482d      	ldr	r0, [pc, #180]	@ (8000ae8 <MX_GPIO_Init+0x1dc>)
 8000a34:	f002 fec4 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4826      	ldr	r0, [pc, #152]	@ (8000aec <MX_GPIO_Init+0x1e0>)
 8000a52:	f002 feb5 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a56:	23c0      	movs	r3, #192	@ 0xc0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4822      	ldr	r0, [pc, #136]	@ (8000af4 <MX_GPIO_Init+0x1e8>)
 8000a6a:	f002 fea9 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a6e:	2330      	movs	r3, #48	@ 0x30
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481a      	ldr	r0, [pc, #104]	@ (8000aec <MX_GPIO_Init+0x1e0>)
 8000a82:	f002 fe9d 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a86:	2340      	movs	r3, #64	@ 0x40
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <MX_GPIO_Init+0x1e4>)
 8000a9e:	f002 fe8f 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480e      	ldr	r0, [pc, #56]	@ (8000af4 <MX_GPIO_Init+0x1e8>)
 8000abc:	f002 fe80 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <MX_GPIO_Init+0x1ec>)
 8000ad8:	f002 fe72 	bl	80037c0 <HAL_GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	@ 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020c00 	.word	0x40020c00

08000afc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <MX_I2C1_Init+0x54>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_I2C1_Init+0x58>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b3a:	f002 fff7 	bl	8003b2c <HAL_I2C_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b44:	f001 ffcc 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000114 	.word	0x20000114
 8000b50:	40005400 	.word	0x40005400
 8000b54:	000186a0 	.word	0x000186a0

08000b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_I2C_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12b      	bne.n	8000bd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b96:	23c0      	movs	r3, #192	@ 0xc0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <HAL_I2C_MspInit+0x8c>)
 8000bb2:	f002 fe05 	bl	80037c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	@ 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020400 	.word	0x40020400

08000be8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <LCD_WR_REG+0x1c>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	8013      	strh	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	600ffffe 	.word	0x600ffffe

08000c08 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c12:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <LCD_WR_DATA+0x1c>)
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	8053      	strh	r3, [r2, #2]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	600ffffe 	.word	0x600ffffe

08000c28 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <LCD_RD_DATA+0x20>)
 8000c30:	885b      	ldrh	r3, [r3, #2]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	b29b      	uxth	r3, r3
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	600ffffe 	.word	0x600ffffe

08000c4c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c6a:	202a      	movs	r0, #42	@ 0x2a
 8000c6c:	f7ff ffbc 	bl	8000be8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	0a1b      	lsrs	r3, r3, #8
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffc6 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ffc0 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffba 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffb4 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000ca0:	202b      	movs	r0, #43	@ 0x2b
 8000ca2:	f7ff ffa1 	bl	8000be8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ca6:	88bb      	ldrh	r3, [r7, #4]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ffab 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ffa5 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000cbe:	883b      	ldrh	r3, [r7, #0]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff9f 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000cca:	883b      	ldrh	r3, [r7, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff99 	bl	8000c08 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cd6:	202c      	movs	r0, #44	@ 0x2c
 8000cd8:	f7ff ff86 	bl	8000be8 <LCD_WR_REG>
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <lcd_Clear+0x70>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <lcd_Clear+0x70>)
 8000d08:	885b      	ldrh	r3, [r3, #2]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff ff9b 	bl	8000c4c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	81fb      	strh	r3, [r7, #14]
 8000d1a:	e011      	b.n	8000d40 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	81bb      	strh	r3, [r7, #12]
 8000d20:	e006      	b.n	8000d30 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff6f 	bl	8000c08 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d2a:	89bb      	ldrh	r3, [r7, #12]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	81bb      	strh	r3, [r7, #12]
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <lcd_Clear+0x70>)
 8000d32:	885b      	ldrh	r3, [r3, #2]
 8000d34:	89ba      	ldrh	r2, [r7, #12]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d3f3      	bcc.n	8000d22 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	81fb      	strh	r3, [r7, #14]
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <lcd_Clear+0x70>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	89fa      	ldrh	r2, [r7, #14]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3e8      	bcc.n	8000d1c <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000168 	.word	0x20000168

08000d58 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	883b      	ldrh	r3, [r7, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	88b9      	ldrh	r1, [r7, #4]
 8000d84:	88f8      	ldrh	r0, [r7, #6]
 8000d86:	f7ff ff61 	bl	8000c4c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000d8a:	88bb      	ldrh	r3, [r7, #4]
 8000d8c:	81fb      	strh	r3, [r7, #14]
 8000d8e:	e010      	b.n	8000db2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	81bb      	strh	r3, [r7, #12]
 8000d94:	e006      	b.n	8000da4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000d96:	8c3b      	ldrh	r3, [r7, #32]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff35 	bl	8000c08 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000d9e:	89bb      	ldrh	r3, [r7, #12]
 8000da0:	3301      	adds	r3, #1
 8000da2:	81bb      	strh	r3, [r7, #12]
 8000da4:	89ba      	ldrh	r2, [r7, #12]
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d3f4      	bcc.n	8000d96 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000dac:	89fb      	ldrh	r3, [r7, #14]
 8000dae:	3301      	adds	r3, #1
 8000db0:	81fb      	strh	r3, [r7, #14]
 8000db2:	89fa      	ldrh	r2, [r7, #14]
 8000db4:	883b      	ldrh	r3, [r7, #0]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3ea      	bcc.n	8000d90 <lcd_Fill+0x38>
		}
	}
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}

08000dc4 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dd6:	88bb      	ldrh	r3, [r7, #4]
 8000dd8:	88fa      	ldrh	r2, [r7, #6]
 8000dda:	88b9      	ldrh	r1, [r7, #4]
 8000ddc:	88f8      	ldrh	r0, [r7, #6]
 8000dde:	f7ff ff35 	bl	8000c4c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff0f 	bl	8000c08 <LCD_WR_DATA>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4623      	mov	r3, r4
 8000e04:	80fb      	strh	r3, [r7, #6]
 8000e06:	4603      	mov	r3, r0
 8000e08:	80bb      	strh	r3, [r7, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	70fb      	strb	r3, [r7, #3]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf14      	ite	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	2300      	moveq	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	fb12 f303 	smulbb	r3, r2, r3
 8000e4a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	3b20      	subs	r3, #32
 8000e50:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b29c      	uxth	r4, r3
 8000e60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	88b9      	ldrh	r1, [r7, #4]
 8000e72:	88f8      	ldrh	r0, [r7, #6]
 8000e74:	4622      	mov	r2, r4
 8000e76:	f7ff fee9 	bl	8000c4c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	827b      	strh	r3, [r7, #18]
 8000e7e:	e07a      	b.n	8000f76 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e84:	2b0c      	cmp	r3, #12
 8000e86:	d028      	beq.n	8000eda <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	d108      	bne.n	8000ea2 <lcd_ShowChar+0xae>
 8000e90:	78fa      	ldrb	r2, [r7, #3]
 8000e92:	8a7b      	ldrh	r3, [r7, #18]
 8000e94:	493c      	ldr	r1, [pc, #240]	@ (8000f88 <lcd_ShowChar+0x194>)
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	440a      	add	r2, r1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	e01b      	b.n	8000eda <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ea6:	2b18      	cmp	r3, #24
 8000ea8:	d10b      	bne.n	8000ec2 <lcd_ShowChar+0xce>
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	8a79      	ldrh	r1, [r7, #18]
 8000eae:	4837      	ldr	r0, [pc, #220]	@ (8000f8c <lcd_ShowChar+0x198>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4403      	add	r3, r0
 8000eba:	440b      	add	r3, r1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	75fb      	strb	r3, [r7, #23]
 8000ec0:	e00b      	b.n	8000eda <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ec6:	2b20      	cmp	r3, #32
 8000ec8:	d15a      	bne.n	8000f80 <lcd_ShowChar+0x18c>
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	8a7b      	ldrh	r3, [r7, #18]
 8000ece:	4930      	ldr	r1, [pc, #192]	@ (8000f90 <lcd_ShowChar+0x19c>)
 8000ed0:	0192      	lsls	r2, r2, #6
 8000ed2:	440a      	add	r2, r1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	75bb      	strb	r3, [r7, #22]
 8000ede:	e044      	b.n	8000f6a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000ee0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d120      	bne.n	8000f2a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ee8:	7dfa      	ldrb	r2, [r7, #23]
 8000eea:	7dbb      	ldrb	r3, [r7, #22]
 8000eec:	fa42 f303 	asr.w	r3, r2, r3
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <lcd_ShowChar+0x10e>
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe84 	bl	8000c08 <LCD_WR_DATA>
 8000f00:	e003      	b.n	8000f0a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe7f 	bl	8000c08 <LCD_WR_DATA>
				m++;
 8000f0a:	7d7b      	ldrb	r3, [r7, #21]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f10:	7d7b      	ldrb	r3, [r7, #21]
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f18:	fb01 f202 	mul.w	r2, r1, r2
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d11f      	bne.n	8000f64 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	757b      	strb	r3, [r7, #21]
					break;
 8000f28:	e022      	b.n	8000f70 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	7dbb      	ldrb	r3, [r7, #22]
 8000f2e:	fa42 f303 	asr.w	r3, r2, r3
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <lcd_ShowChar+0x152>
 8000f3a:	883a      	ldrh	r2, [r7, #0]
 8000f3c:	88b9      	ldrh	r1, [r7, #4]
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff3f 	bl	8000dc4 <lcd_DrawPoint>
				x++;
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f4c:	88fa      	ldrh	r2, [r7, #6]
 8000f4e:	8a3b      	ldrh	r3, [r7, #16]
 8000f50:	1ad2      	subs	r2, r2, r3
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d105      	bne.n	8000f64 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f58:	8a3b      	ldrh	r3, [r7, #16]
 8000f5a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	80bb      	strh	r3, [r7, #4]
					break;
 8000f62:	e005      	b.n	8000f70 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f64:	7dbb      	ldrb	r3, [r7, #22]
 8000f66:	3301      	adds	r3, #1
 8000f68:	75bb      	strb	r3, [r7, #22]
 8000f6a:	7dbb      	ldrb	r3, [r7, #22]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	d9b7      	bls.n	8000ee0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f70:	8a7b      	ldrh	r3, [r7, #18]
 8000f72:	3301      	adds	r3, #1
 8000f74:	827b      	strh	r3, [r7, #18]
 8000f76:	8a7a      	ldrh	r2, [r7, #18]
 8000f78:	89bb      	ldrh	r3, [r7, #12]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d380      	bcc.n	8000e80 <lcd_ShowChar+0x8c>
 8000f7e:	e000      	b.n	8000f82 <lcd_ShowChar+0x18e>
		else return;
 8000f80:	bf00      	nop
				}
			}
		}
	}
}
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	08008de8 	.word	0x08008de8
 8000f8c:	080093d8 	.word	0x080093d8
 8000f90:	0800a5a8 	.word	0x0800a5a8

08000f94 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fa8:	e004      	b.n	8000fb4 <mypow+0x20>
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	1e5a      	subs	r2, r3, #1
 8000fb8:	71ba      	strb	r2, [r7, #6]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f5      	bne.n	8000faa <mypow+0x16>
	return result;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4623      	mov	r3, r4
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000fee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ff2:	085b      	lsrs	r3, r3, #1
 8000ff4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e059      	b.n	80010b0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000ffc:	887c      	ldrh	r4, [r7, #2]
 8000ffe:	787a      	ldrb	r2, [r7, #1]
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3b01      	subs	r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4619      	mov	r1, r3
 800100c:	200a      	movs	r0, #10
 800100e:	f7ff ffc1 	bl	8000f94 <mypow>
 8001012:	4603      	mov	r3, r0
 8001014:	fbb4 f1f3 	udiv	r1, r4, r3
 8001018:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <lcd_ShowIntNum+0xf8>)
 800101a:	fba3 2301 	umull	r2, r3, r3, r1
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	1aca      	subs	r2, r1, r3
 800102a:	4613      	mov	r3, r2
 800102c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d121      	bne.n	8001078 <lcd_ShowIntNum+0xac>
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	3b01      	subs	r3, #1
 800103a:	429a      	cmp	r2, r3
 800103c:	da1c      	bge.n	8001078 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d117      	bne.n	8001074 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	b29a      	uxth	r2, r3
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	b29b      	uxth	r3, r3
 800104c:	fb12 f303 	smulbb	r3, r2, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4413      	add	r3, r2
 8001056:	b298      	uxth	r0, r3
 8001058:	8c3a      	ldrh	r2, [r7, #32]
 800105a:	88b9      	ldrh	r1, [r7, #4]
 800105c:	2300      	movs	r3, #0
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	2220      	movs	r2, #32
 800106e:	f7ff fec1 	bl	8000df4 <lcd_ShowChar>
				continue;
 8001072:	e01a      	b.n	80010aa <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001074:	2301      	movs	r3, #1
 8001076:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	b29a      	uxth	r2, r3
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	b29b      	uxth	r3, r3
 8001080:	fb12 f303 	smulbb	r3, r2, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4413      	add	r3, r2
 800108a:	b298      	uxth	r0, r3
 800108c:	7b3b      	ldrb	r3, [r7, #12]
 800108e:	3330      	adds	r3, #48	@ 0x30
 8001090:	b2da      	uxtb	r2, r3
 8001092:	8c3c      	ldrh	r4, [r7, #32]
 8001094:	88b9      	ldrh	r1, [r7, #4]
 8001096:	2300      	movs	r3, #0
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4623      	mov	r3, r4
 80010a6:	f7ff fea5 	bl	8000df4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	3301      	adds	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	787b      	ldrb	r3, [r7, #1]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3a1      	bcc.n	8000ffc <lcd_ShowIntNum+0x30>
	}
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	cccccccd 	.word	0xcccccccd

080010c8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <lcd_SetDir+0x44>)
 80010e4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010e8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <lcd_SetDir+0x44>)
 80010ec:	22f0      	movs	r2, #240	@ 0xf0
 80010ee:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80010f0:	e006      	b.n	8001100 <lcd_SetDir+0x38>
		lcddev.width=240;
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <lcd_SetDir+0x44>)
 80010f4:	22f0      	movs	r2, #240	@ 0xf0
 80010f6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <lcd_SetDir+0x44>)
 80010fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010fe:	805a      	strh	r2, [r3, #2]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	20000168 	.word	0x20000168

08001110 <lcd_init>:


void lcd_init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800111a:	48aa      	ldr	r0, [pc, #680]	@ (80013c4 <lcd_init+0x2b4>)
 800111c:	f002 fcec 	bl	8003af8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001120:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001124:	f002 f984 	bl	8003430 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800112e:	48a5      	ldr	r0, [pc, #660]	@ (80013c4 <lcd_init+0x2b4>)
 8001130:	f002 fce2 	bl	8003af8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001134:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001138:	f002 f97a 	bl	8003430 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff ffc3 	bl	80010c8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001142:	20d3      	movs	r0, #211	@ 0xd3
 8001144:	f7ff fd50 	bl	8000be8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001148:	f7ff fd6e 	bl	8000c28 <LCD_RD_DATA>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b9d      	ldr	r3, [pc, #628]	@ (80013c8 <lcd_init+0x2b8>)
 8001152:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001154:	f7ff fd68 	bl	8000c28 <LCD_RD_DATA>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b9a      	ldr	r3, [pc, #616]	@ (80013c8 <lcd_init+0x2b8>)
 800115e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001160:	f7ff fd62 	bl	8000c28 <LCD_RD_DATA>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b97      	ldr	r3, [pc, #604]	@ (80013c8 <lcd_init+0x2b8>)
 800116a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800116c:	4b96      	ldr	r3, [pc, #600]	@ (80013c8 <lcd_init+0x2b8>)
 800116e:	889b      	ldrh	r3, [r3, #4]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b94      	ldr	r3, [pc, #592]	@ (80013c8 <lcd_init+0x2b8>)
 8001176:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001178:	f7ff fd56 	bl	8000c28 <LCD_RD_DATA>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b91      	ldr	r3, [pc, #580]	@ (80013c8 <lcd_init+0x2b8>)
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b8f      	ldr	r3, [pc, #572]	@ (80013c8 <lcd_init+0x2b8>)
 800118a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800118c:	20cf      	movs	r0, #207	@ 0xcf
 800118e:	f7ff fd2b 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fd38 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001198:	20c1      	movs	r0, #193	@ 0xc1
 800119a:	f7ff fd35 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800119e:	2030      	movs	r0, #48	@ 0x30
 80011a0:	f7ff fd32 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011a4:	20ed      	movs	r0, #237	@ 0xed
 80011a6:	f7ff fd1f 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011aa:	2064      	movs	r0, #100	@ 0x64
 80011ac:	f7ff fd2c 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f7ff fd29 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011b6:	2012      	movs	r0, #18
 80011b8:	f7ff fd26 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011bc:	2081      	movs	r0, #129	@ 0x81
 80011be:	f7ff fd23 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011c2:	20e8      	movs	r0, #232	@ 0xe8
 80011c4:	f7ff fd10 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011c8:	2085      	movs	r0, #133	@ 0x85
 80011ca:	f7ff fd1d 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011ce:	2010      	movs	r0, #16
 80011d0:	f7ff fd1a 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011d4:	207a      	movs	r0, #122	@ 0x7a
 80011d6:	f7ff fd17 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011da:	20cb      	movs	r0, #203	@ 0xcb
 80011dc:	f7ff fd04 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011e0:	2039      	movs	r0, #57	@ 0x39
 80011e2:	f7ff fd11 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011e6:	202c      	movs	r0, #44	@ 0x2c
 80011e8:	f7ff fd0e 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fd0b 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80011f2:	2034      	movs	r0, #52	@ 0x34
 80011f4:	f7ff fd08 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80011f8:	2002      	movs	r0, #2
 80011fa:	f7ff fd05 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80011fe:	20f7      	movs	r0, #247	@ 0xf7
 8001200:	f7ff fcf2 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001204:	2020      	movs	r0, #32
 8001206:	f7ff fcff 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800120a:	20ea      	movs	r0, #234	@ 0xea
 800120c:	f7ff fcec 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fcf9 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fcf6 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800121c:	20c0      	movs	r0, #192	@ 0xc0
 800121e:	f7ff fce3 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001222:	201b      	movs	r0, #27
 8001224:	f7ff fcf0 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001228:	20c1      	movs	r0, #193	@ 0xc1
 800122a:	f7ff fcdd 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff fcea 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001234:	20c5      	movs	r0, #197	@ 0xc5
 8001236:	f7ff fcd7 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800123a:	2030      	movs	r0, #48	@ 0x30
 800123c:	f7ff fce4 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001240:	2030      	movs	r0, #48	@ 0x30
 8001242:	f7ff fce1 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001246:	20c7      	movs	r0, #199	@ 0xc7
 8001248:	f7ff fcce 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800124c:	20b7      	movs	r0, #183	@ 0xb7
 800124e:	f7ff fcdb 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001252:	2036      	movs	r0, #54	@ 0x36
 8001254:	f7ff fcc8 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001258:	2008      	movs	r0, #8
 800125a:	f7ff fcd5 	bl	8000c08 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800125e:	203a      	movs	r0, #58	@ 0x3a
 8001260:	f7ff fcc2 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001264:	2055      	movs	r0, #85	@ 0x55
 8001266:	f7ff fccf 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800126a:	20b1      	movs	r0, #177	@ 0xb1
 800126c:	f7ff fcbc 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fcc9 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001276:	201a      	movs	r0, #26
 8001278:	f7ff fcc6 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800127c:	20b6      	movs	r0, #182	@ 0xb6
 800127e:	f7ff fcb3 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001282:	200a      	movs	r0, #10
 8001284:	f7ff fcc0 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001288:	20a2      	movs	r0, #162	@ 0xa2
 800128a:	f7ff fcbd 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800128e:	20f2      	movs	r0, #242	@ 0xf2
 8001290:	f7ff fcaa 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fcb7 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800129a:	2026      	movs	r0, #38	@ 0x26
 800129c:	f7ff fca4 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff fcb1 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012a6:	20e0      	movs	r0, #224	@ 0xe0
 80012a8:	f7ff fc9e 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012ac:	200f      	movs	r0, #15
 80012ae:	f7ff fcab 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012b2:	202a      	movs	r0, #42	@ 0x2a
 80012b4:	f7ff fca8 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012b8:	2028      	movs	r0, #40	@ 0x28
 80012ba:	f7ff fca5 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012be:	2008      	movs	r0, #8
 80012c0:	f7ff fca2 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012c4:	200e      	movs	r0, #14
 80012c6:	f7ff fc9f 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012ca:	2008      	movs	r0, #8
 80012cc:	f7ff fc9c 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012d0:	2054      	movs	r0, #84	@ 0x54
 80012d2:	f7ff fc99 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012d6:	20a9      	movs	r0, #169	@ 0xa9
 80012d8:	f7ff fc96 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012dc:	2043      	movs	r0, #67	@ 0x43
 80012de:	f7ff fc93 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012e2:	200a      	movs	r0, #10
 80012e4:	f7ff fc90 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012e8:	200f      	movs	r0, #15
 80012ea:	f7ff fc8d 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fc8a 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fc87 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fc84 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fc81 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001306:	20e1      	movs	r0, #225	@ 0xe1
 8001308:	f7ff fc6e 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fc7b 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001312:	2015      	movs	r0, #21
 8001314:	f7ff fc78 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001318:	2017      	movs	r0, #23
 800131a:	f7ff fc75 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800131e:	2007      	movs	r0, #7
 8001320:	f7ff fc72 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001324:	2011      	movs	r0, #17
 8001326:	f7ff fc6f 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800132a:	2006      	movs	r0, #6
 800132c:	f7ff fc6c 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001330:	202b      	movs	r0, #43	@ 0x2b
 8001332:	f7ff fc69 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001336:	2056      	movs	r0, #86	@ 0x56
 8001338:	f7ff fc66 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800133c:	203c      	movs	r0, #60	@ 0x3c
 800133e:	f7ff fc63 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001342:	2005      	movs	r0, #5
 8001344:	f7ff fc60 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001348:	2010      	movs	r0, #16
 800134a:	f7ff fc5d 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800134e:	200f      	movs	r0, #15
 8001350:	f7ff fc5a 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001354:	203f      	movs	r0, #63	@ 0x3f
 8001356:	f7ff fc57 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800135a:	203f      	movs	r0, #63	@ 0x3f
 800135c:	f7ff fc54 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001360:	200f      	movs	r0, #15
 8001362:	f7ff fc51 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001366:	202b      	movs	r0, #43	@ 0x2b
 8001368:	f7ff fc3e 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fc4b 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fc48 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fc45 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800137e:	203f      	movs	r0, #63	@ 0x3f
 8001380:	f7ff fc42 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001384:	202a      	movs	r0, #42	@ 0x2a
 8001386:	f7ff fc2f 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fc3c 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fc39 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fc36 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800139c:	20ef      	movs	r0, #239	@ 0xef
 800139e:	f7ff fc33 	bl	8000c08 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013a2:	2011      	movs	r0, #17
 80013a4:	f7ff fc20 	bl	8000be8 <LCD_WR_REG>
	HAL_Delay(120);
 80013a8:	2078      	movs	r0, #120	@ 0x78
 80013aa:	f002 f841 	bl	8003430 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013ae:	2029      	movs	r0, #41	@ 0x29
 80013b0:	f7ff fc1a 	bl	8000be8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ba:	4804      	ldr	r0, [pc, #16]	@ (80013cc <lcd_init+0x2bc>)
 80013bc:	f002 fb9c 	bl	8003af8 <HAL_GPIO_WritePin>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020800 	.word	0x40020800
 80013c8:	20000168 	.word	0x20000168
 80013cc:	40020000 	.word	0x40020000

080013d0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b08b      	sub	sp, #44	@ 0x2c
 80013d4:	af04      	add	r7, sp, #16
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	461a      	mov	r2, r3
 80013da:	4603      	mov	r3, r0
 80013dc:	81fb      	strh	r3, [r7, #14]
 80013de:	460b      	mov	r3, r1
 80013e0:	81bb      	strh	r3, [r7, #12]
 80013e2:	4613      	mov	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013ee:	e048      	b.n	8001482 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d145      	bne.n	8001482 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013f6:	89fa      	ldrh	r2, [r7, #14]
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <lcd_ShowStr+0xc4>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	1acb      	subs	r3, r1, r3
 8001408:	429a      	cmp	r2, r3
 800140a:	dc3f      	bgt.n	800148c <lcd_ShowStr+0xbc>
 800140c:	89ba      	ldrh	r2, [r7, #12]
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <lcd_ShowStr+0xc4>)
 8001410:	885b      	ldrh	r3, [r3, #2]
 8001412:	4619      	mov	r1, r3
 8001414:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001418:	1acb      	subs	r3, r1, r3
 800141a:	429a      	cmp	r2, r3
 800141c:	dc36      	bgt.n	800148c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b80      	cmp	r3, #128	@ 0x80
 8001424:	d902      	bls.n	800142c <lcd_ShowStr+0x5c>
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
 800142a:	e02a      	b.n	8001482 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b0d      	cmp	r3, #13
 8001432:	d10b      	bne.n	800144c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001434:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001438:	b29a      	uxth	r2, r3
 800143a:	89bb      	ldrh	r3, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001440:	8abb      	ldrh	r3, [r7, #20]
 8001442:	81fb      	strh	r3, [r7, #14]
					str++;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	e017      	b.n	800147c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	88fc      	ldrh	r4, [r7, #6]
 8001452:	89b9      	ldrh	r1, [r7, #12]
 8001454:	89f8      	ldrh	r0, [r7, #14]
 8001456:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4623      	mov	r3, r4
 8001468:	f7ff fcc4 	bl	8000df4 <lcd_ShowChar>
					x+=sizey/2;
 800146c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	4413      	add	r3, r2
 800147a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1b2      	bne.n	80013f0 <lcd_ShowStr+0x20>
 800148a:	e000      	b.n	800148e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800148c:	bf00      	nop
			}
		}
	}
}
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	20000168 	.word	0x20000168

08001498 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af04      	add	r7, sp, #16
 800149e:	60ba      	str	r2, [r7, #8]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	81fb      	strh	r3, [r7, #14]
 80014a6:	460b      	mov	r3, r1
 80014a8:	81bb      	strh	r3, [r7, #12]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f7fe fe8e 	bl	80001d0 <strlen>
 80014b4:	4603      	mov	r3, r0
 80014b6:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <lcd_StrCenter+0x60>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	8afb      	ldrh	r3, [r7, #22]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	0fda      	lsrs	r2, r3, #31
 80014c6:	4413      	add	r3, r2
 80014c8:	105b      	asrs	r3, r3, #1
 80014ca:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014cc:	89fa      	ldrh	r2, [r7, #14]
 80014ce:	8abb      	ldrh	r3, [r7, #20]
 80014d0:	4413      	add	r3, r2
 80014d2:	b298      	uxth	r0, r3
 80014d4:	88fa      	ldrh	r2, [r7, #6]
 80014d6:	89b9      	ldrh	r1, [r7, #12]
 80014d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	8c3b      	ldrh	r3, [r7, #32]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f7ff ff70 	bl	80013d0 <lcd_ShowStr>
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000168 	.word	0x20000168

080014fc <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	2140      	movs	r1, #64	@ 0x40
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <led7_init+0x14>)
 8001506:	f002 faf7 	bl	8003af8 <HAL_GPIO_WritePin>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021800 	.word	0x40021800

08001514 <led7_Scan>:

void led7_Scan(){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <led7_Scan+0x104>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <led7_Scan+0x104>)
 8001522:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001524:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <led7_Scan+0x108>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a3d      	ldr	r2, [pc, #244]	@ (8001620 <led7_Scan+0x10c>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b39      	ldr	r3, [pc, #228]	@ (8001618 <led7_Scan+0x104>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <led7_Scan+0x104>)
 800153e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <led7_Scan+0x108>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d847      	bhi.n	80015d8 <led7_Scan+0xc4>
 8001548:	a201      	add	r2, pc, #4	@ (adr r2, 8001550 <led7_Scan+0x3c>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	0800157f 	.word	0x0800157f
 8001558:	0800159d 	.word	0x0800159d
 800155c:	080015bb 	.word	0x080015bb
	case 0:
		spi_buffer |= 0x00b0;
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <led7_Scan+0x104>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <led7_Scan+0x104>)
 800156c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <led7_Scan+0x104>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <led7_Scan+0x104>)
 800157a:	801a      	strh	r2, [r3, #0]
		break;
 800157c:	e02d      	b.n	80015da <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800157e:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <led7_Scan+0x104>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <led7_Scan+0x104>)
 800158a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <led7_Scan+0x104>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f023 0320 	bic.w	r3, r3, #32
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <led7_Scan+0x104>)
 8001598:	801a      	strh	r2, [r3, #0]
		break;
 800159a:	e01e      	b.n	80015da <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800159c:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <led7_Scan+0x104>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <led7_Scan+0x104>)
 80015a8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <led7_Scan+0x104>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	f023 0310 	bic.w	r3, r3, #16
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <led7_Scan+0x104>)
 80015b6:	801a      	strh	r2, [r3, #0]
		break;
 80015b8:	e00f      	b.n	80015da <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <led7_Scan+0x104>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <led7_Scan+0x104>)
 80015c6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <led7_Scan+0x104>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <led7_Scan+0x104>)
 80015d4:	801a      	strh	r2, [r3, #0]
		break;
 80015d6:	e000      	b.n	80015da <led7_Scan+0xc6>
	default:
		break;
 80015d8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <led7_Scan+0x108>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	425a      	negs	r2, r3
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	bf58      	it	pl
 80015ec:	4253      	negpl	r3, r2
 80015ee:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <led7_Scan+0x108>)
 80015f0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2140      	movs	r1, #64	@ 0x40
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <led7_Scan+0x110>)
 80015f8:	f002 fa7e 	bl	8003af8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015fc:	2301      	movs	r3, #1
 80015fe:	2202      	movs	r2, #2
 8001600:	4905      	ldr	r1, [pc, #20]	@ (8001618 <led7_Scan+0x104>)
 8001602:	4809      	ldr	r0, [pc, #36]	@ (8001628 <led7_Scan+0x114>)
 8001604:	f003 ff73 	bl	80054ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	2140      	movs	r1, #64	@ 0x40
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <led7_Scan+0x110>)
 800160e:	f002 fa73 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000004 	.word	0x20000004
 800161c:	20000170 	.word	0x20000170
 8001620:	20000000 	.word	0x20000000
 8001624:	40021800 	.word	0x40021800
 8001628:	200001a4 	.word	0x200001a4

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f001 fe8c 	bl	800334c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f824 	bl	8001680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f7ff f968 	bl	800090c <MX_GPIO_Init>
  MX_TIM2_Init();
 800163c:	f001 fcea 	bl	8003014 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001640:	f001 fb48 	bl	8002cd4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001644:	f7ff f892 	bl	800076c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001648:	f7ff fa58 	bl	8000afc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800164c:	f001 fd9c 	bl	8003188 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001650:	f000 f880 	bl	8001754 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_Clear(BLACK);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fb45 	bl	8000ce4 <lcd_Clear>
  updateTime();
 800165a:	f000 f891 	bl	8001780 <updateTime>
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 800165e:	bf00      	nop
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <main+0x50>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0fb      	beq.n	8001660 <main+0x34>
	  flag_timer2 = 0;
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <main+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800166e:	f7fe ff8b 	bl	8000588 <button_Scan>
	  ds3231_ReadTime();
 8001672:	f7ff f817 	bl	80006a4 <ds3231_ReadTime>
//	  test_Uart();
	  fsm();
 8001676:	f001 f875 	bl	8002764 <fsm>
	  while(!flag_timer2);
 800167a:	e7f0      	b.n	800165e <main+0x32>
 800167c:	2000019c 	.word	0x2000019c

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b094      	sub	sp, #80	@ 0x50
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	2230      	movs	r2, #48	@ 0x30
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f006 fcf6 	bl	8008080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	4b28      	ldr	r3, [pc, #160]	@ (800174c <SystemClock_Config+0xcc>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	4a27      	ldr	r2, [pc, #156]	@ (800174c <SystemClock_Config+0xcc>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <SystemClock_Config+0xcc>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <SystemClock_Config+0xd0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a21      	ldr	r2, [pc, #132]	@ (8001750 <SystemClock_Config+0xd0>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <SystemClock_Config+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e4:	2310      	movs	r3, #16
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016f0:	2308      	movs	r3, #8
 80016f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016f4:	23a8      	movs	r3, #168	@ 0xa8
 80016f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	4618      	mov	r0, r3
 8001706:	f003 f9d1 	bl	8004aac <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001710:	f001 f9e6 	bl	8002ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001714:	230f      	movs	r3, #15
 8001716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001718:	2302      	movs	r3, #2
 800171a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001720:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001726:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800172a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2105      	movs	r1, #5
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fc32 	bl	8004f9c <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800173e:	f001 f9cf 	bl	8002ae0 <Error_Handler>
  }
}
 8001742:	bf00      	nop
 8001744:	3750      	adds	r7, #80	@ 0x50
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000

08001754 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	  timer_init();
 8001758:	f001 fa6c 	bl	8002c34 <timer_init>
	  led7_init();
 800175c:	f7ff fece 	bl	80014fc <led7_init>
	  button_init();
 8001760:	f7fe ff06 	bl	8000570 <button_init>
	  lcd_init();
 8001764:	f7ff fcd4 	bl	8001110 <lcd_init>
	  uart_init_rs232();
 8001768:	f001 fcc6 	bl	80030f8 <uart_init_rs232>
	  initRingBuffer(&buffer);
 800176c:	4803      	ldr	r0, [pc, #12]	@ (800177c <system_init+0x28>)
 800176e:	f001 f9bd 	bl	8002aec <initRingBuffer>
	  setTimer2(50);
 8001772:	2032      	movs	r0, #50	@ 0x32
 8001774:	f001 fa68 	bl	8002c48 <setTimer2>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200002b0 	.word	0x200002b0

08001780 <updateTime>:
	if(count_led_debug == 0){
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
	}
}

void updateTime(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8001784:	2118      	movs	r1, #24
 8001786:	2006      	movs	r0, #6
 8001788:	f7fe ff6a 	bl	8000660 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 12);
 800178c:	210c      	movs	r1, #12
 800178e:	2005      	movs	r0, #5
 8001790:	f7fe ff66 	bl	8000660 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 2);
 8001794:	2102      	movs	r1, #2
 8001796:	2004      	movs	r0, #4
 8001798:	f7fe ff62 	bl	8000660 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 2);
 800179c:	2102      	movs	r1, #2
 800179e:	2003      	movs	r0, #3
 80017a0:	f7fe ff5e 	bl	8000660 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 16);
 80017a4:	2110      	movs	r1, #16
 80017a6:	2002      	movs	r0, #2
 80017a8:	f7fe ff5a 	bl	8000660 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7fe ff56 	bl	8000660 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7fe ff52 	bl	8000660 <ds3231_Write>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <Mode>:
		  }
	  }
}


char* Mode() {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	switch (currentMode) {
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <Mode+0x40>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d813      	bhi.n	80017f4 <Mode+0x34>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <Mode+0x14>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f1 	.word	0x080017f1
		case modeInit:
			return "Initial";
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <Mode+0x44>)
 80017e6:	e006      	b.n	80017f6 <Mode+0x36>
			break;
		case modeNormal:
			return "Normal";
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <Mode+0x48>)
 80017ea:	e004      	b.n	80017f6 <Mode+0x36>
			break;
		case modeModify:
			return "Modify";
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <Mode+0x4c>)
 80017ee:	e002      	b.n	80017f6 <Mode+0x36>
			break;
		case modeTimer:
			return "Timer";
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <Mode+0x50>)
 80017f2:	e000      	b.n	80017f6 <Mode+0x36>
			break;
	}
	return "Unknown!";
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <Mode+0x54>)
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	2000017c 	.word	0x2000017c
 8001804:	08008c90 	.word	0x08008c90
 8001808:	08008c98 	.word	0x08008c98
 800180c:	08008ca0 	.word	0x08008ca0
 8001810:	08008ca8 	.word	0x08008ca8
 8001814:	08008cb0 	.word	0x08008cb0

08001818 <checkTime>:

void checkTime() {
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	switch (temp) {
 800181c:	4b44      	ldr	r3, [pc, #272]	@ (8001930 <checkTime+0x118>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b06      	cmp	r3, #6
 8001822:	f200 8080 	bhi.w	8001926 <checkTime+0x10e>
 8001826:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <checkTime+0x14>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	08001849 	.word	0x08001849
 8001830:	08001865 	.word	0x08001865
 8001834:	08001881 	.word	0x08001881
 8001838:	0800189d 	.word	0x0800189d
 800183c:	080018b9 	.word	0x080018b9
 8001840:	080018d5 	.word	0x080018d5
 8001844:	080018f1 	.word	0x080018f1
		case 0:
			if (temp_time[temp] > 24) {
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <checkTime+0x118>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b39      	ldr	r3, [pc, #228]	@ (8001934 <checkTime+0x11c>)
 8001850:	5c9b      	ldrb	r3, [r3, r2]
 8001852:	2b18      	cmp	r3, #24
 8001854:	d95a      	bls.n	800190c <checkTime+0xf4>
				temp_time[temp] = 0;
 8001856:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <checkTime+0x118>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <checkTime+0x11c>)
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001862:	e053      	b.n	800190c <checkTime+0xf4>
		case 1:
			if (temp_time[temp] > 59) {
 8001864:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <checkTime+0x118>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <checkTime+0x11c>)
 800186c:	5c9b      	ldrb	r3, [r3, r2]
 800186e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001870:	d94e      	bls.n	8001910 <checkTime+0xf8>
				temp_time[temp] = 0;
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <checkTime+0x118>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <checkTime+0x11c>)
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]
			}
			break;
 800187e:	e047      	b.n	8001910 <checkTime+0xf8>
		case 2:
			if (temp_time[temp] > 59) {
 8001880:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <checkTime+0x118>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <checkTime+0x11c>)
 8001888:	5c9b      	ldrb	r3, [r3, r2]
 800188a:	2b3b      	cmp	r3, #59	@ 0x3b
 800188c:	d942      	bls.n	8001914 <checkTime+0xfc>
				temp_time[temp] = 0;
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <checkTime+0x118>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <checkTime+0x11c>)
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]
			}
			break;
 800189a:	e03b      	b.n	8001914 <checkTime+0xfc>
		case 3:
			if (temp_time[temp] > 8) {
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <checkTime+0x118>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <checkTime+0x11c>)
 80018a4:	5c9b      	ldrb	r3, [r3, r2]
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d936      	bls.n	8001918 <checkTime+0x100>
				temp_time[temp] = 2;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <checkTime+0x118>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <checkTime+0x11c>)
 80018b2:	2102      	movs	r1, #2
 80018b4:	5499      	strb	r1, [r3, r2]
			}
			break;
 80018b6:	e02f      	b.n	8001918 <checkTime+0x100>
		case 4:
			if (temp_time[temp] > 31) {
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <checkTime+0x118>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <checkTime+0x11c>)
 80018c0:	5c9b      	ldrb	r3, [r3, r2]
 80018c2:	2b1f      	cmp	r3, #31
 80018c4:	d92a      	bls.n	800191c <checkTime+0x104>
				temp_time[temp] = 0;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <checkTime+0x118>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <checkTime+0x11c>)
 80018ce:	2100      	movs	r1, #0
 80018d0:	5499      	strb	r1, [r3, r2]
			}
			break;
 80018d2:	e023      	b.n	800191c <checkTime+0x104>
		case 5:
			if (temp_time[temp] > 12) {
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <checkTime+0x118>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <checkTime+0x11c>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d91e      	bls.n	8001920 <checkTime+0x108>
				temp_time[temp] = 0;
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <checkTime+0x118>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <checkTime+0x11c>)
 80018ea:	2100      	movs	r1, #0
 80018ec:	5499      	strb	r1, [r3, r2]
			}
			break;
 80018ee:	e017      	b.n	8001920 <checkTime+0x108>
		case 6:
			if (temp_time[temp] > 99) {
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <checkTime+0x118>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <checkTime+0x11c>)
 80018f8:	5c9b      	ldrb	r3, [r3, r2]
 80018fa:	2b63      	cmp	r3, #99	@ 0x63
 80018fc:	d912      	bls.n	8001924 <checkTime+0x10c>
				temp_time[temp] = 0;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <checkTime+0x118>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <checkTime+0x11c>)
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]
			}
			break;
 800190a:	e00b      	b.n	8001924 <checkTime+0x10c>
			break;
 800190c:	bf00      	nop
 800190e:	e00a      	b.n	8001926 <checkTime+0x10e>
			break;
 8001910:	bf00      	nop
 8001912:	e008      	b.n	8001926 <checkTime+0x10e>
			break;
 8001914:	bf00      	nop
 8001916:	e006      	b.n	8001926 <checkTime+0x10e>
			break;
 8001918:	bf00      	nop
 800191a:	e004      	b.n	8001926 <checkTime+0x10e>
			break;
 800191c:	bf00      	nop
 800191e:	e002      	b.n	8001926 <checkTime+0x10e>
			break;
 8001920:	bf00      	nop
 8001922:	e000      	b.n	8001926 <checkTime+0x10e>
			break;
 8001924:	bf00      	nop
	}
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	20000176 	.word	0x20000176
 8001934:	20000180 	.word	0x20000180

08001938 <checkTimer>:

void checkTimer() {
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
	switch (temp_timer) {
 800193c:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <checkTimer+0x118>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b06      	cmp	r3, #6
 8001942:	f200 8080 	bhi.w	8001a46 <checkTimer+0x10e>
 8001946:	a201      	add	r2, pc, #4	@ (adr r2, 800194c <checkTimer+0x14>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	08001969 	.word	0x08001969
 8001950:	08001985 	.word	0x08001985
 8001954:	080019a1 	.word	0x080019a1
 8001958:	080019bd 	.word	0x080019bd
 800195c:	080019d9 	.word	0x080019d9
 8001960:	080019f5 	.word	0x080019f5
 8001964:	08001a11 	.word	0x08001a11
		case 0:
			if (timer[temp_timer] > 24) {
 8001968:	4b39      	ldr	r3, [pc, #228]	@ (8001a50 <checkTimer+0x118>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <checkTimer+0x11c>)
 8001970:	5c9b      	ldrb	r3, [r3, r2]
 8001972:	2b18      	cmp	r3, #24
 8001974:	d95a      	bls.n	8001a2c <checkTimer+0xf4>
				timer[temp_timer] = 0;
 8001976:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <checkTimer+0x118>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <checkTimer+0x11c>)
 800197e:	2100      	movs	r1, #0
 8001980:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001982:	e053      	b.n	8001a2c <checkTimer+0xf4>
		case 1:
			if (timer[temp_timer] > 59) {
 8001984:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <checkTimer+0x118>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <checkTimer+0x11c>)
 800198c:	5c9b      	ldrb	r3, [r3, r2]
 800198e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001990:	d94e      	bls.n	8001a30 <checkTimer+0xf8>
				timer[temp_timer] = 0;
 8001992:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <checkTimer+0x118>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b2e      	ldr	r3, [pc, #184]	@ (8001a54 <checkTimer+0x11c>)
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]
			}
			break;
 800199e:	e047      	b.n	8001a30 <checkTimer+0xf8>
		case 2:
			if (timer[temp_timer] > 59) {
 80019a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <checkTimer+0x118>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <checkTimer+0x11c>)
 80019a8:	5c9b      	ldrb	r3, [r3, r2]
 80019aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80019ac:	d942      	bls.n	8001a34 <checkTimer+0xfc>
				timer[temp_timer] = 0;
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <checkTimer+0x118>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <checkTimer+0x11c>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	5499      	strb	r1, [r3, r2]
			}
			break;
 80019ba:	e03b      	b.n	8001a34 <checkTimer+0xfc>
		case 3:
			if (timer[temp_timer] > 8) {
 80019bc:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <checkTimer+0x118>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <checkTimer+0x11c>)
 80019c4:	5c9b      	ldrb	r3, [r3, r2]
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d936      	bls.n	8001a38 <checkTimer+0x100>
				timer[temp_timer] = 2;
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <checkTimer+0x118>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <checkTimer+0x11c>)
 80019d2:	2102      	movs	r1, #2
 80019d4:	5499      	strb	r1, [r3, r2]
			}
			break;
 80019d6:	e02f      	b.n	8001a38 <checkTimer+0x100>
		case 4:
			if (timer[temp_timer] > 31) {
 80019d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <checkTimer+0x118>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <checkTimer+0x11c>)
 80019e0:	5c9b      	ldrb	r3, [r3, r2]
 80019e2:	2b1f      	cmp	r3, #31
 80019e4:	d92a      	bls.n	8001a3c <checkTimer+0x104>
				timer[temp_timer] = 0;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <checkTimer+0x118>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <checkTimer+0x11c>)
 80019ee:	2100      	movs	r1, #0
 80019f0:	5499      	strb	r1, [r3, r2]
			}
			break;
 80019f2:	e023      	b.n	8001a3c <checkTimer+0x104>
		case 5:
			if (timer[temp_timer] > 12) {
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <checkTimer+0x118>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <checkTimer+0x11c>)
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d91e      	bls.n	8001a40 <checkTimer+0x108>
				timer[temp_timer] = 0;
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <checkTimer+0x118>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <checkTimer+0x11c>)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001a0e:	e017      	b.n	8001a40 <checkTimer+0x108>
		case 6:
			if (timer[temp_timer] > 99) {
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <checkTimer+0x118>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <checkTimer+0x11c>)
 8001a18:	5c9b      	ldrb	r3, [r3, r2]
 8001a1a:	2b63      	cmp	r3, #99	@ 0x63
 8001a1c:	d912      	bls.n	8001a44 <checkTimer+0x10c>
				timer[temp_timer] = 0;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <checkTimer+0x118>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <checkTimer+0x11c>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001a2a:	e00b      	b.n	8001a44 <checkTimer+0x10c>
			break;
 8001a2c:	bf00      	nop
 8001a2e:	e00a      	b.n	8001a46 <checkTimer+0x10e>
			break;
 8001a30:	bf00      	nop
 8001a32:	e008      	b.n	8001a46 <checkTimer+0x10e>
			break;
 8001a34:	bf00      	nop
 8001a36:	e006      	b.n	8001a46 <checkTimer+0x10e>
			break;
 8001a38:	bf00      	nop
 8001a3a:	e004      	b.n	8001a46 <checkTimer+0x10e>
			break;
 8001a3c:	bf00      	nop
 8001a3e:	e002      	b.n	8001a46 <checkTimer+0x10e>
			break;
 8001a40:	bf00      	nop
 8001a42:	e000      	b.n	8001a46 <checkTimer+0x10e>
			break;
 8001a44:	bf00      	nop
	}
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	20000177 	.word	0x20000177
 8001a54:	20000188 	.word	0x20000188

08001a58 <displayTime>:


void displayTime(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, 50, Mode(), YELLOW, BLACK, 24, 0);
 8001a5e:	f7ff feaf 	bl	80017c0 <Mode>
 8001a62:	4602      	mov	r2, r0
 8001a64:	2300      	movs	r3, #0
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	2318      	movs	r3, #24
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a74:	2132      	movs	r1, #50	@ 0x32
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff fd0e 	bl	8001498 <lcd_StrCenter>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, WHITE, BLACK, 24);
 8001a7c:	4b35      	ldr	r3, [pc, #212]	@ (8001b54 <displayTime+0xfc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	2318      	movs	r3, #24
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	2300      	movs	r3, #0
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2302      	movs	r3, #2
 8001a92:	2164      	movs	r1, #100	@ 0x64
 8001a94:	2046      	movs	r0, #70	@ 0x46
 8001a96:	f7ff fa99 	bl	8000fcc <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, WHITE, BLACK, 24);
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b58 <displayTime+0x100>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2318      	movs	r3, #24
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	2164      	movs	r1, #100	@ 0x64
 8001ab2:	206e      	movs	r0, #110	@ 0x6e
 8001ab4:	f7ff fa8a 	bl	8000fcc <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, WHITE, BLACK, 24);
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <displayTime+0x104>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	2318      	movs	r3, #24
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2302      	movs	r3, #2
 8001ace:	2164      	movs	r1, #100	@ 0x64
 8001ad0:	2096      	movs	r0, #150	@ 0x96
 8001ad2:	f7ff fa7b 	bl	8000fcc <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, GREEN, BLACK, 24);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <displayTime+0x108>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	2318      	movs	r3, #24
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2302      	movs	r3, #2
 8001aec:	2182      	movs	r1, #130	@ 0x82
 8001aee:	2014      	movs	r0, #20
 8001af0:	f7ff fa6c 	bl	8000fcc <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, GREEN, BLACK, 24);
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <displayTime+0x10c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	2318      	movs	r3, #24
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	2300      	movs	r3, #0
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	2182      	movs	r1, #130	@ 0x82
 8001b0c:	2046      	movs	r0, #70	@ 0x46
 8001b0e:	f7ff fa5d 	bl	8000fcc <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, GREEN, BLACK, 24);
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <displayTime+0x110>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	2318      	movs	r3, #24
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2302      	movs	r3, #2
 8001b28:	2182      	movs	r1, #130	@ 0x82
 8001b2a:	206e      	movs	r0, #110	@ 0x6e
 8001b2c:	f7ff fa4e 	bl	8000fcc <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, GREEN, BLACK, 24);
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <displayTime+0x114>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	2318      	movs	r3, #24
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2302      	movs	r3, #2
 8001b46:	2182      	movs	r1, #130	@ 0x82
 8001b48:	2096      	movs	r0, #150	@ 0x96
 8001b4a:	f7ff fa3f 	bl	8000fcc <lcd_ShowIntNum>
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200000b7 	.word	0x200000b7
 8001b58:	200000b8 	.word	0x200000b8
 8001b5c:	200000b9 	.word	0x200000b9
 8001b60:	200000bb 	.word	0x200000bb
 8001b64:	200000ba 	.word	0x200000ba
 8001b68:	200000bc 	.word	0x200000bc
 8001b6c:	200000bd 	.word	0x200000bd

08001b70 <ConfigTime>:

void ConfigTime() {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af04      	add	r7, sp, #16
	count_modify = (count_modify + 1) % 10;
 8001b76:	4bb3      	ldr	r3, [pc, #716]	@ (8001e44 <ConfigTime+0x2d4>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4bb2      	ldr	r3, [pc, #712]	@ (8001e48 <ConfigTime+0x2d8>)
 8001b7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b82:	1099      	asrs	r1, r3, #2
 8001b84:	17d3      	asrs	r3, r2, #31
 8001b86:	1ac9      	subs	r1, r1, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	1ad1      	subs	r1, r2, r3
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	4bab      	ldr	r3, [pc, #684]	@ (8001e44 <ConfigTime+0x2d4>)
 8001b96:	701a      	strb	r2, [r3, #0]
	if (flag_uart == 1) {
 8001b98:	4bac      	ldr	r3, [pc, #688]	@ (8001e4c <ConfigTime+0x2dc>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d14e      	bne.n	8001c3e <ConfigTime+0xce>
		time_out_count = (time_out_count + 1) % 200;
 8001ba0:	4bab      	ldr	r3, [pc, #684]	@ (8001e50 <ConfigTime+0x2e0>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	4aab      	ldr	r2, [pc, #684]	@ (8001e54 <ConfigTime+0x2e4>)
 8001ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bac:	1191      	asrs	r1, r2, #6
 8001bae:	17da      	asrs	r2, r3, #31
 8001bb0:	1a8a      	subs	r2, r1, r2
 8001bb2:	21c8      	movs	r1, #200	@ 0xc8
 8001bb4:	fb01 f202 	mul.w	r2, r1, r2
 8001bb8:	1a9a      	subs	r2, r3, r2
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	4ba4      	ldr	r3, [pc, #656]	@ (8001e50 <ConfigTime+0x2e0>)
 8001bbe:	701a      	strb	r2, [r3, #0]
		if (time_out_count == 0) {
 8001bc0:	4ba3      	ldr	r3, [pc, #652]	@ (8001e50 <ConfigTime+0x2e0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d13a      	bne.n	8001c3e <ConfigTime+0xce>
			flag_uart = 0;
 8001bc8:	4ba0      	ldr	r3, [pc, #640]	@ (8001e4c <ConfigTime+0x2dc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
			time_out_stat++;
 8001bce:	4ba2      	ldr	r3, [pc, #648]	@ (8001e58 <ConfigTime+0x2e8>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8001e58 <ConfigTime+0x2e8>)
 8001bd8:	701a      	strb	r2, [r3, #0]
			if (time_out_stat == 3) {
 8001bda:	4b9f      	ldr	r3, [pc, #636]	@ (8001e58 <ConfigTime+0x2e8>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d12d      	bne.n	8001c3e <ConfigTime+0xce>
				flag = 0;
 8001be2:	4b9e      	ldr	r3, [pc, #632]	@ (8001e5c <ConfigTime+0x2ec>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
				flag_uart = 0;
 8001be8:	4b98      	ldr	r3, [pc, #608]	@ (8001e4c <ConfigTime+0x2dc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
				lcd_Fill(0, 50, 240, 75, BLACK);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	234b      	movs	r3, #75	@ 0x4b
 8001bf4:	22f0      	movs	r2, #240	@ 0xf0
 8001bf6:	2132      	movs	r1, #50	@ 0x32
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff f8ad 	bl	8000d58 <lcd_Fill>
				lcd_Fill(0, 200, 240, 250, BLACK);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	23fa      	movs	r3, #250	@ 0xfa
 8001c04:	22f0      	movs	r2, #240	@ 0xf0
 8001c06:	21c8      	movs	r1, #200	@ 0xc8
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff f8a5 	bl	8000d58 <lcd_Fill>
				lcd_Fill(0, 200, 240, 230, BLACK);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	23e6      	movs	r3, #230	@ 0xe6
 8001c14:	22f0      	movs	r2, #240	@ 0xf0
 8001c16:	21c8      	movs	r1, #200	@ 0xc8
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff f89d 	bl	8000d58 <lcd_Fill>
				lcd_StrCenter(0, 250, "Modified Error!", RED, BLACK, 16, 0);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	2310      	movs	r3, #16
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c2e:	4a8c      	ldr	r2, [pc, #560]	@ (8001e60 <ConfigTime+0x2f0>)
 8001c30:	21fa      	movs	r1, #250	@ 0xfa
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fc30 	bl	8001498 <lcd_StrCenter>
				currentMode = modeNormal;
 8001c38:	4b8a      	ldr	r3, [pc, #552]	@ (8001e64 <ConfigTime+0x2f4>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (count_modify > 5) {
 8001c3e:	4b81      	ldr	r3, [pc, #516]	@ (8001e44 <ConfigTime+0x2d4>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	f240 8268 	bls.w	8002118 <ConfigTime+0x5a8>
		switch (temp){
 8001c48:	4b87      	ldr	r3, [pc, #540]	@ (8001e68 <ConfigTime+0x2f8>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	f200 82e9 	bhi.w	8002224 <ConfigTime+0x6b4>
 8001c52:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <ConfigTime+0xe8>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c75 	.word	0x08001c75
 8001c5c:	08001d1b 	.word	0x08001d1b
 8001c60:	08001daf 	.word	0x08001daf
 8001c64:	08001e99 	.word	0x08001e99
 8001c68:	08001f1f 	.word	0x08001f1f
 8001c6c:	08001fb3 	.word	0x08001fb3
 8001c70:	08002047 	.word	0x08002047
			case 0:
				lcd_ShowIntNum(70, 100, "  ", 2, BLACK, BLACK, 24);
 8001c74:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <ConfigTime+0x2fc>)
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2318      	movs	r3, #24
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2302      	movs	r3, #2
 8001c86:	2164      	movs	r1, #100	@ 0x64
 8001c88:	2046      	movs	r0, #70	@ 0x46
 8001c8a:	f7ff f99f 	bl	8000fcc <lcd_ShowIntNum>
				lcd_StrCenter(0, 200, "Updating hours...", WHITE, BLACK, 16, 0);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2310      	movs	r3, #16
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c9e:	4a74      	ldr	r2, [pc, #464]	@ (8001e70 <ConfigTime+0x300>)
 8001ca0:	21c8      	movs	r1, #200	@ 0xc8
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fbf8 	bl	8001498 <lcd_StrCenter>
				if (flag_uart == 0) {
 8001ca8:	4b68      	ldr	r3, [pc, #416]	@ (8001e4c <ConfigTime+0x2dc>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <ConfigTime+0x152>
					uart_Rs232SendString("Hours");
 8001cb0:	4870      	ldr	r0, [pc, #448]	@ (8001e74 <ConfigTime+0x304>)
 8001cb2:	f001 fa2f 	bl	8003114 <uart_Rs232SendString>
					uart_Rs232SendString("\n");
 8001cb6:	4870      	ldr	r0, [pc, #448]	@ (8001e78 <ConfigTime+0x308>)
 8001cb8:	f001 fa2c 	bl	8003114 <uart_Rs232SendString>
					flag_uart = 1;
 8001cbc:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <ConfigTime+0x2dc>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
				}
				if (!isRingBufferEmpty(&buffer)) {
 8001cc2:	486e      	ldr	r0, [pc, #440]	@ (8001e7c <ConfigTime+0x30c>)
 8001cc4:	f000 ff22 	bl	8002b0c <isRingBufferEmpty>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 829d 	bne.w	800220a <ConfigTime+0x69a>
					time_out_count = 0;
 8001cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001e50 <ConfigTime+0x2e0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
					time_out_stat = 0;
 8001cd6:	4b60      	ldr	r3, [pc, #384]	@ (8001e58 <ConfigTime+0x2e8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
					flag_uart = 2;
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e4c <ConfigTime+0x2dc>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	701a      	strb	r2, [r3, #0]
					str[0] = getFromRingBuffer(&buffer);
 8001ce2:	4866      	ldr	r0, [pc, #408]	@ (8001e7c <ConfigTime+0x30c>)
 8001ce4:	f000 ff74 	bl	8002bd0 <getFromRingBuffer>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b64      	ldr	r3, [pc, #400]	@ (8001e80 <ConfigTime+0x310>)
 8001cee:	701a      	strb	r2, [r3, #0]
					str[1] = getFromRingBuffer(&buffer);
 8001cf0:	4862      	ldr	r0, [pc, #392]	@ (8001e7c <ConfigTime+0x30c>)
 8001cf2:	f000 ff6d 	bl	8002bd0 <getFromRingBuffer>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b61      	ldr	r3, [pc, #388]	@ (8001e80 <ConfigTime+0x310>)
 8001cfc:	705a      	strb	r2, [r3, #1]
					str[2] = '\0';
 8001cfe:	4b60      	ldr	r3, [pc, #384]	@ (8001e80 <ConfigTime+0x310>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	709a      	strb	r2, [r3, #2]

					temp_time[temp] = (uint8_t) atoi(str);
 8001d04:	485e      	ldr	r0, [pc, #376]	@ (8001e80 <ConfigTime+0x310>)
 8001d06:	f005 ff1b 	bl	8007b40 <atoi>
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	4b56      	ldr	r3, [pc, #344]	@ (8001e68 <ConfigTime+0x2f8>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	b2c9      	uxtb	r1, r1
 8001d14:	4b5b      	ldr	r3, [pc, #364]	@ (8001e84 <ConfigTime+0x314>)
 8001d16:	5499      	strb	r1, [r3, r2]
				}
				break;
 8001d18:	e277      	b.n	800220a <ConfigTime+0x69a>
			case 1:
				lcd_ShowIntNum(110, 100, "  ", 2, BLACK, BLACK, 24);
 8001d1a:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <ConfigTime+0x2fc>)
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	2318      	movs	r3, #24
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	2300      	movs	r3, #0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	2164      	movs	r1, #100	@ 0x64
 8001d2e:	206e      	movs	r0, #110	@ 0x6e
 8001d30:	f7ff f94c 	bl	8000fcc <lcd_ShowIntNum>
				lcd_StrCenter(0, 200, "Updating minutes...", WHITE, BLACK, 16, 0);
 8001d34:	2300      	movs	r3, #0
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	2310      	movs	r3, #16
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d44:	4a50      	ldr	r2, [pc, #320]	@ (8001e88 <ConfigTime+0x318>)
 8001d46:	21c8      	movs	r1, #200	@ 0xc8
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fba5 	bl	8001498 <lcd_StrCenter>
				if (flag_uart == 0) {
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e4c <ConfigTime+0x2dc>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d108      	bne.n	8001d68 <ConfigTime+0x1f8>
					uart_Rs232SendString("Minutes");
 8001d56:	484d      	ldr	r0, [pc, #308]	@ (8001e8c <ConfigTime+0x31c>)
 8001d58:	f001 f9dc 	bl	8003114 <uart_Rs232SendString>
					uart_Rs232SendString("\n");
 8001d5c:	4846      	ldr	r0, [pc, #280]	@ (8001e78 <ConfigTime+0x308>)
 8001d5e:	f001 f9d9 	bl	8003114 <uart_Rs232SendString>
					flag_uart = 1;
 8001d62:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <ConfigTime+0x2dc>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
				}
				if (!isRingBufferEmpty(&buffer)) {
 8001d68:	4844      	ldr	r0, [pc, #272]	@ (8001e7c <ConfigTime+0x30c>)
 8001d6a:	f000 fecf 	bl	8002b0c <isRingBufferEmpty>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 824c 	bne.w	800220e <ConfigTime+0x69e>
					str[0] = getFromRingBuffer(&buffer);
 8001d76:	4841      	ldr	r0, [pc, #260]	@ (8001e7c <ConfigTime+0x30c>)
 8001d78:	f000 ff2a 	bl	8002bd0 <getFromRingBuffer>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b3f      	ldr	r3, [pc, #252]	@ (8001e80 <ConfigTime+0x310>)
 8001d82:	701a      	strb	r2, [r3, #0]
					str[1] = getFromRingBuffer(&buffer);
 8001d84:	483d      	ldr	r0, [pc, #244]	@ (8001e7c <ConfigTime+0x30c>)
 8001d86:	f000 ff23 	bl	8002bd0 <getFromRingBuffer>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e80 <ConfigTime+0x310>)
 8001d90:	705a      	strb	r2, [r3, #1]
					str[2] = '\0';
 8001d92:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <ConfigTime+0x310>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	709a      	strb	r2, [r3, #2]

					temp_time[temp] = (uint8_t) atoi(str);
 8001d98:	4839      	ldr	r0, [pc, #228]	@ (8001e80 <ConfigTime+0x310>)
 8001d9a:	f005 fed1 	bl	8007b40 <atoi>
 8001d9e:	4601      	mov	r1, r0
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <ConfigTime+0x2f8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	b2c9      	uxtb	r1, r1
 8001da8:	4b36      	ldr	r3, [pc, #216]	@ (8001e84 <ConfigTime+0x314>)
 8001daa:	5499      	strb	r1, [r3, r2]
				}
				break;
 8001dac:	e22f      	b.n	800220e <ConfigTime+0x69e>
			case 2:
				lcd_ShowIntNum(150, 100, "  ", 2, BLACK, BLACK, 24);
 8001dae:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <ConfigTime+0x2fc>)
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	2318      	movs	r3, #24
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	2164      	movs	r1, #100	@ 0x64
 8001dc2:	2096      	movs	r0, #150	@ 0x96
 8001dc4:	f7ff f902 	bl	8000fcc <lcd_ShowIntNum>
				lcd_StrCenter(0, 200, "Updating seconds...", WHITE, BLACK, 16, 0);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	2310      	movs	r3, #16
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e90 <ConfigTime+0x320>)
 8001dda:	21c8      	movs	r1, #200	@ 0xc8
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fb5b 	bl	8001498 <lcd_StrCenter>
				if (flag_uart == 0) {
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <ConfigTime+0x2dc>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <ConfigTime+0x28c>
					uart_Rs232SendString("Seconds");
 8001dea:	482a      	ldr	r0, [pc, #168]	@ (8001e94 <ConfigTime+0x324>)
 8001dec:	f001 f992 	bl	8003114 <uart_Rs232SendString>
					uart_Rs232SendString("\n");
 8001df0:	4821      	ldr	r0, [pc, #132]	@ (8001e78 <ConfigTime+0x308>)
 8001df2:	f001 f98f 	bl	8003114 <uart_Rs232SendString>
					flag_uart = 1;
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <ConfigTime+0x2dc>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
				}
				if (!isRingBufferEmpty(&buffer)) {
 8001dfc:	481f      	ldr	r0, [pc, #124]	@ (8001e7c <ConfigTime+0x30c>)
 8001dfe:	f000 fe85 	bl	8002b0c <isRingBufferEmpty>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8204 	bne.w	8002212 <ConfigTime+0x6a2>
					str[0] = getFromRingBuffer(&buffer);
 8001e0a:	481c      	ldr	r0, [pc, #112]	@ (8001e7c <ConfigTime+0x30c>)
 8001e0c:	f000 fee0 	bl	8002bd0 <getFromRingBuffer>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <ConfigTime+0x310>)
 8001e16:	701a      	strb	r2, [r3, #0]
					str[1] = getFromRingBuffer(&buffer);
 8001e18:	4818      	ldr	r0, [pc, #96]	@ (8001e7c <ConfigTime+0x30c>)
 8001e1a:	f000 fed9 	bl	8002bd0 <getFromRingBuffer>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <ConfigTime+0x310>)
 8001e24:	705a      	strb	r2, [r3, #1]
					str[2] = '\0';
 8001e26:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <ConfigTime+0x310>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	709a      	strb	r2, [r3, #2]

					temp_time[temp] = (uint8_t) atoi(str);
 8001e2c:	4814      	ldr	r0, [pc, #80]	@ (8001e80 <ConfigTime+0x310>)
 8001e2e:	f005 fe87 	bl	8007b40 <atoi>
 8001e32:	4601      	mov	r1, r0
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <ConfigTime+0x2f8>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <ConfigTime+0x314>)
 8001e3e:	5499      	strb	r1, [r3, r2]
				}
				break;
 8001e40:	e1e7      	b.n	8002212 <ConfigTime+0x6a2>
 8001e42:	bf00      	nop
 8001e44:	20000174 	.word	0x20000174
 8001e48:	66666667 	.word	0x66666667
 8001e4c:	20000179 	.word	0x20000179
 8001e50:	2000017a 	.word	0x2000017a
 8001e54:	51eb851f 	.word	0x51eb851f
 8001e58:	2000017b 	.word	0x2000017b
 8001e5c:	20000178 	.word	0x20000178
 8001e60:	08008cbc 	.word	0x08008cbc
 8001e64:	2000017c 	.word	0x2000017c
 8001e68:	20000176 	.word	0x20000176
 8001e6c:	08008ccc 	.word	0x08008ccc
 8001e70:	08008cd0 	.word	0x08008cd0
 8001e74:	08008ce4 	.word	0x08008ce4
 8001e78:	08008cec 	.word	0x08008cec
 8001e7c:	200002b0 	.word	0x200002b0
 8001e80:	20000198 	.word	0x20000198
 8001e84:	20000180 	.word	0x20000180
 8001e88:	08008cf0 	.word	0x08008cf0
 8001e8c:	08008d04 	.word	0x08008d04
 8001e90:	08008d0c 	.word	0x08008d0c
 8001e94:	08008d20 	.word	0x08008d20
			case 3:
				lcd_ShowIntNum(20, 130, "  ", 2, BLACK, BLACK, 24);
 8001e98:	4b90      	ldr	r3, [pc, #576]	@ (80020dc <ConfigTime+0x56c>)
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	2318      	movs	r3, #24
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	2182      	movs	r1, #130	@ 0x82
 8001eac:	2014      	movs	r0, #20
 8001eae:	f7ff f88d 	bl	8000fcc <lcd_ShowIntNum>
				lcd_StrCenter(0, 200, "Updating day...", WHITE, BLACK, 16, 0);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ec2:	4a87      	ldr	r2, [pc, #540]	@ (80020e0 <ConfigTime+0x570>)
 8001ec4:	21c8      	movs	r1, #200	@ 0xc8
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff fae6 	bl	8001498 <lcd_StrCenter>
				if (flag_uart == 0) {
 8001ecc:	4b85      	ldr	r3, [pc, #532]	@ (80020e4 <ConfigTime+0x574>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d108      	bne.n	8001ee6 <ConfigTime+0x376>
					uart_Rs232SendString("\Day");
 8001ed4:	4884      	ldr	r0, [pc, #528]	@ (80020e8 <ConfigTime+0x578>)
 8001ed6:	f001 f91d 	bl	8003114 <uart_Rs232SendString>
					uart_Rs232SendString("\n");
 8001eda:	4884      	ldr	r0, [pc, #528]	@ (80020ec <ConfigTime+0x57c>)
 8001edc:	f001 f91a 	bl	8003114 <uart_Rs232SendString>
					flag_uart = 1;
 8001ee0:	4b80      	ldr	r3, [pc, #512]	@ (80020e4 <ConfigTime+0x574>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
				}
				if (!isRingBufferEmpty(&buffer)) {
 8001ee6:	4882      	ldr	r0, [pc, #520]	@ (80020f0 <ConfigTime+0x580>)
 8001ee8:	f000 fe10 	bl	8002b0c <isRingBufferEmpty>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 8191 	bne.w	8002216 <ConfigTime+0x6a6>
					str[0] = getFromRingBuffer(&buffer);
 8001ef4:	487e      	ldr	r0, [pc, #504]	@ (80020f0 <ConfigTime+0x580>)
 8001ef6:	f000 fe6b 	bl	8002bd0 <getFromRingBuffer>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b7d      	ldr	r3, [pc, #500]	@ (80020f4 <ConfigTime+0x584>)
 8001f00:	701a      	strb	r2, [r3, #0]
					str[1] = '\0';
 8001f02:	4b7c      	ldr	r3, [pc, #496]	@ (80020f4 <ConfigTime+0x584>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	705a      	strb	r2, [r3, #1]

					temp_time[temp] = (uint8_t) atoi(str);
 8001f08:	487a      	ldr	r0, [pc, #488]	@ (80020f4 <ConfigTime+0x584>)
 8001f0a:	f005 fe19 	bl	8007b40 <atoi>
 8001f0e:	4601      	mov	r1, r0
 8001f10:	4b79      	ldr	r3, [pc, #484]	@ (80020f8 <ConfigTime+0x588>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	b2c9      	uxtb	r1, r1
 8001f18:	4b78      	ldr	r3, [pc, #480]	@ (80020fc <ConfigTime+0x58c>)
 8001f1a:	5499      	strb	r1, [r3, r2]
				}
				break;
 8001f1c:	e17b      	b.n	8002216 <ConfigTime+0x6a6>
			case 4:
				lcd_ShowIntNum(70, 130, "  ", 2, BLACK, BLACK, 24);
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80020dc <ConfigTime+0x56c>)
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	2318      	movs	r3, #24
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	2182      	movs	r1, #130	@ 0x82
 8001f32:	2046      	movs	r0, #70	@ 0x46
 8001f34:	f7ff f84a 	bl	8000fcc <lcd_ShowIntNum>
				lcd_StrCenter(0, 200, "Updating date...", WHITE, BLACK, 16, 0);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9302      	str	r3, [sp, #8]
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	2300      	movs	r3, #0
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f48:	4a6d      	ldr	r2, [pc, #436]	@ (8002100 <ConfigTime+0x590>)
 8001f4a:	21c8      	movs	r1, #200	@ 0xc8
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff faa3 	bl	8001498 <lcd_StrCenter>
				if (flag_uart == 0) {
 8001f52:	4b64      	ldr	r3, [pc, #400]	@ (80020e4 <ConfigTime+0x574>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <ConfigTime+0x3fc>
					uart_Rs232SendString("\Date");
 8001f5a:	486a      	ldr	r0, [pc, #424]	@ (8002104 <ConfigTime+0x594>)
 8001f5c:	f001 f8da 	bl	8003114 <uart_Rs232SendString>
					uart_Rs232SendString("\n");
 8001f60:	4862      	ldr	r0, [pc, #392]	@ (80020ec <ConfigTime+0x57c>)
 8001f62:	f001 f8d7 	bl	8003114 <uart_Rs232SendString>
					flag_uart = 1;
 8001f66:	4b5f      	ldr	r3, [pc, #380]	@ (80020e4 <ConfigTime+0x574>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
				}
				if (!isRingBufferEmpty(&buffer)) {
 8001f6c:	4860      	ldr	r0, [pc, #384]	@ (80020f0 <ConfigTime+0x580>)
 8001f6e:	f000 fdcd 	bl	8002b0c <isRingBufferEmpty>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 8150 	bne.w	800221a <ConfigTime+0x6aa>
					str[0] = getFromRingBuffer(&buffer);
 8001f7a:	485d      	ldr	r0, [pc, #372]	@ (80020f0 <ConfigTime+0x580>)
 8001f7c:	f000 fe28 	bl	8002bd0 <getFromRingBuffer>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b5b      	ldr	r3, [pc, #364]	@ (80020f4 <ConfigTime+0x584>)
 8001f86:	701a      	strb	r2, [r3, #0]
					str[1] = getFromRingBuffer(&buffer);
 8001f88:	4859      	ldr	r0, [pc, #356]	@ (80020f0 <ConfigTime+0x580>)
 8001f8a:	f000 fe21 	bl	8002bd0 <getFromRingBuffer>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b58      	ldr	r3, [pc, #352]	@ (80020f4 <ConfigTime+0x584>)
 8001f94:	705a      	strb	r2, [r3, #1]
					str[2] = '\0';
 8001f96:	4b57      	ldr	r3, [pc, #348]	@ (80020f4 <ConfigTime+0x584>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	709a      	strb	r2, [r3, #2]

					temp_time[temp] = (uint8_t) atoi(str);
 8001f9c:	4855      	ldr	r0, [pc, #340]	@ (80020f4 <ConfigTime+0x584>)
 8001f9e:	f005 fdcf 	bl	8007b40 <atoi>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b54      	ldr	r3, [pc, #336]	@ (80020f8 <ConfigTime+0x588>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	b2c9      	uxtb	r1, r1
 8001fac:	4b53      	ldr	r3, [pc, #332]	@ (80020fc <ConfigTime+0x58c>)
 8001fae:	5499      	strb	r1, [r3, r2]
				}
				break;
 8001fb0:	e133      	b.n	800221a <ConfigTime+0x6aa>
			case 5:
				lcd_ShowIntNum(110, 130, "  ", 2, BLACK, BLACK, 24);
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <ConfigTime+0x56c>)
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	2318      	movs	r3, #24
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	2182      	movs	r1, #130	@ 0x82
 8001fc6:	206e      	movs	r0, #110	@ 0x6e
 8001fc8:	f7ff f800 	bl	8000fcc <lcd_ShowIntNum>
				lcd_StrCenter(0, 200, "Updating month...", WHITE, BLACK, 16, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002108 <ConfigTime+0x598>)
 8001fde:	21c8      	movs	r1, #200	@ 0xc8
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fa59 	bl	8001498 <lcd_StrCenter>
				if (flag_uart == 0) {
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80020e4 <ConfigTime+0x574>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <ConfigTime+0x490>
					uart_Rs232SendString("Month");
 8001fee:	4847      	ldr	r0, [pc, #284]	@ (800210c <ConfigTime+0x59c>)
 8001ff0:	f001 f890 	bl	8003114 <uart_Rs232SendString>
					uart_Rs232SendString("\n");
 8001ff4:	483d      	ldr	r0, [pc, #244]	@ (80020ec <ConfigTime+0x57c>)
 8001ff6:	f001 f88d 	bl	8003114 <uart_Rs232SendString>
					flag_uart = 1;
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80020e4 <ConfigTime+0x574>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
				}
				if (!isRingBufferEmpty(&buffer)) {
 8002000:	483b      	ldr	r0, [pc, #236]	@ (80020f0 <ConfigTime+0x580>)
 8002002:	f000 fd83 	bl	8002b0c <isRingBufferEmpty>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 8108 	bne.w	800221e <ConfigTime+0x6ae>
					str[0] = getFromRingBuffer(&buffer);
 800200e:	4838      	ldr	r0, [pc, #224]	@ (80020f0 <ConfigTime+0x580>)
 8002010:	f000 fdde 	bl	8002bd0 <getFromRingBuffer>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <ConfigTime+0x584>)
 800201a:	701a      	strb	r2, [r3, #0]
					str[1] = getFromRingBuffer(&buffer);
 800201c:	4834      	ldr	r0, [pc, #208]	@ (80020f0 <ConfigTime+0x580>)
 800201e:	f000 fdd7 	bl	8002bd0 <getFromRingBuffer>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <ConfigTime+0x584>)
 8002028:	705a      	strb	r2, [r3, #1]
					str[2] = '\0';
 800202a:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <ConfigTime+0x584>)
 800202c:	2200      	movs	r2, #0
 800202e:	709a      	strb	r2, [r3, #2]

					temp_time[temp] = (uint8_t) atoi(str);
 8002030:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <ConfigTime+0x584>)
 8002032:	f005 fd85 	bl	8007b40 <atoi>
 8002036:	4601      	mov	r1, r0
 8002038:	4b2f      	ldr	r3, [pc, #188]	@ (80020f8 <ConfigTime+0x588>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	b2c9      	uxtb	r1, r1
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <ConfigTime+0x58c>)
 8002042:	5499      	strb	r1, [r3, r2]
				}
				break;
 8002044:	e0eb      	b.n	800221e <ConfigTime+0x6ae>
			case 6:
				lcd_ShowIntNum(150, 130, "  ", 2, BLACK, BLACK, 24);
 8002046:	4b25      	ldr	r3, [pc, #148]	@ (80020dc <ConfigTime+0x56c>)
 8002048:	b29a      	uxth	r2, r3
 800204a:	2318      	movs	r3, #24
 800204c:	9302      	str	r3, [sp, #8]
 800204e:	2300      	movs	r3, #0
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	2300      	movs	r3, #0
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2302      	movs	r3, #2
 8002058:	2182      	movs	r1, #130	@ 0x82
 800205a:	2096      	movs	r0, #150	@ 0x96
 800205c:	f7fe ffb6 	bl	8000fcc <lcd_ShowIntNum>
				lcd_StrCenter(0, 200, "Updating year...", WHITE, BLACK, 16, 0);
 8002060:	2300      	movs	r3, #0
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	2310      	movs	r3, #16
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002070:	4a27      	ldr	r2, [pc, #156]	@ (8002110 <ConfigTime+0x5a0>)
 8002072:	21c8      	movs	r1, #200	@ 0xc8
 8002074:	2000      	movs	r0, #0
 8002076:	f7ff fa0f 	bl	8001498 <lcd_StrCenter>
				if (flag_uart == 0) {
 800207a:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <ConfigTime+0x574>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <ConfigTime+0x524>
					uart_Rs232SendString("Year");
 8002082:	4824      	ldr	r0, [pc, #144]	@ (8002114 <ConfigTime+0x5a4>)
 8002084:	f001 f846 	bl	8003114 <uart_Rs232SendString>
					uart_Rs232SendString("\n");
 8002088:	4818      	ldr	r0, [pc, #96]	@ (80020ec <ConfigTime+0x57c>)
 800208a:	f001 f843 	bl	8003114 <uart_Rs232SendString>
					flag_uart = 1;
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <ConfigTime+0x574>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
				}
				if (!isRingBufferEmpty(&buffer)) {
 8002094:	4816      	ldr	r0, [pc, #88]	@ (80020f0 <ConfigTime+0x580>)
 8002096:	f000 fd39 	bl	8002b0c <isRingBufferEmpty>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 80c0 	bne.w	8002222 <ConfigTime+0x6b2>
					str[0] = getFromRingBuffer(&buffer);
 80020a2:	4813      	ldr	r0, [pc, #76]	@ (80020f0 <ConfigTime+0x580>)
 80020a4:	f000 fd94 	bl	8002bd0 <getFromRingBuffer>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <ConfigTime+0x584>)
 80020ae:	701a      	strb	r2, [r3, #0]
					str[1] = getFromRingBuffer(&buffer);
 80020b0:	480f      	ldr	r0, [pc, #60]	@ (80020f0 <ConfigTime+0x580>)
 80020b2:	f000 fd8d 	bl	8002bd0 <getFromRingBuffer>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <ConfigTime+0x584>)
 80020bc:	705a      	strb	r2, [r3, #1]
					str[2] = '\0';
 80020be:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <ConfigTime+0x584>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	709a      	strb	r2, [r3, #2]

					temp_time[temp] = (uint8_t) atoi(str);
 80020c4:	480b      	ldr	r0, [pc, #44]	@ (80020f4 <ConfigTime+0x584>)
 80020c6:	f005 fd3b 	bl	8007b40 <atoi>
 80020ca:	4601      	mov	r1, r0
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <ConfigTime+0x588>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	b2c9      	uxtb	r1, r1
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <ConfigTime+0x58c>)
 80020d6:	5499      	strb	r1, [r3, r2]
				}
				break;
 80020d8:	e0a3      	b.n	8002222 <ConfigTime+0x6b2>
 80020da:	bf00      	nop
 80020dc:	08008ccc 	.word	0x08008ccc
 80020e0:	08008d28 	.word	0x08008d28
 80020e4:	20000179 	.word	0x20000179
 80020e8:	08008d38 	.word	0x08008d38
 80020ec:	08008cec 	.word	0x08008cec
 80020f0:	200002b0 	.word	0x200002b0
 80020f4:	20000198 	.word	0x20000198
 80020f8:	20000176 	.word	0x20000176
 80020fc:	20000180 	.word	0x20000180
 8002100:	08008d3c 	.word	0x08008d3c
 8002104:	08008d50 	.word	0x08008d50
 8002108:	08008d58 	.word	0x08008d58
 800210c:	08008d6c 	.word	0x08008d6c
 8002110:	08008d74 	.word	0x08008d74
 8002114:	08008d88 	.word	0x08008d88
		}
	} else {
		lcd_StrCenter(0, 50, Mode(), YELLOW, BLACK, 24, 0);
 8002118:	f7ff fb52 	bl	80017c0 <Mode>
 800211c:	4602      	mov	r2, r0
 800211e:	2300      	movs	r3, #0
 8002120:	9302      	str	r3, [sp, #8]
 8002122:	2318      	movs	r3, #24
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800212e:	2132      	movs	r1, #50	@ 0x32
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff f9b1 	bl	8001498 <lcd_StrCenter>
		lcd_ShowIntNum(70, 100, temp_time[0], 2, WHITE, BLACK, 24);
 8002136:	4bac      	ldr	r3, [pc, #688]	@ (80023e8 <ConfigTime+0x878>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	2318      	movs	r3, #24
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2302      	movs	r3, #2
 800214c:	2164      	movs	r1, #100	@ 0x64
 800214e:	2046      	movs	r0, #70	@ 0x46
 8002150:	f7fe ff3c 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, temp_time[1], 2, WHITE, BLACK, 24);
 8002154:	4ba4      	ldr	r3, [pc, #656]	@ (80023e8 <ConfigTime+0x878>)
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	461a      	mov	r2, r3
 800215a:	2318      	movs	r3, #24
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2300      	movs	r3, #0
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2302      	movs	r3, #2
 800216a:	2164      	movs	r1, #100	@ 0x64
 800216c:	206e      	movs	r0, #110	@ 0x6e
 800216e:	f7fe ff2d 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, temp_time[2], 2, WHITE, BLACK, 24);
 8002172:	4b9d      	ldr	r3, [pc, #628]	@ (80023e8 <ConfigTime+0x878>)
 8002174:	789b      	ldrb	r3, [r3, #2]
 8002176:	461a      	mov	r2, r3
 8002178:	2318      	movs	r3, #24
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2300      	movs	r3, #0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2302      	movs	r3, #2
 8002188:	2164      	movs	r1, #100	@ 0x64
 800218a:	2096      	movs	r0, #150	@ 0x96
 800218c:	f7fe ff1e 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, temp_time[3], 2, GREEN, BLACK, 24);
 8002190:	4b95      	ldr	r3, [pc, #596]	@ (80023e8 <ConfigTime+0x878>)
 8002192:	78db      	ldrb	r3, [r3, #3]
 8002194:	461a      	mov	r2, r3
 8002196:	2318      	movs	r3, #24
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	2300      	movs	r3, #0
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2302      	movs	r3, #2
 80021a6:	2182      	movs	r1, #130	@ 0x82
 80021a8:	2014      	movs	r0, #20
 80021aa:	f7fe ff0f 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, temp_time[4], 2, GREEN, BLACK, 24);
 80021ae:	4b8e      	ldr	r3, [pc, #568]	@ (80023e8 <ConfigTime+0x878>)
 80021b0:	791b      	ldrb	r3, [r3, #4]
 80021b2:	461a      	mov	r2, r3
 80021b4:	2318      	movs	r3, #24
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2302      	movs	r3, #2
 80021c4:	2182      	movs	r1, #130	@ 0x82
 80021c6:	2046      	movs	r0, #70	@ 0x46
 80021c8:	f7fe ff00 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, temp_time[5], 2, GREEN, BLACK, 24);
 80021cc:	4b86      	ldr	r3, [pc, #536]	@ (80023e8 <ConfigTime+0x878>)
 80021ce:	795b      	ldrb	r3, [r3, #5]
 80021d0:	461a      	mov	r2, r3
 80021d2:	2318      	movs	r3, #24
 80021d4:	9302      	str	r3, [sp, #8]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2302      	movs	r3, #2
 80021e2:	2182      	movs	r1, #130	@ 0x82
 80021e4:	206e      	movs	r0, #110	@ 0x6e
 80021e6:	f7fe fef1 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, temp_time[6], 2, GREEN, BLACK, 24);
 80021ea:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <ConfigTime+0x878>)
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	461a      	mov	r2, r3
 80021f0:	2318      	movs	r3, #24
 80021f2:	9302      	str	r3, [sp, #8]
 80021f4:	2300      	movs	r3, #0
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2302      	movs	r3, #2
 8002200:	2182      	movs	r1, #130	@ 0x82
 8002202:	2096      	movs	r0, #150	@ 0x96
 8002204:	f7fe fee2 	bl	8000fcc <lcd_ShowIntNum>
 8002208:	e00c      	b.n	8002224 <ConfigTime+0x6b4>
				break;
 800220a:	bf00      	nop
 800220c:	e00a      	b.n	8002224 <ConfigTime+0x6b4>
				break;
 800220e:	bf00      	nop
 8002210:	e008      	b.n	8002224 <ConfigTime+0x6b4>
				break;
 8002212:	bf00      	nop
 8002214:	e006      	b.n	8002224 <ConfigTime+0x6b4>
				break;
 8002216:	bf00      	nop
 8002218:	e004      	b.n	8002224 <ConfigTime+0x6b4>
				break;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <ConfigTime+0x6b4>
				break;
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <ConfigTime+0x6b4>
				break;
 8002222:	bf00      	nop
	}




	if (button_count[3] == 1) {
 8002224:	4b71      	ldr	r3, [pc, #452]	@ (80023ec <ConfigTime+0x87c>)
 8002226:	88db      	ldrh	r3, [r3, #6]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d109      	bne.n	8002240 <ConfigTime+0x6d0>
		temp_time[temp]++;
 800222c:	4b70      	ldr	r3, [pc, #448]	@ (80023f0 <ConfigTime+0x880>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4a6d      	ldr	r2, [pc, #436]	@ (80023e8 <ConfigTime+0x878>)
 8002232:	5cd2      	ldrb	r2, [r2, r3]
 8002234:	3201      	adds	r2, #1
 8002236:	b2d1      	uxtb	r1, r2
 8002238:	4a6b      	ldr	r2, [pc, #428]	@ (80023e8 <ConfigTime+0x878>)
 800223a:	54d1      	strb	r1, [r2, r3]
		checkTime();
 800223c:	f7ff faec 	bl	8001818 <checkTime>
	}

	if (button_count[3] > 40 && button_count[3] % 4 == 1) {
 8002240:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <ConfigTime+0x87c>)
 8002242:	88db      	ldrh	r3, [r3, #6]
 8002244:	2b28      	cmp	r3, #40	@ 0x28
 8002246:	d910      	bls.n	800226a <ConfigTime+0x6fa>
 8002248:	4b68      	ldr	r3, [pc, #416]	@ (80023ec <ConfigTime+0x87c>)
 800224a:	88db      	ldrh	r3, [r3, #6]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d109      	bne.n	800226a <ConfigTime+0x6fa>
		temp_time[temp]++;
 8002256:	4b66      	ldr	r3, [pc, #408]	@ (80023f0 <ConfigTime+0x880>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4a63      	ldr	r2, [pc, #396]	@ (80023e8 <ConfigTime+0x878>)
 800225c:	5cd2      	ldrb	r2, [r2, r3]
 800225e:	3201      	adds	r2, #1
 8002260:	b2d1      	uxtb	r1, r2
 8002262:	4a61      	ldr	r2, [pc, #388]	@ (80023e8 <ConfigTime+0x878>)
 8002264:	54d1      	strb	r1, [r2, r3]
		checkTime();
 8002266:	f7ff fad7 	bl	8001818 <checkTime>
	}

	if (button_count[12] == 1) {
 800226a:	4b60      	ldr	r3, [pc, #384]	@ (80023ec <ConfigTime+0x87c>)
 800226c:	8b1b      	ldrh	r3, [r3, #24]
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 80b6 	bne.w	80023e0 <ConfigTime+0x870>
		switch (temp){
 8002274:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <ConfigTime+0x880>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b06      	cmp	r3, #6
 800227a:	f200 80a4 	bhi.w	80023c6 <ConfigTime+0x856>
 800227e:	a201      	add	r2, pc, #4	@ (adr r2, 8002284 <ConfigTime+0x714>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	080022a1 	.word	0x080022a1
 8002288:	080022cb 	.word	0x080022cb
 800228c:	080022f5 	.word	0x080022f5
 8002290:	0800231f 	.word	0x0800231f
 8002294:	08002349 	.word	0x08002349
 8002298:	08002373 	.word	0x08002373
 800229c:	0800239d 	.word	0x0800239d
			case 0:
				ds3231_Write(ADDRESS_HOUR, temp_time[temp]);
 80022a0:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <ConfigTime+0x880>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b50      	ldr	r3, [pc, #320]	@ (80023e8 <ConfigTime+0x878>)
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	4619      	mov	r1, r3
 80022ac:	2002      	movs	r0, #2
 80022ae:	f7fe f9d7 	bl	8000660 <ds3231_Write>
				lcd_Fill(0, 200, 240, 250, BLACK);
 80022b2:	2300      	movs	r3, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	23fa      	movs	r3, #250	@ 0xfa
 80022b8:	22f0      	movs	r2, #240	@ 0xf0
 80022ba:	21c8      	movs	r1, #200	@ 0xc8
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fd4b 	bl	8000d58 <lcd_Fill>
				flag_uart = 0;
 80022c2:	4b4c      	ldr	r3, [pc, #304]	@ (80023f4 <ConfigTime+0x884>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
				break;
 80022c8:	e07d      	b.n	80023c6 <ConfigTime+0x856>
			case 1:
				ds3231_Write(ADDRESS_MIN, temp_time[temp]);
 80022ca:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <ConfigTime+0x880>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b45      	ldr	r3, [pc, #276]	@ (80023e8 <ConfigTime+0x878>)
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	4619      	mov	r1, r3
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7fe f9c2 	bl	8000660 <ds3231_Write>
				lcd_Fill(0, 200, 240, 250, BLACK);
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	23fa      	movs	r3, #250	@ 0xfa
 80022e2:	22f0      	movs	r2, #240	@ 0xf0
 80022e4:	21c8      	movs	r1, #200	@ 0xc8
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7fe fd36 	bl	8000d58 <lcd_Fill>
				flag_uart = 0;
 80022ec:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <ConfigTime+0x884>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
				break;
 80022f2:	e068      	b.n	80023c6 <ConfigTime+0x856>
			case 2:
				ds3231_Write(ADDRESS_SEC, temp_time[temp]);
 80022f4:	4b3e      	ldr	r3, [pc, #248]	@ (80023f0 <ConfigTime+0x880>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b3b      	ldr	r3, [pc, #236]	@ (80023e8 <ConfigTime+0x878>)
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	4619      	mov	r1, r3
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe f9ad 	bl	8000660 <ds3231_Write>
				lcd_Fill(0, 200, 240, 250, BLACK);
 8002306:	2300      	movs	r3, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	23fa      	movs	r3, #250	@ 0xfa
 800230c:	22f0      	movs	r2, #240	@ 0xf0
 800230e:	21c8      	movs	r1, #200	@ 0xc8
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fd21 	bl	8000d58 <lcd_Fill>
				flag_uart = 0;
 8002316:	4b37      	ldr	r3, [pc, #220]	@ (80023f4 <ConfigTime+0x884>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
				break;
 800231c:	e053      	b.n	80023c6 <ConfigTime+0x856>
			case 3:
				ds3231_Write(ADDRESS_DAY, temp_time[temp]);
 800231e:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <ConfigTime+0x880>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b30      	ldr	r3, [pc, #192]	@ (80023e8 <ConfigTime+0x878>)
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	4619      	mov	r1, r3
 800232a:	2003      	movs	r0, #3
 800232c:	f7fe f998 	bl	8000660 <ds3231_Write>
				lcd_Fill(0, 200, 240, 250, BLACK);
 8002330:	2300      	movs	r3, #0
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	23fa      	movs	r3, #250	@ 0xfa
 8002336:	22f0      	movs	r2, #240	@ 0xf0
 8002338:	21c8      	movs	r1, #200	@ 0xc8
 800233a:	2000      	movs	r0, #0
 800233c:	f7fe fd0c 	bl	8000d58 <lcd_Fill>
				flag_uart = 0;
 8002340:	4b2c      	ldr	r3, [pc, #176]	@ (80023f4 <ConfigTime+0x884>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
				break;
 8002346:	e03e      	b.n	80023c6 <ConfigTime+0x856>
			case 4:
				ds3231_Write(ADDRESS_DATE, temp_time[temp]);
 8002348:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <ConfigTime+0x880>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <ConfigTime+0x878>)
 8002350:	5c9b      	ldrb	r3, [r3, r2]
 8002352:	4619      	mov	r1, r3
 8002354:	2004      	movs	r0, #4
 8002356:	f7fe f983 	bl	8000660 <ds3231_Write>
				lcd_Fill(0, 200, 240, 250, BLACK);
 800235a:	2300      	movs	r3, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	23fa      	movs	r3, #250	@ 0xfa
 8002360:	22f0      	movs	r2, #240	@ 0xf0
 8002362:	21c8      	movs	r1, #200	@ 0xc8
 8002364:	2000      	movs	r0, #0
 8002366:	f7fe fcf7 	bl	8000d58 <lcd_Fill>
				flag_uart = 0;
 800236a:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <ConfigTime+0x884>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
				break;
 8002370:	e029      	b.n	80023c6 <ConfigTime+0x856>
			case 5:
				ds3231_Write(ADDRESS_MONTH, temp_time[temp]);
 8002372:	4b1f      	ldr	r3, [pc, #124]	@ (80023f0 <ConfigTime+0x880>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <ConfigTime+0x878>)
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	4619      	mov	r1, r3
 800237e:	2005      	movs	r0, #5
 8002380:	f7fe f96e 	bl	8000660 <ds3231_Write>
				lcd_Fill(0, 200, 240, 250, BLACK);
 8002384:	2300      	movs	r3, #0
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	23fa      	movs	r3, #250	@ 0xfa
 800238a:	22f0      	movs	r2, #240	@ 0xf0
 800238c:	21c8      	movs	r1, #200	@ 0xc8
 800238e:	2000      	movs	r0, #0
 8002390:	f7fe fce2 	bl	8000d58 <lcd_Fill>
				flag_uart = 0;
 8002394:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <ConfigTime+0x884>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
				break;
 800239a:	e014      	b.n	80023c6 <ConfigTime+0x856>
			case 6:
				ds3231_Write(ADDRESS_YEAR, temp_time[temp]);
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <ConfigTime+0x880>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <ConfigTime+0x878>)
 80023a4:	5c9b      	ldrb	r3, [r3, r2]
 80023a6:	4619      	mov	r1, r3
 80023a8:	2006      	movs	r0, #6
 80023aa:	f7fe f959 	bl	8000660 <ds3231_Write>
				lcd_Fill(0, 200, 240, 250, BLACK);
 80023ae:	2300      	movs	r3, #0
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	23fa      	movs	r3, #250	@ 0xfa
 80023b4:	22f0      	movs	r2, #240	@ 0xf0
 80023b6:	21c8      	movs	r1, #200	@ 0xc8
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fe fccd 	bl	8000d58 <lcd_Fill>
				flag_uart = 0;
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <ConfigTime+0x884>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
				break;
 80023c4:	bf00      	nop
		}
		temp++;
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <ConfigTime+0x880>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <ConfigTime+0x880>)
 80023d0:	701a      	strb	r2, [r3, #0]
		if (temp > 6) {
 80023d2:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <ConfigTime+0x880>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <ConfigTime+0x870>
			temp = 0;
 80023da:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <ConfigTime+0x880>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000180 	.word	0x20000180
 80023ec:	2000008c 	.word	0x2000008c
 80023f0:	20000176 	.word	0x20000176
 80023f4:	20000179 	.word	0x20000179

080023f8 <ConfigTimer>:

void ConfigTimer() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af04      	add	r7, sp, #16
	count_timer = (count_timer + 1) % 10;
 80023fe:	4bb1      	ldr	r3, [pc, #708]	@ (80026c4 <ConfigTimer+0x2cc>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	4bb0      	ldr	r3, [pc, #704]	@ (80026c8 <ConfigTimer+0x2d0>)
 8002406:	fb83 1302 	smull	r1, r3, r3, r2
 800240a:	1099      	asrs	r1, r3, #2
 800240c:	17d3      	asrs	r3, r2, #31
 800240e:	1ac9      	subs	r1, r1, r3
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	1ad1      	subs	r1, r2, r3
 800241a:	b2ca      	uxtb	r2, r1
 800241c:	4ba9      	ldr	r3, [pc, #676]	@ (80026c4 <ConfigTimer+0x2cc>)
 800241e:	701a      	strb	r2, [r3, #0]
	if (count_timer > 5) {
 8002420:	4ba8      	ldr	r3, [pc, #672]	@ (80026c4 <ConfigTimer+0x2cc>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d977      	bls.n	8002518 <ConfigTimer+0x120>
		switch (temp_timer){
 8002428:	4ba8      	ldr	r3, [pc, #672]	@ (80026cc <ConfigTimer+0x2d4>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b06      	cmp	r3, #6
 800242e:	f200 80eb 	bhi.w	8002608 <ConfigTimer+0x210>
 8002432:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <ConfigTimer+0x40>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	08002455 	.word	0x08002455
 800243c:	08002471 	.word	0x08002471
 8002440:	0800248d 	.word	0x0800248d
 8002444:	080024a9 	.word	0x080024a9
 8002448:	080024c5 	.word	0x080024c5
 800244c:	080024e1 	.word	0x080024e1
 8002450:	080024fd 	.word	0x080024fd
			case 0:
				lcd_ShowIntNum(70, 100, "  ", 2, BLACK, BLACK, 24);
 8002454:	4b9e      	ldr	r3, [pc, #632]	@ (80026d0 <ConfigTimer+0x2d8>)
 8002456:	b29a      	uxth	r2, r3
 8002458:	2318      	movs	r3, #24
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2302      	movs	r3, #2
 8002466:	2164      	movs	r1, #100	@ 0x64
 8002468:	2046      	movs	r0, #70	@ 0x46
 800246a:	f7fe fdaf 	bl	8000fcc <lcd_ShowIntNum>
				break;
 800246e:	e0cb      	b.n	8002608 <ConfigTimer+0x210>
			case 1:
				lcd_ShowIntNum(110, 100, "  ", 2, BLACK, BLACK, 24);
 8002470:	4b97      	ldr	r3, [pc, #604]	@ (80026d0 <ConfigTimer+0x2d8>)
 8002472:	b29a      	uxth	r2, r3
 8002474:	2318      	movs	r3, #24
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2300      	movs	r3, #0
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2302      	movs	r3, #2
 8002482:	2164      	movs	r1, #100	@ 0x64
 8002484:	206e      	movs	r0, #110	@ 0x6e
 8002486:	f7fe fda1 	bl	8000fcc <lcd_ShowIntNum>
				break;
 800248a:	e0bd      	b.n	8002608 <ConfigTimer+0x210>
			case 2:
				lcd_ShowIntNum(150, 100, "  ", 2, BLACK, BLACK, 24);
 800248c:	4b90      	ldr	r3, [pc, #576]	@ (80026d0 <ConfigTimer+0x2d8>)
 800248e:	b29a      	uxth	r2, r3
 8002490:	2318      	movs	r3, #24
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2300      	movs	r3, #0
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2302      	movs	r3, #2
 800249e:	2164      	movs	r1, #100	@ 0x64
 80024a0:	2096      	movs	r0, #150	@ 0x96
 80024a2:	f7fe fd93 	bl	8000fcc <lcd_ShowIntNum>
				break;
 80024a6:	e0af      	b.n	8002608 <ConfigTimer+0x210>
			case 3:
				lcd_ShowIntNum(20, 130, "  ", 2, BLACK, BLACK, 24);
 80024a8:	4b89      	ldr	r3, [pc, #548]	@ (80026d0 <ConfigTimer+0x2d8>)
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	2318      	movs	r3, #24
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2302      	movs	r3, #2
 80024ba:	2182      	movs	r1, #130	@ 0x82
 80024bc:	2014      	movs	r0, #20
 80024be:	f7fe fd85 	bl	8000fcc <lcd_ShowIntNum>
				break;
 80024c2:	e0a1      	b.n	8002608 <ConfigTimer+0x210>
			case 4:
				lcd_ShowIntNum(70, 130, "  ", 2, BLACK, BLACK, 24);
 80024c4:	4b82      	ldr	r3, [pc, #520]	@ (80026d0 <ConfigTimer+0x2d8>)
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2318      	movs	r3, #24
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	2300      	movs	r3, #0
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2302      	movs	r3, #2
 80024d6:	2182      	movs	r1, #130	@ 0x82
 80024d8:	2046      	movs	r0, #70	@ 0x46
 80024da:	f7fe fd77 	bl	8000fcc <lcd_ShowIntNum>
				break;
 80024de:	e093      	b.n	8002608 <ConfigTimer+0x210>
			case 5:
				lcd_ShowIntNum(110, 130, "  ", 2, BLACK, BLACK, 24);
 80024e0:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <ConfigTimer+0x2d8>)
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	2318      	movs	r3, #24
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2302      	movs	r3, #2
 80024f2:	2182      	movs	r1, #130	@ 0x82
 80024f4:	206e      	movs	r0, #110	@ 0x6e
 80024f6:	f7fe fd69 	bl	8000fcc <lcd_ShowIntNum>
				break;
 80024fa:	e085      	b.n	8002608 <ConfigTimer+0x210>
			case 6:
				lcd_ShowIntNum(150, 130, "  ", 2, BLACK, BLACK, 24);
 80024fc:	4b74      	ldr	r3, [pc, #464]	@ (80026d0 <ConfigTimer+0x2d8>)
 80024fe:	b29a      	uxth	r2, r3
 8002500:	2318      	movs	r3, #24
 8002502:	9302      	str	r3, [sp, #8]
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2302      	movs	r3, #2
 800250e:	2182      	movs	r1, #130	@ 0x82
 8002510:	2096      	movs	r0, #150	@ 0x96
 8002512:	f7fe fd5b 	bl	8000fcc <lcd_ShowIntNum>
				break;
 8002516:	e077      	b.n	8002608 <ConfigTimer+0x210>
		}
	} else {
		lcd_StrCenter(0, 50, Mode(), YELLOW, BLACK, 24, 0);
 8002518:	f7ff f952 	bl	80017c0 <Mode>
 800251c:	4602      	mov	r2, r0
 800251e:	2300      	movs	r3, #0
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	2318      	movs	r3, #24
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	2300      	movs	r3, #0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800252e:	2132      	movs	r1, #50	@ 0x32
 8002530:	2000      	movs	r0, #0
 8002532:	f7fe ffb1 	bl	8001498 <lcd_StrCenter>
		lcd_ShowIntNum(70, 100, timer[0], 2, WHITE, BLACK, 24);
 8002536:	4b67      	ldr	r3, [pc, #412]	@ (80026d4 <ConfigTimer+0x2dc>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	2318      	movs	r3, #24
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2302      	movs	r3, #2
 800254c:	2164      	movs	r1, #100	@ 0x64
 800254e:	2046      	movs	r0, #70	@ 0x46
 8002550:	f7fe fd3c 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, timer[1], 2, WHITE, BLACK, 24);
 8002554:	4b5f      	ldr	r3, [pc, #380]	@ (80026d4 <ConfigTimer+0x2dc>)
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	461a      	mov	r2, r3
 800255a:	2318      	movs	r3, #24
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	2300      	movs	r3, #0
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2302      	movs	r3, #2
 800256a:	2164      	movs	r1, #100	@ 0x64
 800256c:	206e      	movs	r0, #110	@ 0x6e
 800256e:	f7fe fd2d 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, timer[2], 2, WHITE, BLACK, 24);
 8002572:	4b58      	ldr	r3, [pc, #352]	@ (80026d4 <ConfigTimer+0x2dc>)
 8002574:	789b      	ldrb	r3, [r3, #2]
 8002576:	461a      	mov	r2, r3
 8002578:	2318      	movs	r3, #24
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	2300      	movs	r3, #0
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2302      	movs	r3, #2
 8002588:	2164      	movs	r1, #100	@ 0x64
 800258a:	2096      	movs	r0, #150	@ 0x96
 800258c:	f7fe fd1e 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, timer[3], 2, GREEN, BLACK, 24);
 8002590:	4b50      	ldr	r3, [pc, #320]	@ (80026d4 <ConfigTimer+0x2dc>)
 8002592:	78db      	ldrb	r3, [r3, #3]
 8002594:	461a      	mov	r2, r3
 8002596:	2318      	movs	r3, #24
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	2300      	movs	r3, #0
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2302      	movs	r3, #2
 80025a6:	2182      	movs	r1, #130	@ 0x82
 80025a8:	2014      	movs	r0, #20
 80025aa:	f7fe fd0f 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, timer[4], 2, GREEN, BLACK, 24);
 80025ae:	4b49      	ldr	r3, [pc, #292]	@ (80026d4 <ConfigTimer+0x2dc>)
 80025b0:	791b      	ldrb	r3, [r3, #4]
 80025b2:	461a      	mov	r2, r3
 80025b4:	2318      	movs	r3, #24
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	2300      	movs	r3, #0
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2302      	movs	r3, #2
 80025c4:	2182      	movs	r1, #130	@ 0x82
 80025c6:	2046      	movs	r0, #70	@ 0x46
 80025c8:	f7fe fd00 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130,timer[5], 2, GREEN, BLACK, 24);
 80025cc:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <ConfigTimer+0x2dc>)
 80025ce:	795b      	ldrb	r3, [r3, #5]
 80025d0:	461a      	mov	r2, r3
 80025d2:	2318      	movs	r3, #24
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2302      	movs	r3, #2
 80025e2:	2182      	movs	r1, #130	@ 0x82
 80025e4:	206e      	movs	r0, #110	@ 0x6e
 80025e6:	f7fe fcf1 	bl	8000fcc <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, timer[6], 2, GREEN, BLACK, 24);
 80025ea:	4b3a      	ldr	r3, [pc, #232]	@ (80026d4 <ConfigTimer+0x2dc>)
 80025ec:	799b      	ldrb	r3, [r3, #6]
 80025ee:	461a      	mov	r2, r3
 80025f0:	2318      	movs	r3, #24
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	2300      	movs	r3, #0
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2302      	movs	r3, #2
 8002600:	2182      	movs	r1, #130	@ 0x82
 8002602:	2096      	movs	r0, #150	@ 0x96
 8002604:	f7fe fce2 	bl	8000fcc <lcd_ShowIntNum>
	}



	if (button_count[3] == 1) {
 8002608:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <ConfigTimer+0x2e0>)
 800260a:	88db      	ldrh	r3, [r3, #6]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d109      	bne.n	8002624 <ConfigTimer+0x22c>
		timer[temp_timer]++;
 8002610:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <ConfigTimer+0x2d4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4a2f      	ldr	r2, [pc, #188]	@ (80026d4 <ConfigTimer+0x2dc>)
 8002616:	5cd2      	ldrb	r2, [r2, r3]
 8002618:	3201      	adds	r2, #1
 800261a:	b2d1      	uxtb	r1, r2
 800261c:	4a2d      	ldr	r2, [pc, #180]	@ (80026d4 <ConfigTimer+0x2dc>)
 800261e:	54d1      	strb	r1, [r2, r3]
		checkTimer();
 8002620:	f7ff f98a 	bl	8001938 <checkTimer>
	}

	if (button_count[3] > 40 && button_count[3] % 4 == 1) {
 8002624:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <ConfigTimer+0x2e0>)
 8002626:	88db      	ldrh	r3, [r3, #6]
 8002628:	2b28      	cmp	r3, #40	@ 0x28
 800262a:	d910      	bls.n	800264e <ConfigTimer+0x256>
 800262c:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <ConfigTimer+0x2e0>)
 800262e:	88db      	ldrh	r3, [r3, #6]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d109      	bne.n	800264e <ConfigTimer+0x256>
		timer[temp_timer]++;
 800263a:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <ConfigTimer+0x2d4>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <ConfigTimer+0x2dc>)
 8002640:	5cd2      	ldrb	r2, [r2, r3]
 8002642:	3201      	adds	r2, #1
 8002644:	b2d1      	uxtb	r1, r2
 8002646:	4a23      	ldr	r2, [pc, #140]	@ (80026d4 <ConfigTimer+0x2dc>)
 8002648:	54d1      	strb	r1, [r2, r3]
		checkTimer();
 800264a:	f7ff f975 	bl	8001938 <checkTimer>
	}

	if (button_count[12] == 1) {
 800264e:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <ConfigTimer+0x2e0>)
 8002650:	8b1b      	ldrh	r3, [r3, #24]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d17d      	bne.n	8002752 <ConfigTimer+0x35a>
		switch (temp_timer){
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <ConfigTimer+0x2d4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d86c      	bhi.n	8002738 <ConfigTimer+0x340>
 800265e:	a201      	add	r2, pc, #4	@ (adr r2, 8002664 <ConfigTimer+0x26c>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002681 	.word	0x08002681
 8002668:	08002697 	.word	0x08002697
 800266c:	080026ad 	.word	0x080026ad
 8002670:	080026e1 	.word	0x080026e1
 8002674:	080026f7 	.word	0x080026f7
 8002678:	0800270d 	.word	0x0800270d
 800267c:	08002723 	.word	0x08002723
			case 0:
				timerPresent[temp_timer] = timer[temp_timer];
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <ConfigTimer+0x2d4>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <ConfigTimer+0x2d4>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <ConfigTimer+0x2dc>)
 800268e:	5c59      	ldrb	r1, [r3, r1]
 8002690:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <ConfigTimer+0x2e4>)
 8002692:	5499      	strb	r1, [r3, r2]
				break;
 8002694:	e050      	b.n	8002738 <ConfigTimer+0x340>
			case 1:
				timerPresent[temp_timer] = timer[temp_timer];
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <ConfigTimer+0x2d4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <ConfigTimer+0x2d4>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <ConfigTimer+0x2dc>)
 80026a4:	5c59      	ldrb	r1, [r3, r1]
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <ConfigTimer+0x2e4>)
 80026a8:	5499      	strb	r1, [r3, r2]
				break;
 80026aa:	e045      	b.n	8002738 <ConfigTimer+0x340>
			case 2:
				timerPresent[temp_timer] = timer[temp_timer];
 80026ac:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <ConfigTimer+0x2d4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <ConfigTimer+0x2d4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <ConfigTimer+0x2dc>)
 80026ba:	5c59      	ldrb	r1, [r3, r1]
 80026bc:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <ConfigTimer+0x2e4>)
 80026be:	5499      	strb	r1, [r3, r2]
				break;
 80026c0:	e03a      	b.n	8002738 <ConfigTimer+0x340>
 80026c2:	bf00      	nop
 80026c4:	20000175 	.word	0x20000175
 80026c8:	66666667 	.word	0x66666667
 80026cc:	20000177 	.word	0x20000177
 80026d0:	08008ccc 	.word	0x08008ccc
 80026d4:	20000188 	.word	0x20000188
 80026d8:	2000008c 	.word	0x2000008c
 80026dc:	20000190 	.word	0x20000190
			case 3:
				timerPresent[temp_timer] = timer[temp_timer];
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <ConfigTimer+0x360>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002758 <ConfigTimer+0x360>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <ConfigTimer+0x364>)
 80026ee:	5c59      	ldrb	r1, [r3, r1]
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <ConfigTimer+0x368>)
 80026f2:	5499      	strb	r1, [r3, r2]
				break;
 80026f4:	e020      	b.n	8002738 <ConfigTimer+0x340>
			case 4:
				timerPresent[temp_timer] = timer[temp_timer];
 80026f6:	4b18      	ldr	r3, [pc, #96]	@ (8002758 <ConfigTimer+0x360>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4b16      	ldr	r3, [pc, #88]	@ (8002758 <ConfigTimer+0x360>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b16      	ldr	r3, [pc, #88]	@ (800275c <ConfigTimer+0x364>)
 8002704:	5c59      	ldrb	r1, [r3, r1]
 8002706:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <ConfigTimer+0x368>)
 8002708:	5499      	strb	r1, [r3, r2]
				break;
 800270a:	e015      	b.n	8002738 <ConfigTimer+0x340>
			case 5:
				timerPresent[temp_timer] = timer[temp_timer];
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <ConfigTimer+0x360>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <ConfigTimer+0x360>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	4b10      	ldr	r3, [pc, #64]	@ (800275c <ConfigTimer+0x364>)
 800271a:	5c59      	ldrb	r1, [r3, r1]
 800271c:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <ConfigTimer+0x368>)
 800271e:	5499      	strb	r1, [r3, r2]
				break;
 8002720:	e00a      	b.n	8002738 <ConfigTimer+0x340>
			case 6:
				timerPresent[temp_timer] = timer[temp_timer];
 8002722:	4b0d      	ldr	r3, [pc, #52]	@ (8002758 <ConfigTimer+0x360>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <ConfigTimer+0x360>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <ConfigTimer+0x364>)
 8002730:	5c59      	ldrb	r1, [r3, r1]
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <ConfigTimer+0x368>)
 8002734:	5499      	strb	r1, [r3, r2]
				break;
 8002736:	bf00      	nop
		}
		temp_timer++;
 8002738:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <ConfigTimer+0x360>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <ConfigTimer+0x360>)
 8002742:	701a      	strb	r2, [r3, #0]
		if (temp_timer> 6) {
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <ConfigTimer+0x360>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b06      	cmp	r3, #6
 800274a:	d902      	bls.n	8002752 <ConfigTimer+0x35a>
			temp_timer = 0;
 800274c:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <ConfigTimer+0x360>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000177 	.word	0x20000177
 800275c:	20000188 	.word	0x20000188
 8002760:	20000190 	.word	0x20000190

08002764 <fsm>:

void fsm() {
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af04      	add	r7, sp, #16
	switch (currentMode) {
 800276a:	4ba9      	ldr	r3, [pc, #676]	@ (8002a10 <fsm+0x2ac>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b03      	cmp	r3, #3
 8002770:	f200 81a8 	bhi.w	8002ac4 <fsm+0x360>
 8002774:	a201      	add	r2, pc, #4	@ (adr r2, 800277c <fsm+0x18>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	0800278d 	.word	0x0800278d
 8002780:	08002795 	.word	0x08002795
 8002784:	08002861 	.word	0x08002861
 8002788:	08002969 	.word	0x08002969
		case modeInit:
			currentMode = modeNormal;
 800278c:	4ba0      	ldr	r3, [pc, #640]	@ (8002a10 <fsm+0x2ac>)
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
			break;
 8002792:	e197      	b.n	8002ac4 <fsm+0x360>
		case modeNormal:
			temp = 0;
 8002794:	4b9f      	ldr	r3, [pc, #636]	@ (8002a14 <fsm+0x2b0>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
			temp_timer = 0;
 800279a:	4b9f      	ldr	r3, [pc, #636]	@ (8002a18 <fsm+0x2b4>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++) {
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00c      	b.n	80027c0 <fsm+0x5c>
				temp_time[i] = 0;
 80027a6:	4a9d      	ldr	r2, [pc, #628]	@ (8002a1c <fsm+0x2b8>)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
				timer[i] = 0;
 80027b0:	4a9b      	ldr	r2, [pc, #620]	@ (8002a20 <fsm+0x2bc>)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++) {
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	ddef      	ble.n	80027a6 <fsm+0x42>
			}
			displayTime();
 80027c6:	f7ff f947 	bl	8001a58 <displayTime>

			if (ds3231_hours == timerPresent[0] && ds3231_min == timerPresent[1]) {
 80027ca:	4b96      	ldr	r3, [pc, #600]	@ (8002a24 <fsm+0x2c0>)
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	4b96      	ldr	r3, [pc, #600]	@ (8002a28 <fsm+0x2c4>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d11e      	bne.n	8002814 <fsm+0xb0>
 80027d6:	4b93      	ldr	r3, [pc, #588]	@ (8002a24 <fsm+0x2c0>)
 80027d8:	785a      	ldrb	r2, [r3, #1]
 80027da:	4b94      	ldr	r3, [pc, #592]	@ (8002a2c <fsm+0x2c8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d118      	bne.n	8002814 <fsm+0xb0>
				lcd_Fill(0, 200, 240, 300, RED);
 80027e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80027ec:	22f0      	movs	r2, #240	@ 0xf0
 80027ee:	21c8      	movs	r1, #200	@ 0xc8
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe fab1 	bl	8000d58 <lcd_Fill>
				lcd_StrCenter(0, 240, "It's this time!", YELLOW, RED, 16, 0);
 80027f6:	2300      	movs	r3, #0
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	2310      	movs	r3, #16
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002808:	4a89      	ldr	r2, [pc, #548]	@ (8002a30 <fsm+0x2cc>)
 800280a:	21f0      	movs	r1, #240	@ 0xf0
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe fe43 	bl	8001498 <lcd_StrCenter>
 8002812:	e014      	b.n	800283e <fsm+0xda>
			}
			else{
				lcd_Fill(0, 200, 240, 300, BLACK);
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800281c:	22f0      	movs	r2, #240	@ 0xf0
 800281e:	21c8      	movs	r1, #200	@ 0xc8
 8002820:	2000      	movs	r0, #0
 8002822:	f7fe fa99 	bl	8000d58 <lcd_Fill>
				lcd_StrCenter(0, 240, "It's this time!", BLACK, BLACK, 16, 0);
 8002826:	2300      	movs	r3, #0
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	2310      	movs	r3, #16
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2300      	movs	r3, #0
 8002834:	4a7e      	ldr	r2, [pc, #504]	@ (8002a30 <fsm+0x2cc>)
 8002836:	21f0      	movs	r1, #240	@ 0xf0
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe fe2d 	bl	8001498 <lcd_StrCenter>
			}

			if (button_count[0] == 1) {
 800283e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a34 <fsm+0x2d0>)
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	f040 8139 	bne.w	8002aba <fsm+0x356>
				lcd_Fill(0, 50, 240, 75, BLACK);
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	234b      	movs	r3, #75	@ 0x4b
 800284e:	22f0      	movs	r2, #240	@ 0xf0
 8002850:	2132      	movs	r1, #50	@ 0x32
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe fa80 	bl	8000d58 <lcd_Fill>
				currentMode = modeModify;
 8002858:	4b6d      	ldr	r3, [pc, #436]	@ (8002a10 <fsm+0x2ac>)
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800285e:	e12c      	b.n	8002aba <fsm+0x356>
		case modeModify:
			for (int i = 0; i < 7; i++) {
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	e059      	b.n	800291a <fsm+0x1b6>
				if (temp_time[i] == 0 && flag == 0) {
 8002866:	4a6d      	ldr	r2, [pc, #436]	@ (8002a1c <fsm+0x2b8>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d150      	bne.n	8002914 <fsm+0x1b0>
 8002872:	4b71      	ldr	r3, [pc, #452]	@ (8002a38 <fsm+0x2d4>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d14c      	bne.n	8002914 <fsm+0x1b0>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b06      	cmp	r3, #6
 800287e:	d849      	bhi.n	8002914 <fsm+0x1b0>
 8002880:	a201      	add	r2, pc, #4	@ (adr r2, 8002888 <fsm+0x124>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	080028a5 	.word	0x080028a5
 800288c:	080028b5 	.word	0x080028b5
 8002890:	080028c5 	.word	0x080028c5
 8002894:	080028d5 	.word	0x080028d5
 8002898:	080028e5 	.word	0x080028e5
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	08002905 	.word	0x08002905
					switch (i) {
						case 0:
							temp_time[i] = ds3231_hours;
 80028a4:	4b60      	ldr	r3, [pc, #384]	@ (8002a28 <fsm+0x2c4>)
 80028a6:	7819      	ldrb	r1, [r3, #0]
 80028a8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a1c <fsm+0x2b8>)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	460a      	mov	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
							break;
 80028b2:	e02f      	b.n	8002914 <fsm+0x1b0>
						case 1:
							temp_time[i] = ds3231_min;
 80028b4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a2c <fsm+0x2c8>)
 80028b6:	7819      	ldrb	r1, [r3, #0]
 80028b8:	4a58      	ldr	r2, [pc, #352]	@ (8002a1c <fsm+0x2b8>)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4413      	add	r3, r2
 80028be:	460a      	mov	r2, r1
 80028c0:	701a      	strb	r2, [r3, #0]
							break;
 80028c2:	e027      	b.n	8002914 <fsm+0x1b0>
						case 2:
							temp_time[i] = ds3231_sec;
 80028c4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a3c <fsm+0x2d8>)
 80028c6:	7819      	ldrb	r1, [r3, #0]
 80028c8:	4a54      	ldr	r2, [pc, #336]	@ (8002a1c <fsm+0x2b8>)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	460a      	mov	r2, r1
 80028d0:	701a      	strb	r2, [r3, #0]
							break;
 80028d2:	e01f      	b.n	8002914 <fsm+0x1b0>
						case 3:
							temp_time[i] = ds3231_day;
 80028d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a40 <fsm+0x2dc>)
 80028d6:	7819      	ldrb	r1, [r3, #0]
 80028d8:	4a50      	ldr	r2, [pc, #320]	@ (8002a1c <fsm+0x2b8>)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4413      	add	r3, r2
 80028de:	460a      	mov	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
							break;
 80028e2:	e017      	b.n	8002914 <fsm+0x1b0>
						case 4:
							temp_time[i] = ds3231_date;
 80028e4:	4b57      	ldr	r3, [pc, #348]	@ (8002a44 <fsm+0x2e0>)
 80028e6:	7819      	ldrb	r1, [r3, #0]
 80028e8:	4a4c      	ldr	r2, [pc, #304]	@ (8002a1c <fsm+0x2b8>)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4413      	add	r3, r2
 80028ee:	460a      	mov	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]
							break;
 80028f2:	e00f      	b.n	8002914 <fsm+0x1b0>
						case 5:
							temp_time[i] = ds3231_month;
 80028f4:	4b54      	ldr	r3, [pc, #336]	@ (8002a48 <fsm+0x2e4>)
 80028f6:	7819      	ldrb	r1, [r3, #0]
 80028f8:	4a48      	ldr	r2, [pc, #288]	@ (8002a1c <fsm+0x2b8>)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4413      	add	r3, r2
 80028fe:	460a      	mov	r2, r1
 8002900:	701a      	strb	r2, [r3, #0]
							break;
 8002902:	e007      	b.n	8002914 <fsm+0x1b0>
						case 6:
							temp_time[i] = ds3231_year;
 8002904:	4b51      	ldr	r3, [pc, #324]	@ (8002a4c <fsm+0x2e8>)
 8002906:	7819      	ldrb	r1, [r3, #0]
 8002908:	4a44      	ldr	r2, [pc, #272]	@ (8002a1c <fsm+0x2b8>)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4413      	add	r3, r2
 800290e:	460a      	mov	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
							break;
 8002912:	bf00      	nop
			for (int i = 0; i < 7; i++) {
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3301      	adds	r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b06      	cmp	r3, #6
 800291e:	dda2      	ble.n	8002866 <fsm+0x102>
					}
				}
			}
			flag = 1;
 8002920:	4b45      	ldr	r3, [pc, #276]	@ (8002a38 <fsm+0x2d4>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
			ConfigTime();
 8002926:	f7ff f923 	bl	8001b70 <ConfigTime>
			if (button_count[0] == 1) {
 800292a:	4b42      	ldr	r3, [pc, #264]	@ (8002a34 <fsm+0x2d0>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	f040 80c5 	bne.w	8002abe <fsm+0x35a>
				flag = 0;
 8002934:	4b40      	ldr	r3, [pc, #256]	@ (8002a38 <fsm+0x2d4>)
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
				flag_uart = 0;
 800293a:	4b45      	ldr	r3, [pc, #276]	@ (8002a50 <fsm+0x2ec>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
				lcd_Fill(0, 50, 240, 75, BLACK);
 8002940:	2300      	movs	r3, #0
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	234b      	movs	r3, #75	@ 0x4b
 8002946:	22f0      	movs	r2, #240	@ 0xf0
 8002948:	2132      	movs	r1, #50	@ 0x32
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe fa04 	bl	8000d58 <lcd_Fill>
				lcd_Fill(0, 200, 240, 250, BLACK);
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	23fa      	movs	r3, #250	@ 0xfa
 8002956:	22f0      	movs	r2, #240	@ 0xf0
 8002958:	21c8      	movs	r1, #200	@ 0xc8
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe f9fc 	bl	8000d58 <lcd_Fill>
				currentMode = modeTimer;
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <fsm+0x2ac>)
 8002962:	2203      	movs	r2, #3
 8002964:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002966:	e0aa      	b.n	8002abe <fsm+0x35a>
		case modeTimer:
			for (int i = 0; i < 7; i++) {
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	e089      	b.n	8002a82 <fsm+0x31e>
				if (timer[i] == 0 && flag == 0) {
 800296e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a20 <fsm+0x2bc>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 8080 	bne.w	8002a7c <fsm+0x318>
 800297c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <fsm+0x2d4>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d17b      	bne.n	8002a7c <fsm+0x318>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b06      	cmp	r3, #6
 8002988:	d878      	bhi.n	8002a7c <fsm+0x318>
 800298a:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <fsm+0x22c>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	080029ad 	.word	0x080029ad
 8002994:	080029c1 	.word	0x080029c1
 8002998:	080029d5 	.word	0x080029d5
 800299c:	080029e9 	.word	0x080029e9
 80029a0:	080029fd 	.word	0x080029fd
 80029a4:	08002a55 	.word	0x08002a55
 80029a8:	08002a69 	.word	0x08002a69
					switch (i) {
						case 0:
							timer[i] = timerPresent[i];
 80029ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002a24 <fsm+0x2c0>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	7819      	ldrb	r1, [r3, #0]
 80029b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a20 <fsm+0x2bc>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	460a      	mov	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
							break;
 80029be:	e05d      	b.n	8002a7c <fsm+0x318>
						case 1:
							timer[i] = timerPresent[i];
 80029c0:	4a18      	ldr	r2, [pc, #96]	@ (8002a24 <fsm+0x2c0>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	7819      	ldrb	r1, [r3, #0]
 80029c8:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <fsm+0x2bc>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	460a      	mov	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
							break;
 80029d2:	e053      	b.n	8002a7c <fsm+0x318>
						case 2:
							timer[i] = timerPresent[i];
 80029d4:	4a13      	ldr	r2, [pc, #76]	@ (8002a24 <fsm+0x2c0>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	7819      	ldrb	r1, [r3, #0]
 80029dc:	4a10      	ldr	r2, [pc, #64]	@ (8002a20 <fsm+0x2bc>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	460a      	mov	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]
							break;
 80029e6:	e049      	b.n	8002a7c <fsm+0x318>
						case 3:
							timer[i] = timerPresent[i];
 80029e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a24 <fsm+0x2c0>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	7819      	ldrb	r1, [r3, #0]
 80029f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a20 <fsm+0x2bc>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	460a      	mov	r2, r1
 80029f8:	701a      	strb	r2, [r3, #0]
							break;
 80029fa:	e03f      	b.n	8002a7c <fsm+0x318>
						case 4:
							timer[i] = timerPresent[i];
 80029fc:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <fsm+0x2c0>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	7819      	ldrb	r1, [r3, #0]
 8002a04:	4a06      	ldr	r2, [pc, #24]	@ (8002a20 <fsm+0x2bc>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	460a      	mov	r2, r1
 8002a0c:	701a      	strb	r2, [r3, #0]
							break;
 8002a0e:	e035      	b.n	8002a7c <fsm+0x318>
 8002a10:	2000017c 	.word	0x2000017c
 8002a14:	20000176 	.word	0x20000176
 8002a18:	20000177 	.word	0x20000177
 8002a1c:	20000180 	.word	0x20000180
 8002a20:	20000188 	.word	0x20000188
 8002a24:	20000190 	.word	0x20000190
 8002a28:	200000b7 	.word	0x200000b7
 8002a2c:	200000b8 	.word	0x200000b8
 8002a30:	08008d90 	.word	0x08008d90
 8002a34:	2000008c 	.word	0x2000008c
 8002a38:	20000178 	.word	0x20000178
 8002a3c:	200000b9 	.word	0x200000b9
 8002a40:	200000bb 	.word	0x200000bb
 8002a44:	200000ba 	.word	0x200000ba
 8002a48:	200000bc 	.word	0x200000bc
 8002a4c:	200000bd 	.word	0x200000bd
 8002a50:	20000179 	.word	0x20000179
						case 5:
							timer[i] = timerPresent[i];
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <fsm+0x368>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	7819      	ldrb	r1, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <fsm+0x36c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	460a      	mov	r2, r1
 8002a64:	701a      	strb	r2, [r3, #0]
							break;
 8002a66:	e009      	b.n	8002a7c <fsm+0x318>
						case 6:
							timer[i] = timerPresent[i];
 8002a68:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <fsm+0x368>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	7819      	ldrb	r1, [r3, #0]
 8002a70:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <fsm+0x36c>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	460a      	mov	r2, r1
 8002a78:	701a      	strb	r2, [r3, #0]
							break;
 8002a7a:	bf00      	nop
			for (int i = 0; i < 7; i++) {
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	f77f af72 	ble.w	800296e <fsm+0x20a>
					}
				}
			}
			flag = 1;
 8002a8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <fsm+0x370>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
			ConfigTimer();
 8002a90:	f7ff fcb2 	bl	80023f8 <ConfigTimer>
			if (button_count[0] == 1) {
 8002a94:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <fsm+0x374>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d112      	bne.n	8002ac2 <fsm+0x35e>
				flag = 0;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <fsm+0x370>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
				lcd_Fill(0, 50, 240, 75, BLACK);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	234b      	movs	r3, #75	@ 0x4b
 8002aa8:	22f0      	movs	r2, #240	@ 0xf0
 8002aaa:	2132      	movs	r1, #50	@ 0x32
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe f953 	bl	8000d58 <lcd_Fill>
				currentMode = modeNormal;
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <fsm+0x378>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002ab8:	e003      	b.n	8002ac2 <fsm+0x35e>
			break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <fsm+0x360>
			break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <fsm+0x360>
			break;
 8002ac2:	bf00      	nop
	}
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000190 	.word	0x20000190
 8002ad0:	20000188 	.word	0x20000188
 8002ad4:	20000178 	.word	0x20000178
 8002ad8:	2000008c 	.word	0x2000008c
 8002adc:	2000017c 	.word	0x2000017c

08002ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae4:	b672      	cpsid	i
}
 8002ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <Error_Handler+0x8>

08002aec <initRingBuffer>:
 *      Author: DAT
 */

#include "ring_buffer.h"

void initRingBuffer(RingBuffer *buffer) {
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  buffer->head = 0;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	629a      	str	r2, [r3, #40]	@ 0x28
  buffer->tail = 0;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <isRingBufferEmpty>:

int isRingBufferEmpty(RingBuffer *buffer) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return buffer->head == buffer->tail;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <isRingBufferFull>:

int isRingBufferFull(RingBuffer *buffer) {
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return (buffer->tail + 1) % BUFFER_SIZE == buffer->head;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	1c59      	adds	r1, r3, #1
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <isRingBufferFull+0x40>)
 8002b44:	fb83 2301 	smull	r2, r3, r3, r1
 8002b48:	109a      	asrs	r2, r3, #2
 8002b4a:	17cb      	asrs	r3, r1, #31
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	1aca      	subs	r2, r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	66666667 	.word	0x66666667

08002b78 <addToRingBuffer>:

void addToRingBuffer(RingBuffer *buffer, int data) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  if (isRingBufferFull(buffer)) {
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffd6 	bl	8002b34 <isRingBufferFull>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <addToRingBuffer+0x1e>
    printf("Ring buffer is full!\n");
 8002b8e:	480e      	ldr	r0, [pc, #56]	@ (8002bc8 <addToRingBuffer+0x50>)
 8002b90:	f005 f976 	bl	8007e80 <puts>
    return;
 8002b94:	e015      	b.n	8002bc2 <addToRingBuffer+0x4a>
  }

  buffer->data[buffer->tail] = data;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <addToRingBuffer+0x54>)
 8002baa:	fb83 2301 	smull	r2, r3, r3, r1
 8002bae:	109a      	asrs	r2, r3, #2
 8002bb0:	17cb      	asrs	r3, r1, #31
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	1aca      	subs	r2, r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	08008da0 	.word	0x08008da0
 8002bcc:	66666667 	.word	0x66666667

08002bd0 <getFromRingBuffer>:

char getFromRingBuffer(RingBuffer *buffer) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if (isRingBufferEmpty(buffer)) {
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff97 	bl	8002b0c <isRingBufferEmpty>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <getFromRingBuffer+0x20>
    printf("Ring buffer is empty!\n");
 8002be4:	4810      	ldr	r0, [pc, #64]	@ (8002c28 <getFromRingBuffer+0x58>)
 8002be6:	f005 f94b 	bl	8007e80 <puts>
    return "E";
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <getFromRingBuffer+0x5c>)
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e017      	b.n	8002c20 <getFromRingBuffer+0x50>
  }

  int data = buffer->data[buffer->head];
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfa:	60fb      	str	r3, [r7, #12]
  buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <getFromRingBuffer+0x60>)
 8002c04:	fb83 2301 	smull	r2, r3, r3, r1
 8002c08:	109a      	asrs	r2, r3, #2
 8002c0a:	17cb      	asrs	r3, r1, #31
 8002c0c:	1ad2      	subs	r2, r2, r3
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	1aca      	subs	r2, r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  return (char)data;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	b2db      	uxtb	r3, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	08008db8 	.word	0x08008db8
 8002c2c:	08008dd0 	.word	0x08008dd0
 8002c30:	66666667 	.word	0x66666667

08002c34 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <timer_init+0x10>)
 8002c3a:	f003 fa0b 	bl	8006054 <HAL_TIM_Base_Start_IT>
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000200 	.word	0x20000200

08002c48 <setTimer2>:

void setTimer2(uint16_t duration){
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002c52:	4a08      	ldr	r2, [pc, #32]	@ (8002c74 <setTimer2+0x2c>)
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <setTimer2+0x2c>)
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <setTimer2+0x30>)
 8002c5e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <setTimer2+0x34>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	801a      	strh	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200001a0 	.word	0x200001a0
 8002c78:	2000019e 	.word	0x2000019e
 8002c7c:	2000019c 	.word	0x2000019c

08002c80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c90:	d116      	bne.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ca4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002ca6:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002cb6:	881a      	ldrh	r2, [r3, #0]
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002cba:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002cbc:	f7fe fc2a 	bl	8001514 <led7_Scan>
	}
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	2000019e 	.word	0x2000019e
 8002ccc:	2000019c 	.word	0x2000019c
 8002cd0:	200001a0 	.word	0x200001a0

08002cd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cd8:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cda:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <MX_SPI1_Init+0x68>)
 8002cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cde:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d06:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d12:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d18:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d20:	220a      	movs	r2, #10
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d24:	4804      	ldr	r0, [pc, #16]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d26:	f002 fb59 	bl	80053dc <HAL_SPI_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d30:	f7ff fed6 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200001a4 	.word	0x200001a4
 8002d3c:	40013000 	.word	0x40013000

08002d40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	@ 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a19      	ldr	r2, [pc, #100]	@ (8002dc4 <HAL_SPI_MspInit+0x84>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d12b      	bne.n	8002dba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <HAL_SPI_MspInit+0x88>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_SPI_MspInit+0x88>)
 8002d6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <HAL_SPI_MspInit+0x88>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_SPI_MspInit+0x88>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a10      	ldr	r2, [pc, #64]	@ (8002dc8 <HAL_SPI_MspInit+0x88>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_SPI_MspInit+0x88>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d9a:	2338      	movs	r3, #56	@ 0x38
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002daa:	2305      	movs	r3, #5
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <HAL_SPI_MspInit+0x8c>)
 8002db6:	f000 fd03 	bl	80037c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	@ 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40013000 	.word	0x40013000
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020400 	.word	0x40020400

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	4a0f      	ldr	r2, [pc, #60]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <NMI_Handler+0x4>

08002e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <HardFault_Handler+0x4>

08002e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <MemManage_Handler+0x4>

08002e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e76:	f000 fabb 	bl	80033f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e84:	4802      	ldr	r0, [pc, #8]	@ (8002e90 <TIM2_IRQHandler+0x10>)
 8002e86:	f003 f955 	bl	8006134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000200 	.word	0x20000200

08002e94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e98:	4802      	ldr	r0, [pc, #8]	@ (8002ea4 <USART1_IRQHandler+0x10>)
 8002e9a:	f003 fe1d 	bl	8006ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200002e0 	.word	0x200002e0

08002ea8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e00a      	b.n	8002ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eba:	f3af 8000 	nop.w
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60ba      	str	r2, [r7, #8]
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf0      	blt.n	8002eba <_read+0x12>
	}

return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e009      	b.n	8002f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dbf1      	blt.n	8002ef4 <_write+0x12>
	}
	return len;
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_close>:

int _close(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
	return -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f42:	605a      	str	r2, [r3, #4]
	return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_isatty>:

int _isatty(int file)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
	return 1;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
	return 0;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <_sbrk+0x5c>)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <_sbrk+0x60>)
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f98:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <_sbrk+0x64>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <_sbrk+0x68>)
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <_sbrk+0x64>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d207      	bcs.n	8002fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb4:	f005 f8b2 	bl	800811c <__errno>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	220c      	movs	r2, #12
 8002fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	e009      	b.n	8002fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc4:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <_sbrk+0x64>)
 8002fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20020000 	.word	0x20020000
 8002fe4:	00000400 	.word	0x00000400
 8002fe8:	200001fc 	.word	0x200001fc
 8002fec:	20000478 	.word	0x20000478

08002ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <SystemInit+0x20>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	4a05      	ldr	r2, [pc, #20]	@ (8003010 <SystemInit+0x20>)
 8002ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003028:	463b      	mov	r3, r7
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003030:	4b1d      	ldr	r3, [pc, #116]	@ (80030a8 <MX_TIM2_Init+0x94>)
 8003032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <MX_TIM2_Init+0x94>)
 800303a:	f240 3247 	movw	r2, #839	@ 0x347
 800303e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003040:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <MX_TIM2_Init+0x94>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003046:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <MX_TIM2_Init+0x94>)
 8003048:	2263      	movs	r2, #99	@ 0x63
 800304a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304c:	4b16      	ldr	r3, [pc, #88]	@ (80030a8 <MX_TIM2_Init+0x94>)
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003052:	4b15      	ldr	r3, [pc, #84]	@ (80030a8 <MX_TIM2_Init+0x94>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003058:	4813      	ldr	r0, [pc, #76]	@ (80030a8 <MX_TIM2_Init+0x94>)
 800305a:	f002 ffab 	bl	8005fb4 <HAL_TIM_Base_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003064:	f7ff fd3c 	bl	8002ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800306c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800306e:	f107 0308 	add.w	r3, r7, #8
 8003072:	4619      	mov	r1, r3
 8003074:	480c      	ldr	r0, [pc, #48]	@ (80030a8 <MX_TIM2_Init+0x94>)
 8003076:	f003 f965 	bl	8006344 <HAL_TIM_ConfigClockSource>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003080:	f7ff fd2e 	bl	8002ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003084:	2300      	movs	r3, #0
 8003086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800308c:	463b      	mov	r3, r7
 800308e:	4619      	mov	r1, r3
 8003090:	4805      	ldr	r0, [pc, #20]	@ (80030a8 <MX_TIM2_Init+0x94>)
 8003092:	f003 fb81 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800309c:	f7ff fd20 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000200 	.word	0x20000200

080030ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030bc:	d115      	bne.n	80030ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_TIM_Base_MspInit+0x48>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <HAL_TIM_Base_MspInit+0x48>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_TIM_Base_MspInit+0x48>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	201c      	movs	r0, #28
 80030e0:	f000 faa5 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030e4:	201c      	movs	r0, #28
 80030e6:	f000 fabe 	bl	8003666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <uart_init_rs232>:

uint8_t receive_buffer1 = 0;
uint8_t msg[100];
RingBuffer buffer;

void uart_init_rs232(){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80030fc:	2201      	movs	r2, #1
 80030fe:	4903      	ldr	r1, [pc, #12]	@ (800310c <uart_init_rs232+0x14>)
 8003100:	4803      	ldr	r0, [pc, #12]	@ (8003110 <uart_init_rs232+0x18>)
 8003102:	f003 fcb8 	bl	8006a76 <HAL_UART_Receive_IT>
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000248 	.word	0x20000248
 8003110:	200002e0 	.word	0x200002e0

08003114 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4907      	ldr	r1, [pc, #28]	@ (800313c <uart_Rs232SendString+0x28>)
 8003120:	4807      	ldr	r0, [pc, #28]	@ (8003140 <uart_Rs232SendString+0x2c>)
 8003122:	f004 feb5 	bl	8007e90 <siprintf>
 8003126:	4603      	mov	r3, r0
 8003128:	b29a      	uxth	r2, r3
 800312a:	230a      	movs	r3, #10
 800312c:	4904      	ldr	r1, [pc, #16]	@ (8003140 <uart_Rs232SendString+0x2c>)
 800312e:	4805      	ldr	r0, [pc, #20]	@ (8003144 <uart_Rs232SendString+0x30>)
 8003130:	f003 fc0f 	bl	8006952 <HAL_UART_Transmit>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	08008dd4 	.word	0x08008dd4
 8003140:	2000024c 	.word	0x2000024c
 8003144:	200002e0 	.word	0x200002e0

08003148 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a08      	ldr	r2, [pc, #32]	@ (8003178 <HAL_UART_RxCpltCallback+0x30>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10a      	bne.n	8003170 <HAL_UART_RxCpltCallback+0x28>
//			addToRingBuffer(&buffer, receive_buffer1 / 10);
//			addToRingBuffer(&buffer, receive_buffer1 % 10);
//		}

		// turn on the receice interrupt
		addToRingBuffer(&buffer, receive_buffer1);
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <HAL_UART_RxCpltCallback+0x34>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4807      	ldr	r0, [pc, #28]	@ (8003180 <HAL_UART_RxCpltCallback+0x38>)
 8003162:	f7ff fd09 	bl	8002b78 <addToRingBuffer>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003166:	2201      	movs	r2, #1
 8003168:	4904      	ldr	r1, [pc, #16]	@ (800317c <HAL_UART_RxCpltCallback+0x34>)
 800316a:	4806      	ldr	r0, [pc, #24]	@ (8003184 <HAL_UART_RxCpltCallback+0x3c>)
 800316c:	f003 fc83 	bl	8006a76 <HAL_UART_Receive_IT>
	}
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40011000 	.word	0x40011000
 800317c:	20000248 	.word	0x20000248
 8003180:	200002b0 	.word	0x200002b0
 8003184:	200002e0 	.word	0x200002e0

08003188 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <MX_USART1_UART_Init+0x50>)
 8003190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 8003194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800319a:	4b0e      	ldr	r3, [pc, #56]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031a0:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031ae:	220c      	movs	r2, #12
 80031b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031b8:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031be:	4805      	ldr	r0, [pc, #20]	@ (80031d4 <MX_USART1_UART_Init+0x4c>)
 80031c0:	f003 fb7a 	bl	80068b8 <HAL_UART_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031ca:	f7ff fc89 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200002e0 	.word	0x200002e0
 80031d8:	40011000 	.word	0x40011000

080031dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	@ 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_UART_MspInit+0x94>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d134      	bne.n	8003268 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	4b1c      	ldr	r3, [pc, #112]	@ (8003274 <HAL_UART_MspInit+0x98>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	4a1b      	ldr	r2, [pc, #108]	@ (8003274 <HAL_UART_MspInit+0x98>)
 8003208:	f043 0310 	orr.w	r3, r3, #16
 800320c:	6453      	str	r3, [r2, #68]	@ 0x44
 800320e:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_UART_MspInit+0x98>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_UART_MspInit+0x98>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a14      	ldr	r2, [pc, #80]	@ (8003274 <HAL_UART_MspInit+0x98>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_UART_MspInit+0x98>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003236:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800323a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	2303      	movs	r3, #3
 8003246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003248:	2307      	movs	r3, #7
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4619      	mov	r1, r3
 8003252:	4809      	ldr	r0, [pc, #36]	@ (8003278 <HAL_UART_MspInit+0x9c>)
 8003254:	f000 fab4 	bl	80037c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	2025      	movs	r0, #37	@ 0x25
 800325e:	f000 f9e6 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003262:	2025      	movs	r0, #37	@ 0x25
 8003264:	f000 f9ff 	bl	8003666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003268:	bf00      	nop
 800326a:	3728      	adds	r7, #40	@ 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40011000 	.word	0x40011000
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000

0800327c <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	0092      	lsls	r2, r2, #2
 8003290:	4413      	add	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	b2da      	uxtb	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	b2db      	uxtb	r3, r3
 800329e:	4413      	add	r3, r2
 80032a0:	b2db      	uxtb	r3, r3
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <DEC2BCD+0x44>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	08db      	lsrs	r3, r3, #3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	b258      	sxtb	r0, r3
 80032ca:	79fa      	ldrb	r2, [r7, #7]
 80032cc:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <DEC2BCD+0x44>)
 80032ce:	fba3 1302 	umull	r1, r3, r3, r2
 80032d2:	08d9      	lsrs	r1, r3, #3
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	4303      	orrs	r3, r0
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	cccccccd 	.word	0xcccccccd

080032f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032fc:	480d      	ldr	r0, [pc, #52]	@ (8003334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032fe:	490e      	ldr	r1, [pc, #56]	@ (8003338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003300:	4a0e      	ldr	r2, [pc, #56]	@ (800333c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003304:	e002      	b.n	800330c <LoopCopyDataInit>

08003306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330a:	3304      	adds	r3, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800330c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003310:	d3f9      	bcc.n	8003306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003312:	4a0b      	ldr	r2, [pc, #44]	@ (8003340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003314:	4c0b      	ldr	r4, [pc, #44]	@ (8003344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003318:	e001      	b.n	800331e <LoopFillZerobss>

0800331a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800331c:	3204      	adds	r2, #4

0800331e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003320:	d3fb      	bcc.n	800331a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003322:	f7ff fe65 	bl	8002ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003326:	f004 feff 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800332a:	f7fe f97f 	bl	800162c <main>
  bx  lr    
 800332e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003338:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800333c:	0800bec4 	.word	0x0800bec4
  ldr r2, =_sbss
 8003340:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003344:	20000474 	.word	0x20000474

08003348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003348:	e7fe      	b.n	8003348 <ADC_IRQHandler>
	...

0800334c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003350:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <HAL_Init+0x40>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0d      	ldr	r2, [pc, #52]	@ (800338c <HAL_Init+0x40>)
 8003356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800335c:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <HAL_Init+0x40>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <HAL_Init+0x40>)
 8003362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <HAL_Init+0x40>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a07      	ldr	r2, [pc, #28]	@ (800338c <HAL_Init+0x40>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003374:	2003      	movs	r0, #3
 8003376:	f000 f94f 	bl	8003618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800337a:	200f      	movs	r0, #15
 800337c:	f000 f808 	bl	8003390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003380:	f7ff fd26 	bl	8002dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023c00 	.word	0x40023c00

08003390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003398:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_InitTick+0x54>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_InitTick+0x58>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4619      	mov	r1, r3
 80033a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f967 	bl	8003682 <HAL_SYSTICK_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00e      	b.n	80033dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d80a      	bhi.n	80033da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c4:	2200      	movs	r2, #0
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f000 f92f 	bl	800362e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d0:	4a06      	ldr	r2, [pc, #24]	@ (80033ec <HAL_InitTick+0x5c>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000008 	.word	0x20000008
 80033e8:	20000010 	.word	0x20000010
 80033ec:	2000000c 	.word	0x2000000c

080033f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f4:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <HAL_IncTick+0x20>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <HAL_IncTick+0x24>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <HAL_IncTick+0x24>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000010 	.word	0x20000010
 8003414:	20000324 	.word	0x20000324

08003418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return uwTick;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_GetTick+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000324 	.word	0x20000324

08003430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003438:	f7ff ffee 	bl	8003418 <HAL_GetTick>
 800343c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d005      	beq.n	8003456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800344a:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <HAL_Delay+0x44>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003456:	bf00      	nop
 8003458:	f7ff ffde 	bl	8003418 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	429a      	cmp	r2, r3
 8003466:	d8f7      	bhi.n	8003458 <HAL_Delay+0x28>
  {
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000010 	.word	0x20000010

08003478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003488:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003494:	4013      	ands	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034aa:	4a04      	ldr	r2, [pc, #16]	@ (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	60d3      	str	r3, [r2, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c4:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <__NVIC_GetPriorityGrouping+0x18>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	f003 0307 	and.w	r3, r3, #7
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	db0b      	blt.n	8003506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4907      	ldr	r1, [pc, #28]	@ (8003514 <__NVIC_EnableIRQ+0x38>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2001      	movs	r0, #1
 80034fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000e100 	.word	0xe000e100

08003518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	2b00      	cmp	r3, #0
 800352a:	db0a      	blt.n	8003542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	b2da      	uxtb	r2, r3
 8003530:	490c      	ldr	r1, [pc, #48]	@ (8003564 <__NVIC_SetPriority+0x4c>)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	440b      	add	r3, r1
 800353c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003540:	e00a      	b.n	8003558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4908      	ldr	r1, [pc, #32]	@ (8003568 <__NVIC_SetPriority+0x50>)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	3b04      	subs	r3, #4
 8003550:	0112      	lsls	r2, r2, #4
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	440b      	add	r3, r1
 8003556:	761a      	strb	r2, [r3, #24]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000e100 	.word	0xe000e100
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	@ 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f1c3 0307 	rsb	r3, r3, #7
 8003586:	2b04      	cmp	r3, #4
 8003588:	bf28      	it	cs
 800358a:	2304      	movcs	r3, #4
 800358c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3304      	adds	r3, #4
 8003592:	2b06      	cmp	r3, #6
 8003594:	d902      	bls.n	800359c <NVIC_EncodePriority+0x30>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3b03      	subs	r3, #3
 800359a:	e000      	b.n	800359e <NVIC_EncodePriority+0x32>
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	f04f 32ff 	mov.w	r2, #4294967295
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	401a      	ands	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	43d9      	mvns	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	4313      	orrs	r3, r2
         );
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3724      	adds	r7, #36	@ 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3b01      	subs	r3, #1
 80035e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e4:	d301      	bcc.n	80035ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00f      	b.n	800360a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <SysTick_Config+0x40>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f2:	210f      	movs	r1, #15
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	f7ff ff8e 	bl	8003518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <SysTick_Config+0x40>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003602:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <SysTick_Config+0x40>)
 8003604:	2207      	movs	r2, #7
 8003606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	e000e010 	.word	0xe000e010

08003618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff29 	bl	8003478 <__NVIC_SetPriorityGrouping>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	4603      	mov	r3, r0
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003640:	f7ff ff3e 	bl	80034c0 <__NVIC_GetPriorityGrouping>
 8003644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	6978      	ldr	r0, [r7, #20]
 800364c:	f7ff ff8e 	bl	800356c <NVIC_EncodePriority>
 8003650:	4602      	mov	r2, r0
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff5d 	bl	8003518 <__NVIC_SetPriority>
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff31 	bl	80034dc <__NVIC_EnableIRQ>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffa2 	bl	80035d4 <SysTick_Config>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7ff feb6 	bl	8003418 <HAL_GetTick>
 80036ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d008      	beq.n	80036cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e052      	b.n	8003772 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0216 	bic.w	r2, r2, #22
 80036da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <HAL_DMA_Abort+0x62>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0208 	bic.w	r2, r2, #8
 800370a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371c:	e013      	b.n	8003746 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371e:	f7ff fe7b 	bl	8003418 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b05      	cmp	r3, #5
 800372a:	d90c      	bls.n	8003746 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e015      	b.n	8003772 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e4      	bne.n	800371e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	223f      	movs	r2, #63	@ 0x3f
 800375a:	409a      	lsls	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d004      	beq.n	8003798 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2280      	movs	r2, #128	@ 0x80
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e00c      	b.n	80037b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2205      	movs	r2, #5
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e16b      	b.n	8003ab4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	f040 815a 	bne.w	8003aae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d005      	beq.n	8003812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380e:	2b02      	cmp	r3, #2
 8003810:	d130      	bne.n	8003874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 0201 	and.w	r2, r3, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	d017      	beq.n	80038b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d123      	bne.n	8003904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	08da      	lsrs	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3208      	adds	r2, #8
 80038fe:	69b9      	ldr	r1, [r7, #24]
 8003900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0203 	and.w	r2, r3, #3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80b4 	beq.w	8003aae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b60      	ldr	r3, [pc, #384]	@ (8003acc <HAL_GPIO_Init+0x30c>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	4a5f      	ldr	r2, [pc, #380]	@ (8003acc <HAL_GPIO_Init+0x30c>)
 8003950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003954:	6453      	str	r3, [r2, #68]	@ 0x44
 8003956:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_GPIO_Init+0x30c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003962:	4a5b      	ldr	r2, [pc, #364]	@ (8003ad0 <HAL_GPIO_Init+0x310>)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <HAL_GPIO_Init+0x314>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <HAL_GPIO_Init+0x226>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a51      	ldr	r2, [pc, #324]	@ (8003ad8 <HAL_GPIO_Init+0x318>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d025      	beq.n	80039e2 <HAL_GPIO_Init+0x222>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a50      	ldr	r2, [pc, #320]	@ (8003adc <HAL_GPIO_Init+0x31c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01f      	beq.n	80039de <HAL_GPIO_Init+0x21e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4f      	ldr	r2, [pc, #316]	@ (8003ae0 <HAL_GPIO_Init+0x320>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d019      	beq.n	80039da <HAL_GPIO_Init+0x21a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4e      	ldr	r2, [pc, #312]	@ (8003ae4 <HAL_GPIO_Init+0x324>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_GPIO_Init+0x216>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae8 <HAL_GPIO_Init+0x328>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00d      	beq.n	80039d2 <HAL_GPIO_Init+0x212>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4c      	ldr	r2, [pc, #304]	@ (8003aec <HAL_GPIO_Init+0x32c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <HAL_GPIO_Init+0x20e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4b      	ldr	r2, [pc, #300]	@ (8003af0 <HAL_GPIO_Init+0x330>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_GPIO_Init+0x20a>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e00e      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e00c      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039ce:	2306      	movs	r3, #6
 80039d0:	e00a      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039d2:	2305      	movs	r3, #5
 80039d4:	e008      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039da:	2303      	movs	r3, #3
 80039dc:	e004      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039de:	2302      	movs	r3, #2
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039e6:	2300      	movs	r3, #0
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f002 0203 	and.w	r2, r2, #3
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	4093      	lsls	r3, r2
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f8:	4935      	ldr	r1, [pc, #212]	@ (8003ad0 <HAL_GPIO_Init+0x310>)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	3302      	adds	r3, #2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a2a:	4a32      	ldr	r2, [pc, #200]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a30:	4b30      	ldr	r3, [pc, #192]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a54:	4a27      	ldr	r2, [pc, #156]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a5a:	4b26      	ldr	r3, [pc, #152]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa8:	4a12      	ldr	r2, [pc, #72]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	f67f ae90 	bls.w	80037dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3724      	adds	r7, #36	@ 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40020800 	.word	0x40020800
 8003ae0:	40020c00 	.word	0x40020c00
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40021400 	.word	0x40021400
 8003aec:	40021800 	.word	0x40021800
 8003af0:	40021c00 	.word	0x40021c00
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e12b      	b.n	8003d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd f800 	bl	8000b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	@ 0x24
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b90:	f001 fbfc 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4a81      	ldr	r2, [pc, #516]	@ (8003da0 <HAL_I2C_Init+0x274>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d807      	bhi.n	8003bb0 <HAL_I2C_Init+0x84>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a80      	ldr	r2, [pc, #512]	@ (8003da4 <HAL_I2C_Init+0x278>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf94      	ite	ls
 8003ba8:	2301      	movls	r3, #1
 8003baa:	2300      	movhi	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e006      	b.n	8003bbe <HAL_I2C_Init+0x92>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a7d      	ldr	r2, [pc, #500]	@ (8003da8 <HAL_I2C_Init+0x27c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0e7      	b.n	8003d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a78      	ldr	r2, [pc, #480]	@ (8003dac <HAL_I2C_Init+0x280>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0c9b      	lsrs	r3, r3, #18
 8003bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a6a      	ldr	r2, [pc, #424]	@ (8003da0 <HAL_I2C_Init+0x274>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d802      	bhi.n	8003c00 <HAL_I2C_Init+0xd4>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	e009      	b.n	8003c14 <HAL_I2C_Init+0xe8>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	4a69      	ldr	r2, [pc, #420]	@ (8003db0 <HAL_I2C_Init+0x284>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	3301      	adds	r3, #1
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	495c      	ldr	r1, [pc, #368]	@ (8003da0 <HAL_I2C_Init+0x274>)
 8003c30:	428b      	cmp	r3, r1
 8003c32:	d819      	bhi.n	8003c68 <HAL_I2C_Init+0x13c>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e59      	subs	r1, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c48:	400b      	ands	r3, r1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_I2C_Init+0x138>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1e59      	subs	r1, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c62:	e051      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003c64:	2304      	movs	r3, #4
 8003c66:	e04f      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d111      	bne.n	8003c94 <HAL_I2C_Init+0x168>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e012      	b.n	8003cba <HAL_I2C_Init+0x18e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	0099      	lsls	r1, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Init+0x196>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e022      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_I2C_Init+0x1bc>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e58      	subs	r0, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	440b      	add	r3, r1
 8003cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce6:	e00f      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e58      	subs	r0, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	0099      	lsls	r1, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	6809      	ldr	r1, [r1, #0]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6911      	ldr	r1, [r2, #16]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	000186a0 	.word	0x000186a0
 8003da4:	001e847f 	.word	0x001e847f
 8003da8:	003d08ff 	.word	0x003d08ff
 8003dac:	431bde83 	.word	0x431bde83
 8003db0:	10624dd3 	.word	0x10624dd3

08003db4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dce:	f7ff fb23 	bl	8003418 <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	f040 80d9 	bne.w	8003f94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2319      	movs	r3, #25
 8003de8:	2201      	movs	r2, #1
 8003dea:	496d      	ldr	r1, [pc, #436]	@ (8003fa0 <HAL_I2C_Mem_Write+0x1ec>)
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fc7f 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0cc      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_I2C_Mem_Write+0x56>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0c5      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d007      	beq.n	8003e30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2221      	movs	r2, #33	@ 0x21
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2240      	movs	r2, #64	@ 0x40
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a3a      	ldr	r2, [r7, #32]
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa4 <HAL_I2C_Mem_Write+0x1f0>)
 8003e70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e72:	88f8      	ldrh	r0, [r7, #6]
 8003e74:	893a      	ldrh	r2, [r7, #8]
 8003e76:	8979      	ldrh	r1, [r7, #10]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4603      	mov	r3, r0
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fab6 	bl	80043f4 <I2C_RequestMemoryWrite>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d052      	beq.n	8003f34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e081      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fd00 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06b      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d11b      	bne.n	8003f34 <HAL_I2C_Mem_Write+0x180>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1aa      	bne.n	8003e92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fcec 	bl	800491e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d107      	bne.n	8003f64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e016      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	@ 0x30
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fc2:	f7ff fa29 	bl	8003418 <HAL_GetTick>
 8003fc6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	f040 8208 	bne.w	80043e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2319      	movs	r3, #25
 8003fdc:	2201      	movs	r2, #1
 8003fde:	497b      	ldr	r1, [pc, #492]	@ (80041cc <HAL_I2C_Mem_Read+0x224>)
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fb85 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
 8003fee:	e1fb      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x56>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e1f4      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d007      	beq.n	8004024 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2222      	movs	r2, #34	@ 0x22
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2240      	movs	r2, #64	@ 0x40
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004054:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a5b      	ldr	r2, [pc, #364]	@ (80041d0 <HAL_I2C_Mem_Read+0x228>)
 8004064:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004066:	88f8      	ldrh	r0, [r7, #6]
 8004068:	893a      	ldrh	r2, [r7, #8]
 800406a:	8979      	ldrh	r1, [r7, #10]
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4603      	mov	r3, r0
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fa52 	bl	8004520 <I2C_RequestMemoryRead>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e1b0      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d113      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	623b      	str	r3, [r7, #32]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e184      	b.n	80043c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d11b      	bne.n	80040f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e164      	b.n	80043c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d11b      	bne.n	8004136 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800411c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	e144      	b.n	80043c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800414c:	e138      	b.n	80043c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004152:	2b03      	cmp	r3, #3
 8004154:	f200 80f1 	bhi.w	800433a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	2b01      	cmp	r3, #1
 800415e:	d123      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004162:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fc1b 	bl	80049a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e139      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041a6:	e10b      	b.n	80043c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d14e      	bne.n	800424e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b6:	2200      	movs	r2, #0
 80041b8:	4906      	ldr	r1, [pc, #24]	@ (80041d4 <HAL_I2C_Mem_Read+0x22c>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fa98 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e10e      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
 80041ca:	bf00      	nop
 80041cc:	00100002 	.word	0x00100002
 80041d0:	ffff0000 	.word	0xffff0000
 80041d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800424c:	e0b8      	b.n	80043c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	2200      	movs	r2, #0
 8004256:	4966      	ldr	r1, [pc, #408]	@ (80043f0 <HAL_I2C_Mem_Read+0x448>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fa49 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0bf      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b0:	2200      	movs	r2, #0
 80042b2:	494f      	ldr	r1, [pc, #316]	@ (80043f0 <HAL_I2C_Mem_Read+0x448>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fa1b 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e091      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004338:	e042      	b.n	80043c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fb2e 	bl	80049a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e04c      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d118      	bne.n	80043c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f47f aec2 	bne.w	800414e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e000      	b.n	80043e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
  }
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3728      	adds	r7, #40	@ 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	00010004 	.word	0x00010004

080043f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	461a      	mov	r2, r3
 8004402:	4603      	mov	r3, r0
 8004404:	817b      	strh	r3, [r7, #10]
 8004406:	460b      	mov	r3, r1
 8004408:	813b      	strh	r3, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800441c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	2200      	movs	r2, #0
 8004426:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f960 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004444:	d103      	bne.n	800444e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800444c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e05f      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004452:	897b      	ldrh	r3, [r7, #10]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004460:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	492d      	ldr	r1, [pc, #180]	@ (800451c <I2C_RequestMemoryWrite+0x128>)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f998 	bl	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e04c      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004490:	6a39      	ldr	r1, [r7, #32]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fa02 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d107      	bne.n	80044b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e02b      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c0:	893b      	ldrh	r3, [r7, #8]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	611a      	str	r2, [r3, #16]
 80044ca:	e021      	b.n	8004510 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044cc:	893b      	ldrh	r3, [r7, #8]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044dc:	6a39      	ldr	r1, [r7, #32]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f9dc 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d107      	bne.n	8004502 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004500:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e005      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004506:	893b      	ldrh	r3, [r7, #8]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	00010002 	.word	0x00010002

08004520 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4603      	mov	r3, r0
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	460b      	mov	r3, r1
 8004534:	813b      	strh	r3, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004548:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004558:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2200      	movs	r2, #0
 8004562:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f8c2 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004580:	d103      	bne.n	800458a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004588:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0aa      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800458e:	897b      	ldrh	r3, [r7, #10]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800459c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	6a3a      	ldr	r2, [r7, #32]
 80045a2:	4952      	ldr	r1, [pc, #328]	@ (80046ec <I2C_RequestMemoryRead+0x1cc>)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f8fa 	bl	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e097      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045cc:	6a39      	ldr	r1, [r7, #32]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f964 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d107      	bne.n	80045f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e076      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]
 8004606:	e021      	b.n	800464c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004608:	893b      	ldrh	r3, [r7, #8]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	b29b      	uxth	r3, r3
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004618:	6a39      	ldr	r1, [r7, #32]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f93e 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	2b04      	cmp	r3, #4
 800462c:	d107      	bne.n	800463e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e050      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464e:	6a39      	ldr	r1, [r7, #32]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f923 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00d      	beq.n	8004678 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	2b04      	cmp	r3, #4
 8004662:	d107      	bne.n	8004674 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004672:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e035      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004686:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2200      	movs	r2, #0
 8004690:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f82b 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ae:	d103      	bne.n	80046b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e013      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046bc:	897b      	ldrh	r3, [r7, #10]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	4906      	ldr	r1, [pc, #24]	@ (80046ec <I2C_RequestMemoryRead+0x1cc>)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f863 	bl	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	00010002 	.word	0x00010002

080046f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004700:	e025      	b.n	800474e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d021      	beq.n	800474e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fe fe85 	bl	8003418 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d116      	bne.n	800474e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e023      	b.n	8004796 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10d      	bne.n	8004774 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	e00c      	b.n	800478e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	43da      	mvns	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	429a      	cmp	r2, r3
 8004792:	d0b6      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ac:	e051      	b.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047bc:	d123      	bne.n	8004806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	f043 0204 	orr.w	r2, r3, #4
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e046      	b.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d021      	beq.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fe fe03 	bl	8003418 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d116      	bne.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e020      	b.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10c      	bne.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	43da      	mvns	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e00b      	b.n	800488e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	43da      	mvns	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d18d      	bne.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a8:	e02d      	b.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f8ce 	bl	8004a4c <I2C_IsAcknowledgeFailed>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e02d      	b.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d021      	beq.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe fda9 	bl	8003418 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e007      	b.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004910:	2b80      	cmp	r3, #128	@ 0x80
 8004912:	d1ca      	bne.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800492a:	e02d      	b.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f88d 	bl	8004a4c <I2C_IsAcknowledgeFailed>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e02d      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d021      	beq.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fe fd68 	bl	8003418 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d116      	bne.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e007      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d1ca      	bne.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ac:	e042      	b.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d119      	bne.n	80049f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0210 	mvn.w	r2, #16
 80049c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e029      	b.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f0:	f7fe fd12 	bl	8003418 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e007      	b.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3e:	2b40      	cmp	r3, #64	@ 0x40
 8004a40:	d1b5      	bne.n	80049ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a62:	d11b      	bne.n	8004a9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
	...

08004aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e267      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d075      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aca:	4b88      	ldr	r3, [pc, #544]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d00c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad6:	4b85      	ldr	r3, [pc, #532]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d112      	bne.n	8004b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae2:	4b82      	ldr	r3, [pc, #520]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05b      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x108>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d157      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e242      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x74>
 8004b12:	4b76      	ldr	r3, [pc, #472]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a75      	ldr	r2, [pc, #468]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e01d      	b.n	8004b5c <HAL_RCC_OscConfig+0xb0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x98>
 8004b2a:	4b70      	ldr	r3, [pc, #448]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a6f      	ldr	r2, [pc, #444]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4b6d      	ldr	r3, [pc, #436]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e00b      	b.n	8004b5c <HAL_RCC_OscConfig+0xb0>
 8004b44:	4b69      	ldr	r3, [pc, #420]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a68      	ldr	r2, [pc, #416]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4b66      	ldr	r3, [pc, #408]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a65      	ldr	r2, [pc, #404]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fe fc58 	bl	8003418 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fe fc54 	bl	8003418 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	@ 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e207      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0xc0>
 8004b8a:	e014      	b.n	8004bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fe fc44 	bl	8003418 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fe fc40 	bl	8003418 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1f3      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba6:	4b51      	ldr	r3, [pc, #324]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0xe8>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bce:	4b47      	ldr	r3, [pc, #284]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d11c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bda:	4b44      	ldr	r3, [pc, #272]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d116      	bne.n	8004c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be6:	4b41      	ldr	r3, [pc, #260]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_RCC_OscConfig+0x152>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e1c7      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4937      	ldr	r1, [pc, #220]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c12:	e03a      	b.n	8004c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d020      	beq.n	8004c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c1c:	4b34      	ldr	r3, [pc, #208]	@ (8004cf0 <HAL_RCC_OscConfig+0x244>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fe fbf9 	bl	8003418 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2a:	f7fe fbf5 	bl	8003418 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e1a8      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c48:	4b28      	ldr	r3, [pc, #160]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4925      	ldr	r1, [pc, #148]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
 8004c5c:	e015      	b.n	8004c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5e:	4b24      	ldr	r3, [pc, #144]	@ (8004cf0 <HAL_RCC_OscConfig+0x244>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fe fbd8 	bl	8003418 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fe fbd4 	bl	8003418 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e187      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d036      	beq.n	8004d04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <HAL_RCC_OscConfig+0x248>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fe fbb8 	bl	8003418 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cac:	f7fe fbb4 	bl	8003418 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e167      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <HAL_RCC_OscConfig+0x240>)
 8004cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x200>
 8004cca:	e01b      	b.n	8004d04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ccc:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <HAL_RCC_OscConfig+0x248>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd2:	f7fe fba1 	bl	8003418 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd8:	e00e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fe fb9d 	bl	8003418 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d907      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e150      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	42470000 	.word	0x42470000
 8004cf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	4b88      	ldr	r3, [pc, #544]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ea      	bne.n	8004cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8097 	beq.w	8004e40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d16:	4b81      	ldr	r3, [pc, #516]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10f      	bne.n	8004d42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	4b7d      	ldr	r3, [pc, #500]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d32:	4b7a      	ldr	r3, [pc, #488]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d42:	4b77      	ldr	r3, [pc, #476]	@ (8004f20 <HAL_RCC_OscConfig+0x474>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d118      	bne.n	8004d80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d4e:	4b74      	ldr	r3, [pc, #464]	@ (8004f20 <HAL_RCC_OscConfig+0x474>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a73      	ldr	r2, [pc, #460]	@ (8004f20 <HAL_RCC_OscConfig+0x474>)
 8004d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5a:	f7fe fb5d 	bl	8003418 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d62:	f7fe fb59 	bl	8003418 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e10c      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d74:	4b6a      	ldr	r3, [pc, #424]	@ (8004f20 <HAL_RCC_OscConfig+0x474>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d106      	bne.n	8004d96 <HAL_RCC_OscConfig+0x2ea>
 8004d88:	4b64      	ldr	r3, [pc, #400]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8c:	4a63      	ldr	r2, [pc, #396]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d94:	e01c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x324>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x30c>
 8004d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004daa:	4b5c      	ldr	r3, [pc, #368]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	4a5b      	ldr	r2, [pc, #364]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCC_OscConfig+0x324>
 8004db8:	4b58      	ldr	r3, [pc, #352]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbc:	4a57      	ldr	r2, [pc, #348]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004dbe:	f023 0301 	bic.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc4:	4b55      	ldr	r3, [pc, #340]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc8:	4a54      	ldr	r2, [pc, #336]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004dca:	f023 0304 	bic.w	r3, r3, #4
 8004dce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d015      	beq.n	8004e04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7fe fb1e 	bl	8003418 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dde:	e00a      	b.n	8004df6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fe fb1a 	bl	8003418 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e0cb      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df6:	4b49      	ldr	r3, [pc, #292]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ee      	beq.n	8004de0 <HAL_RCC_OscConfig+0x334>
 8004e02:	e014      	b.n	8004e2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e04:	f7fe fb08 	bl	8003418 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e0c:	f7fe fb04 	bl	8003418 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0b5      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e22:	4b3e      	ldr	r3, [pc, #248]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1ee      	bne.n	8004e0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d105      	bne.n	8004e40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e34:	4b39      	ldr	r3, [pc, #228]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	4a38      	ldr	r2, [pc, #224]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80a1 	beq.w	8004f8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e4a:	4b34      	ldr	r3, [pc, #208]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d05c      	beq.n	8004f10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d141      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5e:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <HAL_RCC_OscConfig+0x478>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fe fad8 	bl	8003418 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fe fad4 	bl	8003418 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e087      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	4b27      	ldr	r3, [pc, #156]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	019b      	lsls	r3, r3, #6
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	085b      	lsrs	r3, r3, #1
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	041b      	lsls	r3, r3, #16
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	061b      	lsls	r3, r3, #24
 8004eae:	491b      	ldr	r1, [pc, #108]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f24 <HAL_RCC_OscConfig+0x478>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eba:	f7fe faad 	bl	8003418 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7fe faa9 	bl	8003418 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e05c      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed4:	4b11      	ldr	r3, [pc, #68]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x416>
 8004ee0:	e054      	b.n	8004f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee2:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <HAL_RCC_OscConfig+0x478>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fe fa96 	bl	8003418 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fe fa92 	bl	8003418 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e045      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f02:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <HAL_RCC_OscConfig+0x470>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x444>
 8004f0e:	e03d      	b.n	8004f8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e038      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40007000 	.word	0x40007000
 8004f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f28:	4b1b      	ldr	r3, [pc, #108]	@ (8004f98 <HAL_RCC_OscConfig+0x4ec>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d028      	beq.n	8004f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d121      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d11a      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d111      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	3b01      	subs	r3, #1
 8004f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800

08004f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0cc      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b68      	ldr	r3, [pc, #416]	@ (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d90c      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b65      	ldr	r3, [pc, #404]	@ (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b63      	ldr	r3, [pc, #396]	@ (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0b8      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d020      	beq.n	8005026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff0:	4b59      	ldr	r3, [pc, #356]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	4a58      	ldr	r2, [pc, #352]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005008:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4a52      	ldr	r2, [pc, #328]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005014:	4b50      	ldr	r3, [pc, #320]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	494d      	ldr	r1, [pc, #308]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d044      	beq.n	80050bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	4b47      	ldr	r3, [pc, #284]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d119      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07f      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d003      	beq.n	800505a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005056:	2b03      	cmp	r3, #3
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505a:	4b3f      	ldr	r3, [pc, #252]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e06f      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506a:	4b3b      	ldr	r3, [pc, #236]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e067      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507a:	4b37      	ldr	r3, [pc, #220]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4934      	ldr	r1, [pc, #208]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	4313      	orrs	r3, r2
 800508a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800508c:	f7fe f9c4 	bl	8003418 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	e00a      	b.n	80050aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fe f9c0 	bl	8003418 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e04f      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 020c 	and.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1eb      	bne.n	8005094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050bc:	4b25      	ldr	r3, [pc, #148]	@ (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d20c      	bcs.n	80050e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b22      	ldr	r3, [pc, #136]	@ (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d2:	4b20      	ldr	r3, [pc, #128]	@ (8005154 <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e032      	b.n	800514a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f0:	4b19      	ldr	r3, [pc, #100]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4916      	ldr	r1, [pc, #88]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800510e:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	490e      	ldr	r1, [pc, #56]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005122:	f000 f821 	bl	8005168 <HAL_RCC_GetSysClockFreq>
 8005126:	4602      	mov	r2, r0
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	490a      	ldr	r1, [pc, #40]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8005134:	5ccb      	ldrb	r3, [r1, r3]
 8005136:	fa22 f303 	lsr.w	r3, r2, r3
 800513a:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800513e:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f924 	bl	8003390 <HAL_InitTick>

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023c00 	.word	0x40023c00
 8005158:	40023800 	.word	0x40023800
 800515c:	0800bd68 	.word	0x0800bd68
 8005160:	20000008 	.word	0x20000008
 8005164:	2000000c 	.word	0x2000000c

08005168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b094      	sub	sp, #80	@ 0x50
 800516e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	647b      	str	r3, [r7, #68]	@ 0x44
 8005174:	2300      	movs	r3, #0
 8005176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005178:	2300      	movs	r3, #0
 800517a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005180:	4b79      	ldr	r3, [pc, #484]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x200>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	2b08      	cmp	r3, #8
 800518a:	d00d      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0x40>
 800518c:	2b08      	cmp	r3, #8
 800518e:	f200 80e1 	bhi.w	8005354 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_RCC_GetSysClockFreq+0x34>
 8005196:	2b04      	cmp	r3, #4
 8005198:	d003      	beq.n	80051a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800519a:	e0db      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b73      	ldr	r3, [pc, #460]	@ (800536c <HAL_RCC_GetSysClockFreq+0x204>)
 800519e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80051a0:	e0db      	b.n	800535a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a2:	4b73      	ldr	r3, [pc, #460]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x208>)
 80051a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051a6:	e0d8      	b.n	800535a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x200>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d063      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051be:	4b6a      	ldr	r3, [pc, #424]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	099b      	lsrs	r3, r3, #6
 80051c4:	2200      	movs	r2, #0
 80051c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	f04f 0000 	mov.w	r0, #0
 80051e2:	f04f 0100 	mov.w	r1, #0
 80051e6:	0159      	lsls	r1, r3, #5
 80051e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ec:	0150      	lsls	r0, r2, #5
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4621      	mov	r1, r4
 80051f4:	1a51      	subs	r1, r2, r1
 80051f6:	6139      	str	r1, [r7, #16]
 80051f8:	4629      	mov	r1, r5
 80051fa:	eb63 0301 	sbc.w	r3, r3, r1
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800520c:	4659      	mov	r1, fp
 800520e:	018b      	lsls	r3, r1, #6
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005216:	4651      	mov	r1, sl
 8005218:	018a      	lsls	r2, r1, #6
 800521a:	4651      	mov	r1, sl
 800521c:	ebb2 0801 	subs.w	r8, r2, r1
 8005220:	4659      	mov	r1, fp
 8005222:	eb63 0901 	sbc.w	r9, r3, r1
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523a:	4690      	mov	r8, r2
 800523c:	4699      	mov	r9, r3
 800523e:	4623      	mov	r3, r4
 8005240:	eb18 0303 	adds.w	r3, r8, r3
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	462b      	mov	r3, r5
 8005248:	eb49 0303 	adc.w	r3, r9, r3
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800525a:	4629      	mov	r1, r5
 800525c:	024b      	lsls	r3, r1, #9
 800525e:	4621      	mov	r1, r4
 8005260:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005264:	4621      	mov	r1, r4
 8005266:	024a      	lsls	r2, r1, #9
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800526e:	2200      	movs	r2, #0
 8005270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005278:	f7fb f802 	bl	8000280 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4613      	mov	r3, r2
 8005282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005284:	e058      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005286:	4b38      	ldr	r3, [pc, #224]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x200>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	099b      	lsrs	r3, r3, #6
 800528c:	2200      	movs	r2, #0
 800528e:	4618      	mov	r0, r3
 8005290:	4611      	mov	r1, r2
 8005292:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	2300      	movs	r3, #0
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
 800529c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	0159      	lsls	r1, r3, #5
 80052ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052b2:	0150      	lsls	r0, r2, #5
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4641      	mov	r1, r8
 80052ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80052be:	4649      	mov	r1, r9
 80052c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052d8:	ebb2 040a 	subs.w	r4, r2, sl
 80052dc:	eb63 050b 	sbc.w	r5, r3, fp
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	00eb      	lsls	r3, r5, #3
 80052ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ee:	00e2      	lsls	r2, r4, #3
 80052f0:	4614      	mov	r4, r2
 80052f2:	461d      	mov	r5, r3
 80052f4:	4643      	mov	r3, r8
 80052f6:	18e3      	adds	r3, r4, r3
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	464b      	mov	r3, r9
 80052fc:	eb45 0303 	adc.w	r3, r5, r3
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800530e:	4629      	mov	r1, r5
 8005310:	028b      	lsls	r3, r1, #10
 8005312:	4621      	mov	r1, r4
 8005314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005318:	4621      	mov	r1, r4
 800531a:	028a      	lsls	r2, r1, #10
 800531c:	4610      	mov	r0, r2
 800531e:	4619      	mov	r1, r3
 8005320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005322:	2200      	movs	r2, #0
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	61fa      	str	r2, [r7, #28]
 8005328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800532c:	f7fa ffa8 	bl	8000280 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4613      	mov	r3, r2
 8005336:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005338:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x200>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	3301      	adds	r3, #1
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005348:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800534a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005352:	e002      	b.n	800535a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005354:	4b05      	ldr	r3, [pc, #20]	@ (800536c <HAL_RCC_GetSysClockFreq+0x204>)
 8005356:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800535a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800535c:	4618      	mov	r0, r3
 800535e:	3750      	adds	r7, #80	@ 0x50
 8005360:	46bd      	mov	sp, r7
 8005362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	00f42400 	.word	0x00f42400
 8005370:	007a1200 	.word	0x007a1200

08005374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b03      	ldr	r3, [pc, #12]	@ (8005388 <HAL_RCC_GetHCLKFreq+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000008 	.word	0x20000008

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005390:	f7ff fff0 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b05      	ldr	r3, [pc, #20]	@ (80053ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0a9b      	lsrs	r3, r3, #10
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4903      	ldr	r1, [pc, #12]	@ (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	0800bd78 	.word	0x0800bd78

080053b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053b8:	f7ff ffdc 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b05      	ldr	r3, [pc, #20]	@ (80053d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0b5b      	lsrs	r3, r3, #13
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4903      	ldr	r1, [pc, #12]	@ (80053d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40023800 	.word	0x40023800
 80053d8:	0800bd78 	.word	0x0800bd78

080053dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e07b      	b.n	80054e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d108      	bne.n	8005408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053fe:	d009      	beq.n	8005414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	61da      	str	r2, [r3, #28]
 8005406:	e005      	b.n	8005414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fd fc86 	bl	8002d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005498:	ea42 0103 	orr.w	r1, r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	f003 0104 	and.w	r1, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	f003 0210 	and.w	r2, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b088      	sub	sp, #32
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_SPI_Transmit+0x22>
 800550c:	2302      	movs	r3, #2
 800550e:	e126      	b.n	800575e <HAL_SPI_Transmit+0x270>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005518:	f7fd ff7e 	bl	8003418 <HAL_GetTick>
 800551c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	d002      	beq.n	8005534 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005532:	e10b      	b.n	800574c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_SPI_Transmit+0x52>
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005544:	e102      	b.n	800574c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2203      	movs	r2, #3
 800554a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800558c:	d10f      	bne.n	80055ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800559c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b8:	2b40      	cmp	r3, #64	@ 0x40
 80055ba:	d007      	beq.n	80055cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d4:	d14b      	bne.n	800566e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0xf6>
 80055de:	8afb      	ldrh	r3, [r7, #22]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d13e      	bne.n	8005662 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005608:	e02b      	b.n	8005662 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	d112      	bne.n	800563e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	1c9a      	adds	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800563c:	e011      	b.n	8005662 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563e:	f7fd feeb 	bl	8003418 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d803      	bhi.n	8005656 <HAL_SPI_Transmit+0x168>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d102      	bne.n	800565c <HAL_SPI_Transmit+0x16e>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005660:	e074      	b.n	800574c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1ce      	bne.n	800560a <HAL_SPI_Transmit+0x11c>
 800566c:	e04c      	b.n	8005708 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_SPI_Transmit+0x18e>
 8005676:	8afb      	ldrh	r3, [r7, #22]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d140      	bne.n	80056fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	7812      	ldrb	r2, [r2, #0]
 8005688:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056a2:	e02c      	b.n	80056fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d113      	bne.n	80056da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056d8:	e011      	b.n	80056fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056da:	f7fd fe9d 	bl	8003418 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d803      	bhi.n	80056f2 <HAL_SPI_Transmit+0x204>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Transmit+0x20a>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056fc:	e026      	b.n	800574c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1cd      	bne.n	80056a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fbcb 	bl	8005ea8 <SPI_EndRxTxTransaction>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e000      	b.n	800574c <HAL_SPI_Transmit+0x25e>
  }

error:
 800574a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800575c:	7ffb      	ldrb	r3, [r7, #31]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b088      	sub	sp, #32
 800576a:	af02      	add	r7, sp, #8
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005782:	d112      	bne.n	80057aa <HAL_SPI_Receive+0x44>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10e      	bne.n	80057aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2204      	movs	r2, #4
 8005790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	4613      	mov	r3, r2
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f8f1 	bl	8005988 <HAL_SPI_TransmitReceive>
 80057a6:	4603      	mov	r3, r0
 80057a8:	e0ea      	b.n	8005980 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_SPI_Receive+0x52>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0e3      	b.n	8005980 <HAL_SPI_Receive+0x21a>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c0:	f7fd fe2a 	bl	8003418 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d002      	beq.n	80057d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d6:	e0ca      	b.n	800596e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_SPI_Receive+0x7e>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e8:	e0c1      	b.n	800596e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2204      	movs	r2, #4
 80057ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005830:	d10f      	bne.n	8005852 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005840:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005850:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b40      	cmp	r3, #64	@ 0x40
 800585e:	d007      	beq.n	8005870 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800586e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d162      	bne.n	800593e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005878:	e02e      	b.n	80058d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b01      	cmp	r3, #1
 8005886:	d115      	bne.n	80058b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f103 020c 	add.w	r2, r3, #12
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	7812      	ldrb	r2, [r2, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058b2:	e011      	b.n	80058d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b4:	f7fd fdb0 	bl	8003418 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d803      	bhi.n	80058cc <HAL_SPI_Receive+0x166>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d102      	bne.n	80058d2 <HAL_SPI_Receive+0x16c>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058d6:	e04a      	b.n	800596e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1cb      	bne.n	800587a <HAL_SPI_Receive+0x114>
 80058e2:	e031      	b.n	8005948 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d113      	bne.n	800591a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fc:	b292      	uxth	r2, r2
 80058fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	1c9a      	adds	r2, r3, #2
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005918:	e011      	b.n	800593e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591a:	f7fd fd7d 	bl	8003418 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d803      	bhi.n	8005932 <HAL_SPI_Receive+0x1cc>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d102      	bne.n	8005938 <HAL_SPI_Receive+0x1d2>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800593c:	e017      	b.n	800596e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1cd      	bne.n	80058e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fa45 	bl	8005ddc <SPI_EndRxTransaction>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
 800596a:	e000      	b.n	800596e <HAL_SPI_Receive+0x208>
  }

error :
 800596c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08c      	sub	sp, #48	@ 0x30
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005996:	2301      	movs	r3, #1
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x26>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e18a      	b.n	8005cc4 <HAL_SPI_TransmitReceive+0x33c>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059b6:	f7fd fd2f 	bl	8003418 <HAL_GetTick>
 80059ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d00f      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x70>
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059de:	d107      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x68>
 80059e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d003      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80059f6:	e15b      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x82>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x82>
 8005a04:	887b      	ldrh	r3, [r7, #2]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a10:	e14e      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d003      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2205      	movs	r2, #5
 8005a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	887a      	ldrh	r2, [r7, #2]
 8005a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	887a      	ldrh	r2, [r7, #2]
 8005a3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	887a      	ldrh	r2, [r7, #2]
 8005a4e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d007      	beq.n	8005a7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a82:	d178      	bne.n	8005b76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x10a>
 8005a8c:	8b7b      	ldrh	r3, [r7, #26]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d166      	bne.n	8005b60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	881a      	ldrh	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa2:	1c9a      	adds	r2, r3, #2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab6:	e053      	b.n	8005b60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d11b      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x176>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d016      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x176>
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d113      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	881a      	ldrh	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae6:	1c9a      	adds	r2, r3, #2
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d119      	bne.n	8005b40 <HAL_SPI_TransmitReceive+0x1b8>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d014      	beq.n	8005b40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b20:	b292      	uxth	r2, r2
 8005b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b40:	f7fd fc6a 	bl	8003418 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d807      	bhi.n	8005b60 <HAL_SPI_TransmitReceive+0x1d8>
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d003      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005b5e:	e0a7      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1a6      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x130>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1a1      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x130>
 8005b74:	e07c      	b.n	8005c70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_SPI_TransmitReceive+0x1fc>
 8005b7e:	8b7b      	ldrh	r3, [r7, #26]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d16b      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005baa:	e057      	b.n	8005c5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d11c      	bne.n	8005bf4 <HAL_SPI_TransmitReceive+0x26c>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0x26c>
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d114      	bne.n	8005bf4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	330c      	adds	r3, #12
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d119      	bne.n	8005c36 <HAL_SPI_TransmitReceive+0x2ae>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d014      	beq.n	8005c36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c32:	2301      	movs	r3, #1
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c36:	f7fd fbef 	bl	8003418 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d803      	bhi.n	8005c4e <HAL_SPI_TransmitReceive+0x2c6>
 8005c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d102      	bne.n	8005c54 <HAL_SPI_TransmitReceive+0x2cc>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005c5a:	e029      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1a2      	bne.n	8005bac <HAL_SPI_TransmitReceive+0x224>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d19d      	bne.n	8005bac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f917 	bl	8005ea8 <SPI_EndRxTxTransaction>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d006      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005c8c:	e010      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	e000      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005cae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3730      	adds	r7, #48	@ 0x30
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cdc:	f7fd fb9c 	bl	8003418 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	4413      	add	r3, r2
 8005cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cec:	f7fd fb94 	bl	8003418 <HAL_GetTick>
 8005cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cf2:	4b39      	ldr	r3, [pc, #228]	@ (8005dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	015b      	lsls	r3, r3, #5
 8005cf8:	0d1b      	lsrs	r3, r3, #20
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d02:	e054      	b.n	8005dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d050      	beq.n	8005dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d0c:	f7fd fb84 	bl	8003418 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d902      	bls.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d13d      	bne.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d3a:	d111      	bne.n	8005d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d44:	d004      	beq.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4e:	d107      	bne.n	8005d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d68:	d10f      	bne.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e017      	b.n	8005dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d19b      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000008 	.word	0x20000008

08005ddc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005df0:	d111      	bne.n	8005e16 <SPI_EndRxTransaction+0x3a>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dfa:	d004      	beq.n	8005e06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e04:	d107      	bne.n	8005e16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e1e:	d12a      	bne.n	8005e76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e28:	d012      	beq.n	8005e50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2180      	movs	r1, #128	@ 0x80
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ff49 	bl	8005ccc <SPI_WaitFlagStateUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02d      	beq.n	8005e9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e026      	b.n	8005e9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2200      	movs	r2, #0
 8005e58:	2101      	movs	r1, #1
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff ff36 	bl	8005ccc <SPI_WaitFlagStateUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01a      	beq.n	8005e9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e013      	b.n	8005e9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2101      	movs	r1, #1
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff ff23 	bl	8005ccc <SPI_WaitFlagStateUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e000      	b.n	8005e9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f24 <SPI_EndRxTxTransaction+0x7c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f28 <SPI_EndRxTxTransaction+0x80>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	0d5b      	lsrs	r3, r3, #21
 8005ec0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ed2:	d112      	bne.n	8005efa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	2180      	movs	r1, #128	@ 0x80
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff fef4 	bl	8005ccc <SPI_WaitFlagStateUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e00f      	b.n	8005f1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f10:	2b80      	cmp	r3, #128	@ 0x80
 8005f12:	d0f2      	beq.n	8005efa <SPI_EndRxTxTransaction+0x52>
 8005f14:	e000      	b.n	8005f18 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f16:	bf00      	nop
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000008 	.word	0x20000008
 8005f28:	165e9f81 	.word	0x165e9f81

08005f2c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e034      	b.n	8005fac <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7fa fcce 	bl	80008f8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3308      	adds	r3, #8
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f001 fd1a 	bl	80079a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	461a      	mov	r2, r3
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	f001 fd64 	bl	8007a44 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6858      	ldr	r0, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	f001 fd99 	bl	8007ac0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	6892      	ldr	r2, [r2, #8]
 8005f96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6892      	ldr	r2, [r2, #8]
 8005fa2:	f041 0101 	orr.w	r1, r1, #1
 8005fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e041      	b.n	800604a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fd f866 	bl	80030ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f000 fa96 	bl	8006524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e04e      	b.n	800610a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a23      	ldr	r2, [pc, #140]	@ (8006118 <HAL_TIM_Base_Start_IT+0xc4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006096:	d01d      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <HAL_TIM_Base_Start_IT+0xc8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006120 <HAL_TIM_Base_Start_IT+0xcc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_TIM_Base_Start_IT+0xd0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006128 <HAL_TIM_Base_Start_IT+0xd4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a19      	ldr	r2, [pc, #100]	@ (800612c <HAL_TIM_Base_Start_IT+0xd8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a18      	ldr	r2, [pc, #96]	@ (8006130 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d111      	bne.n	80060f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d010      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	e007      	b.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40001800 	.word	0x40001800

08006134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b02      	cmp	r3, #2
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0202 	mvn.w	r2, #2
 8006160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9b5 	bl	80064e6 <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9a7 	bl	80064d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f9b8 	bl	80064fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d122      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d11b      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0204 	mvn.w	r2, #4
 80061b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f98b 	bl	80064e6 <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f97d 	bl	80064d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f98e 	bl	80064fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0208 	mvn.w	r2, #8
 8006208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2204      	movs	r2, #4
 800620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f961 	bl	80064e6 <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f953 	bl	80064d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f964 	bl	80064fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b10      	cmp	r3, #16
 8006244:	d122      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b10      	cmp	r3, #16
 8006252:	d11b      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0210 	mvn.w	r2, #16
 800625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2208      	movs	r2, #8
 8006262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f937 	bl	80064e6 <HAL_TIM_IC_CaptureCallback>
 8006278:	e005      	b.n	8006286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f929 	bl	80064d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f93a 	bl	80064fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10e      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d107      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0201 	mvn.w	r2, #1
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc fce4 	bl	8002c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c2:	2b80      	cmp	r3, #128	@ 0x80
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d0:	2b80      	cmp	r3, #128	@ 0x80
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fae0 	bl	80068a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ee:	2b40      	cmp	r3, #64	@ 0x40
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062fc:	2b40      	cmp	r3, #64	@ 0x40
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f8ff 	bl	800650e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0220 	mvn.w	r2, #32
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 faaa 	bl	8006890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_TIM_ConfigClockSource+0x1c>
 800635c:	2302      	movs	r3, #2
 800635e:	e0b4      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x186>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800637e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006398:	d03e      	beq.n	8006418 <HAL_TIM_ConfigClockSource+0xd4>
 800639a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800639e:	f200 8087 	bhi.w	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a6:	f000 8086 	beq.w	80064b6 <HAL_TIM_ConfigClockSource+0x172>
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ae:	d87f      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b70      	cmp	r3, #112	@ 0x70
 80063b2:	d01a      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xa6>
 80063b4:	2b70      	cmp	r3, #112	@ 0x70
 80063b6:	d87b      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b60      	cmp	r3, #96	@ 0x60
 80063ba:	d050      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x11a>
 80063bc:	2b60      	cmp	r3, #96	@ 0x60
 80063be:	d877      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b50      	cmp	r3, #80	@ 0x50
 80063c2:	d03c      	beq.n	800643e <HAL_TIM_ConfigClockSource+0xfa>
 80063c4:	2b50      	cmp	r3, #80	@ 0x50
 80063c6:	d873      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b40      	cmp	r3, #64	@ 0x40
 80063ca:	d058      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x13a>
 80063cc:	2b40      	cmp	r3, #64	@ 0x40
 80063ce:	d86f      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b30      	cmp	r3, #48	@ 0x30
 80063d2:	d064      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x15a>
 80063d4:	2b30      	cmp	r3, #48	@ 0x30
 80063d6:	d86b      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d060      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x15a>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d867      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d05c      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x15a>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d05a      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x15a>
 80063e8:	e062      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6899      	ldr	r1, [r3, #8]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f000 f9ad 	bl	8006758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800640c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	609a      	str	r2, [r3, #8]
      break;
 8006416:	e04f      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6899      	ldr	r1, [r3, #8]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f000 f996 	bl	8006758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800643a:	609a      	str	r2, [r3, #8]
      break;
 800643c:	e03c      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 f90a 	bl	8006664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2150      	movs	r1, #80	@ 0x50
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f963 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 800645c:	e02c      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	f000 f929 	bl	80066c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2160      	movs	r1, #96	@ 0x60
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f953 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 800647c:	e01c      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	461a      	mov	r2, r3
 800648c:	f000 f8ea 	bl	8006664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2140      	movs	r1, #64	@ 0x40
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f943 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 800649c:	e00c      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f000 f93a 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 80064ae:	e003      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
      break;
 80064b4:	e000      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a40      	ldr	r2, [pc, #256]	@ (8006638 <TIM_Base_SetConfig+0x114>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006542:	d00f      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a3d      	ldr	r2, [pc, #244]	@ (800663c <TIM_Base_SetConfig+0x118>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a3c      	ldr	r2, [pc, #240]	@ (8006640 <TIM_Base_SetConfig+0x11c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3b      	ldr	r2, [pc, #236]	@ (8006644 <TIM_Base_SetConfig+0x120>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a3a      	ldr	r2, [pc, #232]	@ (8006648 <TIM_Base_SetConfig+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d108      	bne.n	8006576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2f      	ldr	r2, [pc, #188]	@ (8006638 <TIM_Base_SetConfig+0x114>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02b      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006584:	d027      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2c      	ldr	r2, [pc, #176]	@ (800663c <TIM_Base_SetConfig+0x118>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d023      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2b      	ldr	r2, [pc, #172]	@ (8006640 <TIM_Base_SetConfig+0x11c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01f      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2a      	ldr	r2, [pc, #168]	@ (8006644 <TIM_Base_SetConfig+0x120>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d01b      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a29      	ldr	r2, [pc, #164]	@ (8006648 <TIM_Base_SetConfig+0x124>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d017      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a28      	ldr	r2, [pc, #160]	@ (800664c <TIM_Base_SetConfig+0x128>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a27      	ldr	r2, [pc, #156]	@ (8006650 <TIM_Base_SetConfig+0x12c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00f      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a26      	ldr	r2, [pc, #152]	@ (8006654 <TIM_Base_SetConfig+0x130>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00b      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a25      	ldr	r2, [pc, #148]	@ (8006658 <TIM_Base_SetConfig+0x134>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d007      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a24      	ldr	r2, [pc, #144]	@ (800665c <TIM_Base_SetConfig+0x138>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a23      	ldr	r2, [pc, #140]	@ (8006660 <TIM_Base_SetConfig+0x13c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d108      	bne.n	80065e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a0a      	ldr	r2, [pc, #40]	@ (8006638 <TIM_Base_SetConfig+0x114>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0xf8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a0c      	ldr	r2, [pc, #48]	@ (8006648 <TIM_Base_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d103      	bne.n	8006624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	615a      	str	r2, [r3, #20]
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40010400 	.word	0x40010400
 800664c:	40014000 	.word	0x40014000
 8006650:	40014400 	.word	0x40014400
 8006654:	40014800 	.word	0x40014800
 8006658:	40001800 	.word	0x40001800
 800665c:	40001c00 	.word	0x40001c00
 8006660:	40002000 	.word	0x40002000

08006664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f023 0201 	bic.w	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800668e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f023 030a 	bic.w	r3, r3, #10
 80066a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0210 	bic.w	r2, r3, #16
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	f043 0307 	orr.w	r3, r3, #7
 8006744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	021a      	lsls	r2, r3, #8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	431a      	orrs	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e05a      	b.n	8006866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a21      	ldr	r2, [pc, #132]	@ (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d022      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fc:	d01d      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1d      	ldr	r2, [pc, #116]	@ (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d018      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1b      	ldr	r2, [pc, #108]	@ (800687c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d013      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a1a      	ldr	r2, [pc, #104]	@ (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00e      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a18      	ldr	r2, [pc, #96]	@ (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a17      	ldr	r2, [pc, #92]	@ (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a15      	ldr	r2, [pc, #84]	@ (800688c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d10c      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	4313      	orrs	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40010400 	.word	0x40010400
 8006888:	40014000 	.word	0x40014000
 800688c:	40001800 	.word	0x40001800

08006890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e03f      	b.n	800694a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fc fc7c 	bl	80031dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2224      	movs	r2, #36	@ 0x24
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fddb 	bl	80074b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b08a      	sub	sp, #40	@ 0x28
 8006956:	af02      	add	r7, sp, #8
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b20      	cmp	r3, #32
 8006970:	d17c      	bne.n	8006a6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <HAL_UART_Transmit+0x2c>
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e075      	b.n	8006a6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_UART_Transmit+0x3e>
 800698c:	2302      	movs	r3, #2
 800698e:	e06e      	b.n	8006a6e <HAL_UART_Transmit+0x11c>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2221      	movs	r2, #33	@ 0x21
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069a6:	f7fc fd37 	bl	8003418 <HAL_GetTick>
 80069aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	88fa      	ldrh	r2, [r7, #6]
 80069b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c0:	d108      	bne.n	80069d4 <HAL_UART_Transmit+0x82>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d104      	bne.n	80069d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	e003      	b.n	80069dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80069e4:	e02a      	b.n	8006a3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2180      	movs	r1, #128	@ 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fb1f 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e036      	b.n	8006a6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	3302      	adds	r3, #2
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e007      	b.n	8006a2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1cf      	bne.n	80069e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2140      	movs	r1, #64	@ 0x40
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 faef 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e006      	b.n	8006a6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e000      	b.n	8006a6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
  }
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	4613      	mov	r3, r2
 8006a82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d11d      	bne.n	8006acc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_UART_Receive_IT+0x26>
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e016      	b.n	8006ace <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Receive_IT+0x38>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e00f      	b.n	8006ace <HAL_UART_Receive_IT+0x58>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fb24 	bl	8007110 <UART_Start_Receive_IT>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	e000      	b.n	8006ace <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b0ba      	sub	sp, #232	@ 0xe8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10f      	bne.n	8006b3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <HAL_UART_IRQHandler+0x66>
 8006b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fc03 	bl	8007342 <UART_Receive_IT>
      return;
 8006b3c:	e256      	b.n	8006fec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 80de 	beq.w	8006d04 <HAL_UART_IRQHandler+0x22c>
 8006b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 80d1 	beq.w	8006d04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <HAL_UART_IRQHandler+0xae>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	f043 0201 	orr.w	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <HAL_UART_IRQHandler+0xd2>
 8006b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba2:	f043 0202 	orr.w	r2, r3, #2
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00b      	beq.n	8006bce <HAL_UART_IRQHandler+0xf6>
 8006bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc6:	f043 0204 	orr.w	r2, r3, #4
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d011      	beq.n	8006bfe <HAL_UART_IRQHandler+0x126>
 8006bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	f043 0208 	orr.w	r2, r3, #8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 81ed 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_UART_IRQHandler+0x14e>
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fb8e 	bl	8007342 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c30:	2b40      	cmp	r3, #64	@ 0x40
 8006c32:	bf0c      	ite	eq
 8006c34:	2301      	moveq	r3, #1
 8006c36:	2300      	movne	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <HAL_UART_IRQHandler+0x17a>
 8006c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d04f      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa96 	bl	8007184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c62:	2b40      	cmp	r3, #64	@ 0x40
 8006c64:	d141      	bne.n	8006cea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3314      	adds	r3, #20
 8006c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1d9      	bne.n	8006c66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d013      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8006eb4 <HAL_UART_IRQHandler+0x3dc>)
 8006cc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fc fd57 	bl	800377a <HAL_DMA_Abort_IT>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	e00e      	b.n	8006d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f990 	bl	8007008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	e00a      	b.n	8006d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f98c 	bl	8007008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf0:	e006      	b.n	8006d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f988 	bl	8007008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006cfe:	e170      	b.n	8006fe2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d00:	bf00      	nop
    return;
 8006d02:	e16e      	b.n	8006fe2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	f040 814a 	bne.w	8006fa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 8143 	beq.w	8006fa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 813c 	beq.w	8006fa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60bb      	str	r3, [r7, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	f040 80b4 	bne.w	8006eb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8140 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	f080 8139 	bcs.w	8006fe6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d86:	f000 8088 	beq.w	8006e9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006db6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d9      	bne.n	8006d8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3314      	adds	r3, #20
 8006df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e1      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3314      	adds	r3, #20
 8006e18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3314      	adds	r3, #20
 8006e32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e3      	bne.n	8006e12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	330c      	adds	r3, #12
 8006e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e6a:	f023 0310 	bic.w	r3, r3, #16
 8006e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e3      	bne.n	8006e58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fc fc00 	bl	800369a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8b6 	bl	800701c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eb0:	e099      	b.n	8006fe6 <HAL_UART_IRQHandler+0x50e>
 8006eb2:	bf00      	nop
 8006eb4:	0800724b 	.word	0x0800724b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 808b 	beq.w	8006fea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8086 	beq.w	8006fea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	330c      	adds	r3, #12
 8006efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f02:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e3      	bne.n	8006ede <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	623b      	str	r3, [r7, #32]
   return(result);
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e3      	bne.n	8006f16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0310 	bic.w	r3, r3, #16
 8006f72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f80:	61fa      	str	r2, [r7, #28]
 8006f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	69b9      	ldr	r1, [r7, #24]
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e3      	bne.n	8006f5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f83e 	bl	800701c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fa0:	e023      	b.n	8006fea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x4ea>
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f959 	bl	8007272 <UART_Transmit_IT>
    return;
 8006fc0:	e014      	b.n	8006fec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00e      	beq.n	8006fec <HAL_UART_IRQHandler+0x514>
 8006fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f999 	bl	8007312 <UART_EndTransmit_IT>
    return;
 8006fe0:	e004      	b.n	8006fec <HAL_UART_IRQHandler+0x514>
    return;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <HAL_UART_IRQHandler+0x514>
      return;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_UART_IRQHandler+0x514>
      return;
 8006fea:	bf00      	nop
  }
}
 8006fec:	37e8      	adds	r7, #232	@ 0xe8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop

08006ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b090      	sub	sp, #64	@ 0x40
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007044:	e050      	b.n	80070e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d04c      	beq.n	80070e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800704e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <UART_WaitOnFlagUntilTimeout+0x30>
 8007054:	f7fc f9e0 	bl	8003418 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007060:	429a      	cmp	r2, r3
 8007062:	d241      	bcs.n	80070e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007084:	637a      	str	r2, [r7, #52]	@ 0x34
 8007086:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800708a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e5      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3314      	adds	r3, #20
 800709e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	613b      	str	r3, [r7, #16]
   return(result);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3314      	adds	r3, #20
 80070b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070b8:	623a      	str	r2, [r7, #32]
 80070ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69f9      	ldr	r1, [r7, #28]
 80070be:	6a3a      	ldr	r2, [r7, #32]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e5      	bne.n	8007098 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e00f      	b.n	8007108 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4013      	ands	r3, r2
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	429a      	cmp	r2, r3
 8007104:	d09f      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3740      	adds	r7, #64	@ 0x40
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	88fa      	ldrh	r2, [r7, #6]
 800712e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2222      	movs	r2, #34	@ 0x22
 800713a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007154:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0201 	orr.w	r2, r2, #1
 8007164:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0220 	orr.w	r2, r2, #32
 8007174:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007184:	b480      	push	{r7}
 8007186:	b095      	sub	sp, #84	@ 0x54
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e5      	bne.n	800718c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3314      	adds	r3, #20
 80071c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f023 0301 	bic.w	r3, r3, #1
 80071d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3314      	adds	r3, #20
 80071de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e5      	bne.n	80071c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d119      	bne.n	8007230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60bb      	str	r3, [r7, #8]
   return(result);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0310 	bic.w	r3, r3, #16
 8007212:	647b      	str	r3, [r7, #68]	@ 0x44
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	330c      	adds	r3, #12
 800721a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800721c:	61ba      	str	r2, [r7, #24]
 800721e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6979      	ldr	r1, [r7, #20]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	613b      	str	r3, [r7, #16]
   return(result);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e5      	bne.n	80071fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800723e:	bf00      	nop
 8007240:	3754      	adds	r7, #84	@ 0x54
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007256:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff fecf 	bl	8007008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b21      	cmp	r3, #33	@ 0x21
 8007284:	d13e      	bne.n	8007304 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728e:	d114      	bne.n	80072ba <UART_Transmit_IT+0x48>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d110      	bne.n	80072ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	1c9a      	adds	r2, r3, #2
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	621a      	str	r2, [r3, #32]
 80072b8:	e008      	b.n	80072cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6211      	str	r1, [r2, #32]
 80072c4:	781a      	ldrb	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4619      	mov	r1, r3
 80072da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10f      	bne.n	8007300 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
  }
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007328:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff fe5e 	bl	8006ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b08c      	sub	sp, #48	@ 0x30
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b22      	cmp	r3, #34	@ 0x22
 8007354:	f040 80ab 	bne.w	80074ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007360:	d117      	bne.n	8007392 <UART_Receive_IT+0x50>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d113      	bne.n	8007392 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007380:	b29a      	uxth	r2, r3
 8007382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007384:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007390:	e026      	b.n	80073e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007396:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a4:	d007      	beq.n	80073b6 <UART_Receive_IT+0x74>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <UART_Receive_IT+0x82>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e008      	b.n	80073d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	4619      	mov	r1, r3
 80073ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d15a      	bne.n	80074aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0220 	bic.w	r2, r2, #32
 8007402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695a      	ldr	r2, [r3, #20]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	2b01      	cmp	r3, #1
 8007432:	d135      	bne.n	80074a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	613b      	str	r3, [r7, #16]
   return(result);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f023 0310 	bic.w	r3, r3, #16
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800745a:	623a      	str	r2, [r7, #32]
 800745c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	69f9      	ldr	r1, [r7, #28]
 8007460:	6a3a      	ldr	r2, [r7, #32]
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	61bb      	str	r3, [r7, #24]
   return(result);
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0310 	and.w	r3, r3, #16
 8007478:	2b10      	cmp	r3, #16
 800747a:	d10a      	bne.n	8007492 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fdbf 	bl	800701c <HAL_UARTEx_RxEventCallback>
 800749e:	e002      	b.n	80074a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7fb fe51 	bl	8003148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e002      	b.n	80074b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074ae:	2302      	movs	r3, #2
  }
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3730      	adds	r7, #48	@ 0x30
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074bc:	b0c0      	sub	sp, #256	@ 0x100
 80074be:	af00      	add	r7, sp, #0
 80074c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d4:	68d9      	ldr	r1, [r3, #12]
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	ea40 0301 	orr.w	r3, r0, r1
 80074e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007510:	f021 010c 	bic.w	r1, r1, #12
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800751e:	430b      	orrs	r3, r1
 8007520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800752e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007532:	6999      	ldr	r1, [r3, #24]
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	ea40 0301 	orr.w	r3, r0, r1
 800753e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4b8f      	ldr	r3, [pc, #572]	@ (8007784 <UART_SetConfig+0x2cc>)
 8007548:	429a      	cmp	r2, r3
 800754a:	d005      	beq.n	8007558 <UART_SetConfig+0xa0>
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b8d      	ldr	r3, [pc, #564]	@ (8007788 <UART_SetConfig+0x2d0>)
 8007554:	429a      	cmp	r2, r3
 8007556:	d104      	bne.n	8007562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007558:	f7fd ff2c 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 800755c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007560:	e003      	b.n	800756a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007562:	f7fd ff13 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8007566:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007574:	f040 810c 	bne.w	8007790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800757c:	2200      	movs	r2, #0
 800757e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007582:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	1891      	adds	r1, r2, r2
 8007590:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007592:	415b      	adcs	r3, r3
 8007594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800759a:	4621      	mov	r1, r4
 800759c:	eb12 0801 	adds.w	r8, r2, r1
 80075a0:	4629      	mov	r1, r5
 80075a2:	eb43 0901 	adc.w	r9, r3, r1
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	f04f 0300 	mov.w	r3, #0
 80075ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075ba:	4690      	mov	r8, r2
 80075bc:	4699      	mov	r9, r3
 80075be:	4623      	mov	r3, r4
 80075c0:	eb18 0303 	adds.w	r3, r8, r3
 80075c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075c8:	462b      	mov	r3, r5
 80075ca:	eb49 0303 	adc.w	r3, r9, r3
 80075ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075e6:	460b      	mov	r3, r1
 80075e8:	18db      	adds	r3, r3, r3
 80075ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80075ec:	4613      	mov	r3, r2
 80075ee:	eb42 0303 	adc.w	r3, r2, r3
 80075f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075fc:	f7f8 fe40 	bl	8000280 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4b61      	ldr	r3, [pc, #388]	@ (800778c <UART_SetConfig+0x2d4>)
 8007606:	fba3 2302 	umull	r2, r3, r3, r2
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	011c      	lsls	r4, r3, #4
 800760e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007612:	2200      	movs	r2, #0
 8007614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007618:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800761c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007620:	4642      	mov	r2, r8
 8007622:	464b      	mov	r3, r9
 8007624:	1891      	adds	r1, r2, r2
 8007626:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007628:	415b      	adcs	r3, r3
 800762a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800762c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007630:	4641      	mov	r1, r8
 8007632:	eb12 0a01 	adds.w	sl, r2, r1
 8007636:	4649      	mov	r1, r9
 8007638:	eb43 0b01 	adc.w	fp, r3, r1
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800764c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007650:	4692      	mov	sl, r2
 8007652:	469b      	mov	fp, r3
 8007654:	4643      	mov	r3, r8
 8007656:	eb1a 0303 	adds.w	r3, sl, r3
 800765a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800765e:	464b      	mov	r3, r9
 8007660:	eb4b 0303 	adc.w	r3, fp, r3
 8007664:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007674:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800767c:	460b      	mov	r3, r1
 800767e:	18db      	adds	r3, r3, r3
 8007680:	643b      	str	r3, [r7, #64]	@ 0x40
 8007682:	4613      	mov	r3, r2
 8007684:	eb42 0303 	adc.w	r3, r2, r3
 8007688:	647b      	str	r3, [r7, #68]	@ 0x44
 800768a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800768e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007692:	f7f8 fdf5 	bl	8000280 <__aeabi_uldivmod>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4611      	mov	r1, r2
 800769c:	4b3b      	ldr	r3, [pc, #236]	@ (800778c <UART_SetConfig+0x2d4>)
 800769e:	fba3 2301 	umull	r2, r3, r3, r1
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	2264      	movs	r2, #100	@ 0x64
 80076a6:	fb02 f303 	mul.w	r3, r2, r3
 80076aa:	1acb      	subs	r3, r1, r3
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80076b2:	4b36      	ldr	r3, [pc, #216]	@ (800778c <UART_SetConfig+0x2d4>)
 80076b4:	fba3 2302 	umull	r2, r3, r3, r2
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80076c0:	441c      	add	r4, r3
 80076c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	1891      	adds	r1, r2, r2
 80076da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076dc:	415b      	adcs	r3, r3
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076e4:	4641      	mov	r1, r8
 80076e6:	1851      	adds	r1, r2, r1
 80076e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80076ea:	4649      	mov	r1, r9
 80076ec:	414b      	adcs	r3, r1
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076fc:	4659      	mov	r1, fp
 80076fe:	00cb      	lsls	r3, r1, #3
 8007700:	4651      	mov	r1, sl
 8007702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007706:	4651      	mov	r1, sl
 8007708:	00ca      	lsls	r2, r1, #3
 800770a:	4610      	mov	r0, r2
 800770c:	4619      	mov	r1, r3
 800770e:	4603      	mov	r3, r0
 8007710:	4642      	mov	r2, r8
 8007712:	189b      	adds	r3, r3, r2
 8007714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007718:	464b      	mov	r3, r9
 800771a:	460a      	mov	r2, r1
 800771c:	eb42 0303 	adc.w	r3, r2, r3
 8007720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007730:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007738:	460b      	mov	r3, r1
 800773a:	18db      	adds	r3, r3, r3
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800773e:	4613      	mov	r3, r2
 8007740:	eb42 0303 	adc.w	r3, r2, r3
 8007744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800774a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800774e:	f7f8 fd97 	bl	8000280 <__aeabi_uldivmod>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <UART_SetConfig+0x2d4>)
 8007758:	fba3 1302 	umull	r1, r3, r3, r2
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	2164      	movs	r1, #100	@ 0x64
 8007760:	fb01 f303 	mul.w	r3, r1, r3
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	3332      	adds	r3, #50	@ 0x32
 800776a:	4a08      	ldr	r2, [pc, #32]	@ (800778c <UART_SetConfig+0x2d4>)
 800776c:	fba2 2303 	umull	r2, r3, r2, r3
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	f003 0207 	and.w	r2, r3, #7
 8007776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4422      	add	r2, r4
 800777e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007780:	e106      	b.n	8007990 <UART_SetConfig+0x4d8>
 8007782:	bf00      	nop
 8007784:	40011000 	.word	0x40011000
 8007788:	40011400 	.word	0x40011400
 800778c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007794:	2200      	movs	r2, #0
 8007796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800779a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800779e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80077a2:	4642      	mov	r2, r8
 80077a4:	464b      	mov	r3, r9
 80077a6:	1891      	adds	r1, r2, r2
 80077a8:	6239      	str	r1, [r7, #32]
 80077aa:	415b      	adcs	r3, r3
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077b2:	4641      	mov	r1, r8
 80077b4:	1854      	adds	r4, r2, r1
 80077b6:	4649      	mov	r1, r9
 80077b8:	eb43 0501 	adc.w	r5, r3, r1
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	00eb      	lsls	r3, r5, #3
 80077c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077ca:	00e2      	lsls	r2, r4, #3
 80077cc:	4614      	mov	r4, r2
 80077ce:	461d      	mov	r5, r3
 80077d0:	4643      	mov	r3, r8
 80077d2:	18e3      	adds	r3, r4, r3
 80077d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077d8:	464b      	mov	r3, r9
 80077da:	eb45 0303 	adc.w	r3, r5, r3
 80077de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	f04f 0300 	mov.w	r3, #0
 80077fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077fe:	4629      	mov	r1, r5
 8007800:	008b      	lsls	r3, r1, #2
 8007802:	4621      	mov	r1, r4
 8007804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007808:	4621      	mov	r1, r4
 800780a:	008a      	lsls	r2, r1, #2
 800780c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007810:	f7f8 fd36 	bl	8000280 <__aeabi_uldivmod>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4b60      	ldr	r3, [pc, #384]	@ (800799c <UART_SetConfig+0x4e4>)
 800781a:	fba3 2302 	umull	r2, r3, r3, r2
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	011c      	lsls	r4, r3, #4
 8007822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007826:	2200      	movs	r2, #0
 8007828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800782c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007834:	4642      	mov	r2, r8
 8007836:	464b      	mov	r3, r9
 8007838:	1891      	adds	r1, r2, r2
 800783a:	61b9      	str	r1, [r7, #24]
 800783c:	415b      	adcs	r3, r3
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007844:	4641      	mov	r1, r8
 8007846:	1851      	adds	r1, r2, r1
 8007848:	6139      	str	r1, [r7, #16]
 800784a:	4649      	mov	r1, r9
 800784c:	414b      	adcs	r3, r1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800785c:	4659      	mov	r1, fp
 800785e:	00cb      	lsls	r3, r1, #3
 8007860:	4651      	mov	r1, sl
 8007862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007866:	4651      	mov	r1, sl
 8007868:	00ca      	lsls	r2, r1, #3
 800786a:	4610      	mov	r0, r2
 800786c:	4619      	mov	r1, r3
 800786e:	4603      	mov	r3, r0
 8007870:	4642      	mov	r2, r8
 8007872:	189b      	adds	r3, r3, r2
 8007874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007878:	464b      	mov	r3, r9
 800787a:	460a      	mov	r2, r1
 800787c:	eb42 0303 	adc.w	r3, r2, r3
 8007880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800788e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007890:	f04f 0200 	mov.w	r2, #0
 8007894:	f04f 0300 	mov.w	r3, #0
 8007898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800789c:	4649      	mov	r1, r9
 800789e:	008b      	lsls	r3, r1, #2
 80078a0:	4641      	mov	r1, r8
 80078a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078a6:	4641      	mov	r1, r8
 80078a8:	008a      	lsls	r2, r1, #2
 80078aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80078ae:	f7f8 fce7 	bl	8000280 <__aeabi_uldivmod>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4611      	mov	r1, r2
 80078b8:	4b38      	ldr	r3, [pc, #224]	@ (800799c <UART_SetConfig+0x4e4>)
 80078ba:	fba3 2301 	umull	r2, r3, r3, r1
 80078be:	095b      	lsrs	r3, r3, #5
 80078c0:	2264      	movs	r2, #100	@ 0x64
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	1acb      	subs	r3, r1, r3
 80078c8:	011b      	lsls	r3, r3, #4
 80078ca:	3332      	adds	r3, #50	@ 0x32
 80078cc:	4a33      	ldr	r2, [pc, #204]	@ (800799c <UART_SetConfig+0x4e4>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078d8:	441c      	add	r4, r3
 80078da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078de:	2200      	movs	r2, #0
 80078e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80078e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80078e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	1891      	adds	r1, r2, r2
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	415b      	adcs	r3, r3
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078f8:	4641      	mov	r1, r8
 80078fa:	1851      	adds	r1, r2, r1
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	4649      	mov	r1, r9
 8007900:	414b      	adcs	r3, r1
 8007902:	607b      	str	r3, [r7, #4]
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007910:	4659      	mov	r1, fp
 8007912:	00cb      	lsls	r3, r1, #3
 8007914:	4651      	mov	r1, sl
 8007916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800791a:	4651      	mov	r1, sl
 800791c:	00ca      	lsls	r2, r1, #3
 800791e:	4610      	mov	r0, r2
 8007920:	4619      	mov	r1, r3
 8007922:	4603      	mov	r3, r0
 8007924:	4642      	mov	r2, r8
 8007926:	189b      	adds	r3, r3, r2
 8007928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800792a:	464b      	mov	r3, r9
 800792c:	460a      	mov	r2, r1
 800792e:	eb42 0303 	adc.w	r3, r2, r3
 8007932:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	663b      	str	r3, [r7, #96]	@ 0x60
 800793e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800794c:	4649      	mov	r1, r9
 800794e:	008b      	lsls	r3, r1, #2
 8007950:	4641      	mov	r1, r8
 8007952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007956:	4641      	mov	r1, r8
 8007958:	008a      	lsls	r2, r1, #2
 800795a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800795e:	f7f8 fc8f 	bl	8000280 <__aeabi_uldivmod>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <UART_SetConfig+0x4e4>)
 8007968:	fba3 1302 	umull	r1, r3, r3, r2
 800796c:	095b      	lsrs	r3, r3, #5
 800796e:	2164      	movs	r1, #100	@ 0x64
 8007970:	fb01 f303 	mul.w	r3, r1, r3
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	3332      	adds	r3, #50	@ 0x32
 800797a:	4a08      	ldr	r2, [pc, #32]	@ (800799c <UART_SetConfig+0x4e4>)
 800797c:	fba2 2303 	umull	r2, r3, r2, r3
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	f003 020f 	and.w	r2, r3, #15
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4422      	add	r2, r4
 800798e:	609a      	str	r2, [r3, #8]
}
 8007990:	bf00      	nop
 8007992:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007996:	46bd      	mov	sp, r7
 8007998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800799c:	51eb851f 	.word	0x51eb851f

080079a0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4b20      	ldr	r3, [pc, #128]	@ (8007a40 <FSMC_NORSRAM_Init+0xa0>)
 80079be:	4013      	ands	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80079ca:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80079d0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80079d6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80079dc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80079e2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80079e8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80079ee:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80079f4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80079fa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007a00:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8007a06:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8007a0c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d103      	bne.n	8007a24 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a22:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	fff00080 	.word	0xfff00080

08007a44 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a66:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a72:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007a7a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007a82:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a8c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	3b02      	subs	r3, #2
 8007a94:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007a96:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6979      	ldr	r1, [r7, #20]
 8007aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad8:	d122      	bne.n	8007b20 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4b15      	ldr	r3, [pc, #84]	@ (8007b3c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007af6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007afe:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007b06:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007b0c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6979      	ldr	r1, [r7, #20]
 8007b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b1e:	e005      	b.n	8007b2c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	cff00000 	.word	0xcff00000

08007b40 <atoi>:
 8007b40:	220a      	movs	r2, #10
 8007b42:	2100      	movs	r1, #0
 8007b44:	f000 b87a 	b.w	8007c3c <strtol>

08007b48 <_strtol_l.constprop.0>:
 8007b48:	2b24      	cmp	r3, #36	@ 0x24
 8007b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4e:	4686      	mov	lr, r0
 8007b50:	4690      	mov	r8, r2
 8007b52:	d801      	bhi.n	8007b58 <_strtol_l.constprop.0+0x10>
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d106      	bne.n	8007b66 <_strtol_l.constprop.0+0x1e>
 8007b58:	f000 fae0 	bl	800811c <__errno>
 8007b5c:	2316      	movs	r3, #22
 8007b5e:	6003      	str	r3, [r0, #0]
 8007b60:	2000      	movs	r0, #0
 8007b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b66:	4834      	ldr	r0, [pc, #208]	@ (8007c38 <_strtol_l.constprop.0+0xf0>)
 8007b68:	460d      	mov	r5, r1
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b70:	5d06      	ldrb	r6, [r0, r4]
 8007b72:	f016 0608 	ands.w	r6, r6, #8
 8007b76:	d1f8      	bne.n	8007b6a <_strtol_l.constprop.0+0x22>
 8007b78:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b7a:	d12d      	bne.n	8007bd8 <_strtol_l.constprop.0+0x90>
 8007b7c:	782c      	ldrb	r4, [r5, #0]
 8007b7e:	2601      	movs	r6, #1
 8007b80:	1c95      	adds	r5, r2, #2
 8007b82:	f033 0210 	bics.w	r2, r3, #16
 8007b86:	d109      	bne.n	8007b9c <_strtol_l.constprop.0+0x54>
 8007b88:	2c30      	cmp	r4, #48	@ 0x30
 8007b8a:	d12a      	bne.n	8007be2 <_strtol_l.constprop.0+0x9a>
 8007b8c:	782a      	ldrb	r2, [r5, #0]
 8007b8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b92:	2a58      	cmp	r2, #88	@ 0x58
 8007b94:	d125      	bne.n	8007be2 <_strtol_l.constprop.0+0x9a>
 8007b96:	786c      	ldrb	r4, [r5, #1]
 8007b98:	2310      	movs	r3, #16
 8007b9a:	3502      	adds	r5, #2
 8007b9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ba0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	fbbc f9f3 	udiv	r9, ip, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	fb03 ca19 	mls	sl, r3, r9, ip
 8007bb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007bb4:	2f09      	cmp	r7, #9
 8007bb6:	d81b      	bhi.n	8007bf0 <_strtol_l.constprop.0+0xa8>
 8007bb8:	463c      	mov	r4, r7
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	dd27      	ble.n	8007c0e <_strtol_l.constprop.0+0xc6>
 8007bbe:	1c57      	adds	r7, r2, #1
 8007bc0:	d007      	beq.n	8007bd2 <_strtol_l.constprop.0+0x8a>
 8007bc2:	4581      	cmp	r9, r0
 8007bc4:	d320      	bcc.n	8007c08 <_strtol_l.constprop.0+0xc0>
 8007bc6:	d101      	bne.n	8007bcc <_strtol_l.constprop.0+0x84>
 8007bc8:	45a2      	cmp	sl, r4
 8007bca:	db1d      	blt.n	8007c08 <_strtol_l.constprop.0+0xc0>
 8007bcc:	fb00 4003 	mla	r0, r0, r3, r4
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bd6:	e7eb      	b.n	8007bb0 <_strtol_l.constprop.0+0x68>
 8007bd8:	2c2b      	cmp	r4, #43	@ 0x2b
 8007bda:	bf04      	itt	eq
 8007bdc:	782c      	ldrbeq	r4, [r5, #0]
 8007bde:	1c95      	addeq	r5, r2, #2
 8007be0:	e7cf      	b.n	8007b82 <_strtol_l.constprop.0+0x3a>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1da      	bne.n	8007b9c <_strtol_l.constprop.0+0x54>
 8007be6:	2c30      	cmp	r4, #48	@ 0x30
 8007be8:	bf0c      	ite	eq
 8007bea:	2308      	moveq	r3, #8
 8007bec:	230a      	movne	r3, #10
 8007bee:	e7d5      	b.n	8007b9c <_strtol_l.constprop.0+0x54>
 8007bf0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007bf4:	2f19      	cmp	r7, #25
 8007bf6:	d801      	bhi.n	8007bfc <_strtol_l.constprop.0+0xb4>
 8007bf8:	3c37      	subs	r4, #55	@ 0x37
 8007bfa:	e7de      	b.n	8007bba <_strtol_l.constprop.0+0x72>
 8007bfc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007c00:	2f19      	cmp	r7, #25
 8007c02:	d804      	bhi.n	8007c0e <_strtol_l.constprop.0+0xc6>
 8007c04:	3c57      	subs	r4, #87	@ 0x57
 8007c06:	e7d8      	b.n	8007bba <_strtol_l.constprop.0+0x72>
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0c:	e7e1      	b.n	8007bd2 <_strtol_l.constprop.0+0x8a>
 8007c0e:	1c53      	adds	r3, r2, #1
 8007c10:	d108      	bne.n	8007c24 <_strtol_l.constprop.0+0xdc>
 8007c12:	2322      	movs	r3, #34	@ 0x22
 8007c14:	f8ce 3000 	str.w	r3, [lr]
 8007c18:	4660      	mov	r0, ip
 8007c1a:	f1b8 0f00 	cmp.w	r8, #0
 8007c1e:	d0a0      	beq.n	8007b62 <_strtol_l.constprop.0+0x1a>
 8007c20:	1e69      	subs	r1, r5, #1
 8007c22:	e006      	b.n	8007c32 <_strtol_l.constprop.0+0xea>
 8007c24:	b106      	cbz	r6, 8007c28 <_strtol_l.constprop.0+0xe0>
 8007c26:	4240      	negs	r0, r0
 8007c28:	f1b8 0f00 	cmp.w	r8, #0
 8007c2c:	d099      	beq.n	8007b62 <_strtol_l.constprop.0+0x1a>
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	d1f6      	bne.n	8007c20 <_strtol_l.constprop.0+0xd8>
 8007c32:	f8c8 1000 	str.w	r1, [r8]
 8007c36:	e794      	b.n	8007b62 <_strtol_l.constprop.0+0x1a>
 8007c38:	0800bd81 	.word	0x0800bd81

08007c3c <strtol>:
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	460a      	mov	r2, r1
 8007c40:	4601      	mov	r1, r0
 8007c42:	4802      	ldr	r0, [pc, #8]	@ (8007c4c <strtol+0x10>)
 8007c44:	6800      	ldr	r0, [r0, #0]
 8007c46:	f7ff bf7f 	b.w	8007b48 <_strtol_l.constprop.0>
 8007c4a:	bf00      	nop
 8007c4c:	20000020 	.word	0x20000020

08007c50 <std>:
 8007c50:	2300      	movs	r3, #0
 8007c52:	b510      	push	{r4, lr}
 8007c54:	4604      	mov	r4, r0
 8007c56:	e9c0 3300 	strd	r3, r3, [r0]
 8007c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c5e:	6083      	str	r3, [r0, #8]
 8007c60:	8181      	strh	r1, [r0, #12]
 8007c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c64:	81c2      	strh	r2, [r0, #14]
 8007c66:	6183      	str	r3, [r0, #24]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	305c      	adds	r0, #92	@ 0x5c
 8007c6e:	f000 fa07 	bl	8008080 <memset>
 8007c72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca8 <std+0x58>)
 8007c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c76:	4b0d      	ldr	r3, [pc, #52]	@ (8007cac <std+0x5c>)
 8007c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb0 <std+0x60>)
 8007c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb4 <std+0x64>)
 8007c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c82:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb8 <std+0x68>)
 8007c84:	6224      	str	r4, [r4, #32]
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d006      	beq.n	8007c98 <std+0x48>
 8007c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c8e:	4294      	cmp	r4, r2
 8007c90:	d002      	beq.n	8007c98 <std+0x48>
 8007c92:	33d0      	adds	r3, #208	@ 0xd0
 8007c94:	429c      	cmp	r4, r3
 8007c96:	d105      	bne.n	8007ca4 <std+0x54>
 8007c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca0:	f000 ba66 	b.w	8008170 <__retarget_lock_init_recursive>
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08007ed1 	.word	0x08007ed1
 8007cac:	08007ef3 	.word	0x08007ef3
 8007cb0:	08007f2b 	.word	0x08007f2b
 8007cb4:	08007f4f 	.word	0x08007f4f
 8007cb8:	20000328 	.word	0x20000328

08007cbc <stdio_exit_handler>:
 8007cbc:	4a02      	ldr	r2, [pc, #8]	@ (8007cc8 <stdio_exit_handler+0xc>)
 8007cbe:	4903      	ldr	r1, [pc, #12]	@ (8007ccc <stdio_exit_handler+0x10>)
 8007cc0:	4803      	ldr	r0, [pc, #12]	@ (8007cd0 <stdio_exit_handler+0x14>)
 8007cc2:	f000 b869 	b.w	8007d98 <_fwalk_sglue>
 8007cc6:	bf00      	nop
 8007cc8:	20000014 	.word	0x20000014
 8007ccc:	08008a3d 	.word	0x08008a3d
 8007cd0:	20000024 	.word	0x20000024

08007cd4 <cleanup_stdio>:
 8007cd4:	6841      	ldr	r1, [r0, #4]
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007d08 <cleanup_stdio+0x34>)
 8007cd8:	4299      	cmp	r1, r3
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	4604      	mov	r4, r0
 8007cde:	d001      	beq.n	8007ce4 <cleanup_stdio+0x10>
 8007ce0:	f000 feac 	bl	8008a3c <_fflush_r>
 8007ce4:	68a1      	ldr	r1, [r4, #8]
 8007ce6:	4b09      	ldr	r3, [pc, #36]	@ (8007d0c <cleanup_stdio+0x38>)
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d002      	beq.n	8007cf2 <cleanup_stdio+0x1e>
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fea5 	bl	8008a3c <_fflush_r>
 8007cf2:	68e1      	ldr	r1, [r4, #12]
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <cleanup_stdio+0x3c>)
 8007cf6:	4299      	cmp	r1, r3
 8007cf8:	d004      	beq.n	8007d04 <cleanup_stdio+0x30>
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f000 be9c 	b.w	8008a3c <_fflush_r>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	20000328 	.word	0x20000328
 8007d0c:	20000390 	.word	0x20000390
 8007d10:	200003f8 	.word	0x200003f8

08007d14 <global_stdio_init.part.0>:
 8007d14:	b510      	push	{r4, lr}
 8007d16:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <global_stdio_init.part.0+0x30>)
 8007d18:	4c0b      	ldr	r4, [pc, #44]	@ (8007d48 <global_stdio_init.part.0+0x34>)
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d4c <global_stdio_init.part.0+0x38>)
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	4620      	mov	r0, r4
 8007d20:	2200      	movs	r2, #0
 8007d22:	2104      	movs	r1, #4
 8007d24:	f7ff ff94 	bl	8007c50 <std>
 8007d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	2109      	movs	r1, #9
 8007d30:	f7ff ff8e 	bl	8007c50 <std>
 8007d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d38:	2202      	movs	r2, #2
 8007d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d3e:	2112      	movs	r1, #18
 8007d40:	f7ff bf86 	b.w	8007c50 <std>
 8007d44:	20000460 	.word	0x20000460
 8007d48:	20000328 	.word	0x20000328
 8007d4c:	08007cbd 	.word	0x08007cbd

08007d50 <__sfp_lock_acquire>:
 8007d50:	4801      	ldr	r0, [pc, #4]	@ (8007d58 <__sfp_lock_acquire+0x8>)
 8007d52:	f000 ba0e 	b.w	8008172 <__retarget_lock_acquire_recursive>
 8007d56:	bf00      	nop
 8007d58:	20000469 	.word	0x20000469

08007d5c <__sfp_lock_release>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	@ (8007d64 <__sfp_lock_release+0x8>)
 8007d5e:	f000 ba09 	b.w	8008174 <__retarget_lock_release_recursive>
 8007d62:	bf00      	nop
 8007d64:	20000469 	.word	0x20000469

08007d68 <__sinit>:
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	f7ff fff0 	bl	8007d50 <__sfp_lock_acquire>
 8007d70:	6a23      	ldr	r3, [r4, #32]
 8007d72:	b11b      	cbz	r3, 8007d7c <__sinit+0x14>
 8007d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d78:	f7ff bff0 	b.w	8007d5c <__sfp_lock_release>
 8007d7c:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <__sinit+0x28>)
 8007d7e:	6223      	str	r3, [r4, #32]
 8007d80:	4b04      	ldr	r3, [pc, #16]	@ (8007d94 <__sinit+0x2c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f5      	bne.n	8007d74 <__sinit+0xc>
 8007d88:	f7ff ffc4 	bl	8007d14 <global_stdio_init.part.0>
 8007d8c:	e7f2      	b.n	8007d74 <__sinit+0xc>
 8007d8e:	bf00      	nop
 8007d90:	08007cd5 	.word	0x08007cd5
 8007d94:	20000460 	.word	0x20000460

08007d98 <_fwalk_sglue>:
 8007d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	4688      	mov	r8, r1
 8007da0:	4614      	mov	r4, r2
 8007da2:	2600      	movs	r6, #0
 8007da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007da8:	f1b9 0901 	subs.w	r9, r9, #1
 8007dac:	d505      	bpl.n	8007dba <_fwalk_sglue+0x22>
 8007dae:	6824      	ldr	r4, [r4, #0]
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	d1f7      	bne.n	8007da4 <_fwalk_sglue+0xc>
 8007db4:	4630      	mov	r0, r6
 8007db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d907      	bls.n	8007dd0 <_fwalk_sglue+0x38>
 8007dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	d003      	beq.n	8007dd0 <_fwalk_sglue+0x38>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4638      	mov	r0, r7
 8007dcc:	47c0      	blx	r8
 8007dce:	4306      	orrs	r6, r0
 8007dd0:	3568      	adds	r5, #104	@ 0x68
 8007dd2:	e7e9      	b.n	8007da8 <_fwalk_sglue+0x10>

08007dd4 <_puts_r>:
 8007dd4:	6a03      	ldr	r3, [r0, #32]
 8007dd6:	b570      	push	{r4, r5, r6, lr}
 8007dd8:	6884      	ldr	r4, [r0, #8]
 8007dda:	4605      	mov	r5, r0
 8007ddc:	460e      	mov	r6, r1
 8007dde:	b90b      	cbnz	r3, 8007de4 <_puts_r+0x10>
 8007de0:	f7ff ffc2 	bl	8007d68 <__sinit>
 8007de4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007de6:	07db      	lsls	r3, r3, #31
 8007de8:	d405      	bmi.n	8007df6 <_puts_r+0x22>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	0598      	lsls	r0, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <_puts_r+0x22>
 8007df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007df2:	f000 f9be 	bl	8008172 <__retarget_lock_acquire_recursive>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	0719      	lsls	r1, r3, #28
 8007dfa:	d502      	bpl.n	8007e02 <_puts_r+0x2e>
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d135      	bne.n	8007e6e <_puts_r+0x9a>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f8e5 	bl	8007fd4 <__swsetup_r>
 8007e0a:	b380      	cbz	r0, 8007e6e <_puts_r+0x9a>
 8007e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d405      	bmi.n	8007e22 <_puts_r+0x4e>
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	059b      	lsls	r3, r3, #22
 8007e1a:	d402      	bmi.n	8007e22 <_puts_r+0x4e>
 8007e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e1e:	f000 f9a9 	bl	8008174 <__retarget_lock_release_recursive>
 8007e22:	4628      	mov	r0, r5
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da04      	bge.n	8007e34 <_puts_r+0x60>
 8007e2a:	69a2      	ldr	r2, [r4, #24]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	dc17      	bgt.n	8007e60 <_puts_r+0x8c>
 8007e30:	290a      	cmp	r1, #10
 8007e32:	d015      	beq.n	8007e60 <_puts_r+0x8c>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	6022      	str	r2, [r4, #0]
 8007e3a:	7019      	strb	r1, [r3, #0]
 8007e3c:	68a3      	ldr	r3, [r4, #8]
 8007e3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e42:	3b01      	subs	r3, #1
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	2900      	cmp	r1, #0
 8007e48:	d1ed      	bne.n	8007e26 <_puts_r+0x52>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da11      	bge.n	8007e72 <_puts_r+0x9e>
 8007e4e:	4622      	mov	r2, r4
 8007e50:	210a      	movs	r1, #10
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f87f 	bl	8007f56 <__swbuf_r>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d0d7      	beq.n	8007e0c <_puts_r+0x38>
 8007e5c:	250a      	movs	r5, #10
 8007e5e:	e7d7      	b.n	8007e10 <_puts_r+0x3c>
 8007e60:	4622      	mov	r2, r4
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 f877 	bl	8007f56 <__swbuf_r>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d1e7      	bne.n	8007e3c <_puts_r+0x68>
 8007e6c:	e7ce      	b.n	8007e0c <_puts_r+0x38>
 8007e6e:	3e01      	subs	r6, #1
 8007e70:	e7e4      	b.n	8007e3c <_puts_r+0x68>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	6022      	str	r2, [r4, #0]
 8007e78:	220a      	movs	r2, #10
 8007e7a:	701a      	strb	r2, [r3, #0]
 8007e7c:	e7ee      	b.n	8007e5c <_puts_r+0x88>
	...

08007e80 <puts>:
 8007e80:	4b02      	ldr	r3, [pc, #8]	@ (8007e8c <puts+0xc>)
 8007e82:	4601      	mov	r1, r0
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	f7ff bfa5 	b.w	8007dd4 <_puts_r>
 8007e8a:	bf00      	nop
 8007e8c:	20000020 	.word	0x20000020

08007e90 <siprintf>:
 8007e90:	b40e      	push	{r1, r2, r3}
 8007e92:	b500      	push	{lr}
 8007e94:	b09c      	sub	sp, #112	@ 0x70
 8007e96:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e98:	9002      	str	r0, [sp, #8]
 8007e9a:	9006      	str	r0, [sp, #24]
 8007e9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ea0:	4809      	ldr	r0, [pc, #36]	@ (8007ec8 <siprintf+0x38>)
 8007ea2:	9107      	str	r1, [sp, #28]
 8007ea4:	9104      	str	r1, [sp, #16]
 8007ea6:	4909      	ldr	r1, [pc, #36]	@ (8007ecc <siprintf+0x3c>)
 8007ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eac:	9105      	str	r1, [sp, #20]
 8007eae:	6800      	ldr	r0, [r0, #0]
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	a902      	add	r1, sp, #8
 8007eb4:	f000 fab4 	bl	8008420 <_svfiprintf_r>
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	b01c      	add	sp, #112	@ 0x70
 8007ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec4:	b003      	add	sp, #12
 8007ec6:	4770      	bx	lr
 8007ec8:	20000020 	.word	0x20000020
 8007ecc:	ffff0208 	.word	0xffff0208

08007ed0 <__sread>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	f000 f8fc 	bl	80080d4 <_read_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	bfab      	itete	ge
 8007ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee4:	181b      	addge	r3, r3, r0
 8007ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eea:	bfac      	ite	ge
 8007eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eee:	81a3      	strhlt	r3, [r4, #12]
 8007ef0:	bd10      	pop	{r4, pc}

08007ef2 <__swrite>:
 8007ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	898b      	ldrh	r3, [r1, #12]
 8007efa:	05db      	lsls	r3, r3, #23
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	4616      	mov	r6, r2
 8007f02:	d505      	bpl.n	8007f10 <__swrite+0x1e>
 8007f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f08:	2302      	movs	r3, #2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f000 f8d0 	bl	80080b0 <_lseek_r>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	463b      	mov	r3, r7
 8007f20:	4628      	mov	r0, r5
 8007f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f26:	f000 b8e7 	b.w	80080f8 <_write_r>

08007f2a <__sseek>:
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f32:	f000 f8bd 	bl	80080b0 <_lseek_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	bf15      	itete	ne
 8007f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f46:	81a3      	strheq	r3, [r4, #12]
 8007f48:	bf18      	it	ne
 8007f4a:	81a3      	strhne	r3, [r4, #12]
 8007f4c:	bd10      	pop	{r4, pc}

08007f4e <__sclose>:
 8007f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f52:	f000 b89d 	b.w	8008090 <_close_r>

08007f56 <__swbuf_r>:
 8007f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f58:	460e      	mov	r6, r1
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	b118      	cbz	r0, 8007f68 <__swbuf_r+0x12>
 8007f60:	6a03      	ldr	r3, [r0, #32]
 8007f62:	b90b      	cbnz	r3, 8007f68 <__swbuf_r+0x12>
 8007f64:	f7ff ff00 	bl	8007d68 <__sinit>
 8007f68:	69a3      	ldr	r3, [r4, #24]
 8007f6a:	60a3      	str	r3, [r4, #8]
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	071a      	lsls	r2, r3, #28
 8007f70:	d501      	bpl.n	8007f76 <__swbuf_r+0x20>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	b943      	cbnz	r3, 8007f88 <__swbuf_r+0x32>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f82b 	bl	8007fd4 <__swsetup_r>
 8007f7e:	b118      	cbz	r0, 8007f88 <__swbuf_r+0x32>
 8007f80:	f04f 37ff 	mov.w	r7, #4294967295
 8007f84:	4638      	mov	r0, r7
 8007f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	1a98      	subs	r0, r3, r2
 8007f8e:	6963      	ldr	r3, [r4, #20]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	4283      	cmp	r3, r0
 8007f94:	4637      	mov	r7, r6
 8007f96:	dc05      	bgt.n	8007fa4 <__swbuf_r+0x4e>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 fd4e 	bl	8008a3c <_fflush_r>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d1ed      	bne.n	8007f80 <__swbuf_r+0x2a>
 8007fa4:	68a3      	ldr	r3, [r4, #8]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	60a3      	str	r3, [r4, #8]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	701e      	strb	r6, [r3, #0]
 8007fb2:	6962      	ldr	r2, [r4, #20]
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d004      	beq.n	8007fc4 <__swbuf_r+0x6e>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	07db      	lsls	r3, r3, #31
 8007fbe:	d5e1      	bpl.n	8007f84 <__swbuf_r+0x2e>
 8007fc0:	2e0a      	cmp	r6, #10
 8007fc2:	d1df      	bne.n	8007f84 <__swbuf_r+0x2e>
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 fd38 	bl	8008a3c <_fflush_r>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d0d9      	beq.n	8007f84 <__swbuf_r+0x2e>
 8007fd0:	e7d6      	b.n	8007f80 <__swbuf_r+0x2a>
	...

08007fd4 <__swsetup_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4b29      	ldr	r3, [pc, #164]	@ (800807c <__swsetup_r+0xa8>)
 8007fd8:	4605      	mov	r5, r0
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	460c      	mov	r4, r1
 8007fde:	b118      	cbz	r0, 8007fe8 <__swsetup_r+0x14>
 8007fe0:	6a03      	ldr	r3, [r0, #32]
 8007fe2:	b90b      	cbnz	r3, 8007fe8 <__swsetup_r+0x14>
 8007fe4:	f7ff fec0 	bl	8007d68 <__sinit>
 8007fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fec:	0719      	lsls	r1, r3, #28
 8007fee:	d422      	bmi.n	8008036 <__swsetup_r+0x62>
 8007ff0:	06da      	lsls	r2, r3, #27
 8007ff2:	d407      	bmi.n	8008004 <__swsetup_r+0x30>
 8007ff4:	2209      	movs	r2, #9
 8007ff6:	602a      	str	r2, [r5, #0]
 8007ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8008002:	e033      	b.n	800806c <__swsetup_r+0x98>
 8008004:	0758      	lsls	r0, r3, #29
 8008006:	d512      	bpl.n	800802e <__swsetup_r+0x5a>
 8008008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800800a:	b141      	cbz	r1, 800801e <__swsetup_r+0x4a>
 800800c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008010:	4299      	cmp	r1, r3
 8008012:	d002      	beq.n	800801a <__swsetup_r+0x46>
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f8af 	bl	8008178 <_free_r>
 800801a:	2300      	movs	r3, #0
 800801c:	6363      	str	r3, [r4, #52]	@ 0x34
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	2300      	movs	r3, #0
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f043 0308 	orr.w	r3, r3, #8
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	b94b      	cbnz	r3, 800804e <__swsetup_r+0x7a>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008044:	d003      	beq.n	800804e <__swsetup_r+0x7a>
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f000 fd45 	bl	8008ad8 <__smakebuf_r>
 800804e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008052:	f013 0201 	ands.w	r2, r3, #1
 8008056:	d00a      	beq.n	800806e <__swsetup_r+0x9a>
 8008058:	2200      	movs	r2, #0
 800805a:	60a2      	str	r2, [r4, #8]
 800805c:	6962      	ldr	r2, [r4, #20]
 800805e:	4252      	negs	r2, r2
 8008060:	61a2      	str	r2, [r4, #24]
 8008062:	6922      	ldr	r2, [r4, #16]
 8008064:	b942      	cbnz	r2, 8008078 <__swsetup_r+0xa4>
 8008066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800806a:	d1c5      	bne.n	8007ff8 <__swsetup_r+0x24>
 800806c:	bd38      	pop	{r3, r4, r5, pc}
 800806e:	0799      	lsls	r1, r3, #30
 8008070:	bf58      	it	pl
 8008072:	6962      	ldrpl	r2, [r4, #20]
 8008074:	60a2      	str	r2, [r4, #8]
 8008076:	e7f4      	b.n	8008062 <__swsetup_r+0x8e>
 8008078:	2000      	movs	r0, #0
 800807a:	e7f7      	b.n	800806c <__swsetup_r+0x98>
 800807c:	20000020 	.word	0x20000020

08008080 <memset>:
 8008080:	4402      	add	r2, r0
 8008082:	4603      	mov	r3, r0
 8008084:	4293      	cmp	r3, r2
 8008086:	d100      	bne.n	800808a <memset+0xa>
 8008088:	4770      	bx	lr
 800808a:	f803 1b01 	strb.w	r1, [r3], #1
 800808e:	e7f9      	b.n	8008084 <memset+0x4>

08008090 <_close_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	@ (80080ac <_close_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7fa ff3d 	bl	8002f1a <_close>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_close_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_close_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20000464 	.word	0x20000464

080080b0 <_lseek_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	@ (80080d0 <_lseek_r+0x20>)
 80080b4:	4604      	mov	r4, r0
 80080b6:	4608      	mov	r0, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7fa ff52 	bl	8002f68 <_lseek>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_lseek_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_lseek_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20000464 	.word	0x20000464

080080d4 <_read_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	@ (80080f4 <_read_r+0x20>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7fa fee0 	bl	8002ea8 <_read>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_read_r+0x1e>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_read_r+0x1e>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	20000464 	.word	0x20000464

080080f8 <_write_r>:
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4d07      	ldr	r5, [pc, #28]	@ (8008118 <_write_r+0x20>)
 80080fc:	4604      	mov	r4, r0
 80080fe:	4608      	mov	r0, r1
 8008100:	4611      	mov	r1, r2
 8008102:	2200      	movs	r2, #0
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f7fa feeb 	bl	8002ee2 <_write>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_write_r+0x1e>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_write_r+0x1e>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	20000464 	.word	0x20000464

0800811c <__errno>:
 800811c:	4b01      	ldr	r3, [pc, #4]	@ (8008124 <__errno+0x8>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000020 	.word	0x20000020

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	@ (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	@ (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	@ (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	@ (800816c <__libc_init_array+0x44>)
 800813c:	f000 fd98 	bl	8008c70 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	0800bebc 	.word	0x0800bebc
 8008164:	0800bebc 	.word	0x0800bebc
 8008168:	0800bebc 	.word	0x0800bebc
 800816c:	0800bec0 	.word	0x0800bec0

08008170 <__retarget_lock_init_recursive>:
 8008170:	4770      	bx	lr

08008172 <__retarget_lock_acquire_recursive>:
 8008172:	4770      	bx	lr

08008174 <__retarget_lock_release_recursive>:
 8008174:	4770      	bx	lr
	...

08008178 <_free_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4605      	mov	r5, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	d041      	beq.n	8008204 <_free_r+0x8c>
 8008180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008184:	1f0c      	subs	r4, r1, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfb8      	it	lt
 800818a:	18e4      	addlt	r4, r4, r3
 800818c:	f000 f8e0 	bl	8008350 <__malloc_lock>
 8008190:	4a1d      	ldr	r2, [pc, #116]	@ (8008208 <_free_r+0x90>)
 8008192:	6813      	ldr	r3, [r2, #0]
 8008194:	b933      	cbnz	r3, 80081a4 <_free_r+0x2c>
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	6014      	str	r4, [r2, #0]
 800819a:	4628      	mov	r0, r5
 800819c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a0:	f000 b8dc 	b.w	800835c <__malloc_unlock>
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	d908      	bls.n	80081ba <_free_r+0x42>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	1821      	adds	r1, r4, r0
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf01      	itttt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	1809      	addeq	r1, r1, r0
 80081b6:	6021      	streq	r1, [r4, #0]
 80081b8:	e7ed      	b.n	8008196 <_free_r+0x1e>
 80081ba:	461a      	mov	r2, r3
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	b10b      	cbz	r3, 80081c4 <_free_r+0x4c>
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d9fa      	bls.n	80081ba <_free_r+0x42>
 80081c4:	6811      	ldr	r1, [r2, #0]
 80081c6:	1850      	adds	r0, r2, r1
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d10b      	bne.n	80081e4 <_free_r+0x6c>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	4401      	add	r1, r0
 80081d0:	1850      	adds	r0, r2, r1
 80081d2:	4283      	cmp	r3, r0
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	d1e0      	bne.n	800819a <_free_r+0x22>
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	6053      	str	r3, [r2, #4]
 80081de:	4408      	add	r0, r1
 80081e0:	6010      	str	r0, [r2, #0]
 80081e2:	e7da      	b.n	800819a <_free_r+0x22>
 80081e4:	d902      	bls.n	80081ec <_free_r+0x74>
 80081e6:	230c      	movs	r3, #12
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	e7d6      	b.n	800819a <_free_r+0x22>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	1821      	adds	r1, r4, r0
 80081f0:	428b      	cmp	r3, r1
 80081f2:	bf04      	itt	eq
 80081f4:	6819      	ldreq	r1, [r3, #0]
 80081f6:	685b      	ldreq	r3, [r3, #4]
 80081f8:	6063      	str	r3, [r4, #4]
 80081fa:	bf04      	itt	eq
 80081fc:	1809      	addeq	r1, r1, r0
 80081fe:	6021      	streq	r1, [r4, #0]
 8008200:	6054      	str	r4, [r2, #4]
 8008202:	e7ca      	b.n	800819a <_free_r+0x22>
 8008204:	bd38      	pop	{r3, r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	20000470 	.word	0x20000470

0800820c <sbrk_aligned>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	4e0f      	ldr	r6, [pc, #60]	@ (800824c <sbrk_aligned+0x40>)
 8008210:	460c      	mov	r4, r1
 8008212:	6831      	ldr	r1, [r6, #0]
 8008214:	4605      	mov	r5, r0
 8008216:	b911      	cbnz	r1, 800821e <sbrk_aligned+0x12>
 8008218:	f000 fcd6 	bl	8008bc8 <_sbrk_r>
 800821c:	6030      	str	r0, [r6, #0]
 800821e:	4621      	mov	r1, r4
 8008220:	4628      	mov	r0, r5
 8008222:	f000 fcd1 	bl	8008bc8 <_sbrk_r>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d103      	bne.n	8008232 <sbrk_aligned+0x26>
 800822a:	f04f 34ff 	mov.w	r4, #4294967295
 800822e:	4620      	mov	r0, r4
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	1cc4      	adds	r4, r0, #3
 8008234:	f024 0403 	bic.w	r4, r4, #3
 8008238:	42a0      	cmp	r0, r4
 800823a:	d0f8      	beq.n	800822e <sbrk_aligned+0x22>
 800823c:	1a21      	subs	r1, r4, r0
 800823e:	4628      	mov	r0, r5
 8008240:	f000 fcc2 	bl	8008bc8 <_sbrk_r>
 8008244:	3001      	adds	r0, #1
 8008246:	d1f2      	bne.n	800822e <sbrk_aligned+0x22>
 8008248:	e7ef      	b.n	800822a <sbrk_aligned+0x1e>
 800824a:	bf00      	nop
 800824c:	2000046c 	.word	0x2000046c

08008250 <_malloc_r>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	1ccd      	adds	r5, r1, #3
 8008256:	f025 0503 	bic.w	r5, r5, #3
 800825a:	3508      	adds	r5, #8
 800825c:	2d0c      	cmp	r5, #12
 800825e:	bf38      	it	cc
 8008260:	250c      	movcc	r5, #12
 8008262:	2d00      	cmp	r5, #0
 8008264:	4606      	mov	r6, r0
 8008266:	db01      	blt.n	800826c <_malloc_r+0x1c>
 8008268:	42a9      	cmp	r1, r5
 800826a:	d904      	bls.n	8008276 <_malloc_r+0x26>
 800826c:	230c      	movs	r3, #12
 800826e:	6033      	str	r3, [r6, #0]
 8008270:	2000      	movs	r0, #0
 8008272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800834c <_malloc_r+0xfc>
 800827a:	f000 f869 	bl	8008350 <__malloc_lock>
 800827e:	f8d8 3000 	ldr.w	r3, [r8]
 8008282:	461c      	mov	r4, r3
 8008284:	bb44      	cbnz	r4, 80082d8 <_malloc_r+0x88>
 8008286:	4629      	mov	r1, r5
 8008288:	4630      	mov	r0, r6
 800828a:	f7ff ffbf 	bl	800820c <sbrk_aligned>
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	4604      	mov	r4, r0
 8008292:	d158      	bne.n	8008346 <_malloc_r+0xf6>
 8008294:	f8d8 4000 	ldr.w	r4, [r8]
 8008298:	4627      	mov	r7, r4
 800829a:	2f00      	cmp	r7, #0
 800829c:	d143      	bne.n	8008326 <_malloc_r+0xd6>
 800829e:	2c00      	cmp	r4, #0
 80082a0:	d04b      	beq.n	800833a <_malloc_r+0xea>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	4639      	mov	r1, r7
 80082a6:	4630      	mov	r0, r6
 80082a8:	eb04 0903 	add.w	r9, r4, r3
 80082ac:	f000 fc8c 	bl	8008bc8 <_sbrk_r>
 80082b0:	4581      	cmp	r9, r0
 80082b2:	d142      	bne.n	800833a <_malloc_r+0xea>
 80082b4:	6821      	ldr	r1, [r4, #0]
 80082b6:	1a6d      	subs	r5, r5, r1
 80082b8:	4629      	mov	r1, r5
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7ff ffa6 	bl	800820c <sbrk_aligned>
 80082c0:	3001      	adds	r0, #1
 80082c2:	d03a      	beq.n	800833a <_malloc_r+0xea>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	442b      	add	r3, r5
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	f8d8 3000 	ldr.w	r3, [r8]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	bb62      	cbnz	r2, 800832c <_malloc_r+0xdc>
 80082d2:	f8c8 7000 	str.w	r7, [r8]
 80082d6:	e00f      	b.n	80082f8 <_malloc_r+0xa8>
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	1b52      	subs	r2, r2, r5
 80082dc:	d420      	bmi.n	8008320 <_malloc_r+0xd0>
 80082de:	2a0b      	cmp	r2, #11
 80082e0:	d917      	bls.n	8008312 <_malloc_r+0xc2>
 80082e2:	1961      	adds	r1, r4, r5
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	6025      	str	r5, [r4, #0]
 80082e8:	bf18      	it	ne
 80082ea:	6059      	strne	r1, [r3, #4]
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	bf08      	it	eq
 80082f0:	f8c8 1000 	streq.w	r1, [r8]
 80082f4:	5162      	str	r2, [r4, r5]
 80082f6:	604b      	str	r3, [r1, #4]
 80082f8:	4630      	mov	r0, r6
 80082fa:	f000 f82f 	bl	800835c <__malloc_unlock>
 80082fe:	f104 000b 	add.w	r0, r4, #11
 8008302:	1d23      	adds	r3, r4, #4
 8008304:	f020 0007 	bic.w	r0, r0, #7
 8008308:	1ac2      	subs	r2, r0, r3
 800830a:	bf1c      	itt	ne
 800830c:	1a1b      	subne	r3, r3, r0
 800830e:	50a3      	strne	r3, [r4, r2]
 8008310:	e7af      	b.n	8008272 <_malloc_r+0x22>
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	42a3      	cmp	r3, r4
 8008316:	bf0c      	ite	eq
 8008318:	f8c8 2000 	streq.w	r2, [r8]
 800831c:	605a      	strne	r2, [r3, #4]
 800831e:	e7eb      	b.n	80082f8 <_malloc_r+0xa8>
 8008320:	4623      	mov	r3, r4
 8008322:	6864      	ldr	r4, [r4, #4]
 8008324:	e7ae      	b.n	8008284 <_malloc_r+0x34>
 8008326:	463c      	mov	r4, r7
 8008328:	687f      	ldr	r7, [r7, #4]
 800832a:	e7b6      	b.n	800829a <_malloc_r+0x4a>
 800832c:	461a      	mov	r2, r3
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	42a3      	cmp	r3, r4
 8008332:	d1fb      	bne.n	800832c <_malloc_r+0xdc>
 8008334:	2300      	movs	r3, #0
 8008336:	6053      	str	r3, [r2, #4]
 8008338:	e7de      	b.n	80082f8 <_malloc_r+0xa8>
 800833a:	230c      	movs	r3, #12
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	4630      	mov	r0, r6
 8008340:	f000 f80c 	bl	800835c <__malloc_unlock>
 8008344:	e794      	b.n	8008270 <_malloc_r+0x20>
 8008346:	6005      	str	r5, [r0, #0]
 8008348:	e7d6      	b.n	80082f8 <_malloc_r+0xa8>
 800834a:	bf00      	nop
 800834c:	20000470 	.word	0x20000470

08008350 <__malloc_lock>:
 8008350:	4801      	ldr	r0, [pc, #4]	@ (8008358 <__malloc_lock+0x8>)
 8008352:	f7ff bf0e 	b.w	8008172 <__retarget_lock_acquire_recursive>
 8008356:	bf00      	nop
 8008358:	20000468 	.word	0x20000468

0800835c <__malloc_unlock>:
 800835c:	4801      	ldr	r0, [pc, #4]	@ (8008364 <__malloc_unlock+0x8>)
 800835e:	f7ff bf09 	b.w	8008174 <__retarget_lock_release_recursive>
 8008362:	bf00      	nop
 8008364:	20000468 	.word	0x20000468

08008368 <__ssputs_r>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	688e      	ldr	r6, [r1, #8]
 800836e:	461f      	mov	r7, r3
 8008370:	42be      	cmp	r6, r7
 8008372:	680b      	ldr	r3, [r1, #0]
 8008374:	4682      	mov	sl, r0
 8008376:	460c      	mov	r4, r1
 8008378:	4690      	mov	r8, r2
 800837a:	d82d      	bhi.n	80083d8 <__ssputs_r+0x70>
 800837c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008380:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008384:	d026      	beq.n	80083d4 <__ssputs_r+0x6c>
 8008386:	6965      	ldr	r5, [r4, #20]
 8008388:	6909      	ldr	r1, [r1, #16]
 800838a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800838e:	eba3 0901 	sub.w	r9, r3, r1
 8008392:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008396:	1c7b      	adds	r3, r7, #1
 8008398:	444b      	add	r3, r9
 800839a:	106d      	asrs	r5, r5, #1
 800839c:	429d      	cmp	r5, r3
 800839e:	bf38      	it	cc
 80083a0:	461d      	movcc	r5, r3
 80083a2:	0553      	lsls	r3, r2, #21
 80083a4:	d527      	bpl.n	80083f6 <__ssputs_r+0x8e>
 80083a6:	4629      	mov	r1, r5
 80083a8:	f7ff ff52 	bl	8008250 <_malloc_r>
 80083ac:	4606      	mov	r6, r0
 80083ae:	b360      	cbz	r0, 800840a <__ssputs_r+0xa2>
 80083b0:	6921      	ldr	r1, [r4, #16]
 80083b2:	464a      	mov	r2, r9
 80083b4:	f000 fc18 	bl	8008be8 <memcpy>
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	6126      	str	r6, [r4, #16]
 80083c6:	6165      	str	r5, [r4, #20]
 80083c8:	444e      	add	r6, r9
 80083ca:	eba5 0509 	sub.w	r5, r5, r9
 80083ce:	6026      	str	r6, [r4, #0]
 80083d0:	60a5      	str	r5, [r4, #8]
 80083d2:	463e      	mov	r6, r7
 80083d4:	42be      	cmp	r6, r7
 80083d6:	d900      	bls.n	80083da <__ssputs_r+0x72>
 80083d8:	463e      	mov	r6, r7
 80083da:	6820      	ldr	r0, [r4, #0]
 80083dc:	4632      	mov	r2, r6
 80083de:	4641      	mov	r1, r8
 80083e0:	f000 fbb6 	bl	8008b50 <memmove>
 80083e4:	68a3      	ldr	r3, [r4, #8]
 80083e6:	1b9b      	subs	r3, r3, r6
 80083e8:	60a3      	str	r3, [r4, #8]
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	4433      	add	r3, r6
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	2000      	movs	r0, #0
 80083f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f6:	462a      	mov	r2, r5
 80083f8:	f000 fc04 	bl	8008c04 <_realloc_r>
 80083fc:	4606      	mov	r6, r0
 80083fe:	2800      	cmp	r0, #0
 8008400:	d1e0      	bne.n	80083c4 <__ssputs_r+0x5c>
 8008402:	6921      	ldr	r1, [r4, #16]
 8008404:	4650      	mov	r0, sl
 8008406:	f7ff feb7 	bl	8008178 <_free_r>
 800840a:	230c      	movs	r3, #12
 800840c:	f8ca 3000 	str.w	r3, [sl]
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	e7e9      	b.n	80083f2 <__ssputs_r+0x8a>
	...

08008420 <_svfiprintf_r>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	4698      	mov	r8, r3
 8008426:	898b      	ldrh	r3, [r1, #12]
 8008428:	061b      	lsls	r3, r3, #24
 800842a:	b09d      	sub	sp, #116	@ 0x74
 800842c:	4607      	mov	r7, r0
 800842e:	460d      	mov	r5, r1
 8008430:	4614      	mov	r4, r2
 8008432:	d510      	bpl.n	8008456 <_svfiprintf_r+0x36>
 8008434:	690b      	ldr	r3, [r1, #16]
 8008436:	b973      	cbnz	r3, 8008456 <_svfiprintf_r+0x36>
 8008438:	2140      	movs	r1, #64	@ 0x40
 800843a:	f7ff ff09 	bl	8008250 <_malloc_r>
 800843e:	6028      	str	r0, [r5, #0]
 8008440:	6128      	str	r0, [r5, #16]
 8008442:	b930      	cbnz	r0, 8008452 <_svfiprintf_r+0x32>
 8008444:	230c      	movs	r3, #12
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b01d      	add	sp, #116	@ 0x74
 800844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008452:	2340      	movs	r3, #64	@ 0x40
 8008454:	616b      	str	r3, [r5, #20]
 8008456:	2300      	movs	r3, #0
 8008458:	9309      	str	r3, [sp, #36]	@ 0x24
 800845a:	2320      	movs	r3, #32
 800845c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008460:	f8cd 800c 	str.w	r8, [sp, #12]
 8008464:	2330      	movs	r3, #48	@ 0x30
 8008466:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008604 <_svfiprintf_r+0x1e4>
 800846a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800846e:	f04f 0901 	mov.w	r9, #1
 8008472:	4623      	mov	r3, r4
 8008474:	469a      	mov	sl, r3
 8008476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800847a:	b10a      	cbz	r2, 8008480 <_svfiprintf_r+0x60>
 800847c:	2a25      	cmp	r2, #37	@ 0x25
 800847e:	d1f9      	bne.n	8008474 <_svfiprintf_r+0x54>
 8008480:	ebba 0b04 	subs.w	fp, sl, r4
 8008484:	d00b      	beq.n	800849e <_svfiprintf_r+0x7e>
 8008486:	465b      	mov	r3, fp
 8008488:	4622      	mov	r2, r4
 800848a:	4629      	mov	r1, r5
 800848c:	4638      	mov	r0, r7
 800848e:	f7ff ff6b 	bl	8008368 <__ssputs_r>
 8008492:	3001      	adds	r0, #1
 8008494:	f000 80a7 	beq.w	80085e6 <_svfiprintf_r+0x1c6>
 8008498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800849a:	445a      	add	r2, fp
 800849c:	9209      	str	r2, [sp, #36]	@ 0x24
 800849e:	f89a 3000 	ldrb.w	r3, [sl]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 809f 	beq.w	80085e6 <_svfiprintf_r+0x1c6>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b2:	f10a 0a01 	add.w	sl, sl, #1
 80084b6:	9304      	str	r3, [sp, #16]
 80084b8:	9307      	str	r3, [sp, #28]
 80084ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084be:	931a      	str	r3, [sp, #104]	@ 0x68
 80084c0:	4654      	mov	r4, sl
 80084c2:	2205      	movs	r2, #5
 80084c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c8:	484e      	ldr	r0, [pc, #312]	@ (8008604 <_svfiprintf_r+0x1e4>)
 80084ca:	f7f7 fe89 	bl	80001e0 <memchr>
 80084ce:	9a04      	ldr	r2, [sp, #16]
 80084d0:	b9d8      	cbnz	r0, 800850a <_svfiprintf_r+0xea>
 80084d2:	06d0      	lsls	r0, r2, #27
 80084d4:	bf44      	itt	mi
 80084d6:	2320      	movmi	r3, #32
 80084d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084dc:	0711      	lsls	r1, r2, #28
 80084de:	bf44      	itt	mi
 80084e0:	232b      	movmi	r3, #43	@ 0x2b
 80084e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084e6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ec:	d015      	beq.n	800851a <_svfiprintf_r+0xfa>
 80084ee:	9a07      	ldr	r2, [sp, #28]
 80084f0:	4654      	mov	r4, sl
 80084f2:	2000      	movs	r0, #0
 80084f4:	f04f 0c0a 	mov.w	ip, #10
 80084f8:	4621      	mov	r1, r4
 80084fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084fe:	3b30      	subs	r3, #48	@ 0x30
 8008500:	2b09      	cmp	r3, #9
 8008502:	d94b      	bls.n	800859c <_svfiprintf_r+0x17c>
 8008504:	b1b0      	cbz	r0, 8008534 <_svfiprintf_r+0x114>
 8008506:	9207      	str	r2, [sp, #28]
 8008508:	e014      	b.n	8008534 <_svfiprintf_r+0x114>
 800850a:	eba0 0308 	sub.w	r3, r0, r8
 800850e:	fa09 f303 	lsl.w	r3, r9, r3
 8008512:	4313      	orrs	r3, r2
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	46a2      	mov	sl, r4
 8008518:	e7d2      	b.n	80084c0 <_svfiprintf_r+0xa0>
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	1d19      	adds	r1, r3, #4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	9103      	str	r1, [sp, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	bfbb      	ittet	lt
 8008526:	425b      	neglt	r3, r3
 8008528:	f042 0202 	orrlt.w	r2, r2, #2
 800852c:	9307      	strge	r3, [sp, #28]
 800852e:	9307      	strlt	r3, [sp, #28]
 8008530:	bfb8      	it	lt
 8008532:	9204      	strlt	r2, [sp, #16]
 8008534:	7823      	ldrb	r3, [r4, #0]
 8008536:	2b2e      	cmp	r3, #46	@ 0x2e
 8008538:	d10a      	bne.n	8008550 <_svfiprintf_r+0x130>
 800853a:	7863      	ldrb	r3, [r4, #1]
 800853c:	2b2a      	cmp	r3, #42	@ 0x2a
 800853e:	d132      	bne.n	80085a6 <_svfiprintf_r+0x186>
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	1d1a      	adds	r2, r3, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	9203      	str	r2, [sp, #12]
 8008548:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800854c:	3402      	adds	r4, #2
 800854e:	9305      	str	r3, [sp, #20]
 8008550:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008614 <_svfiprintf_r+0x1f4>
 8008554:	7821      	ldrb	r1, [r4, #0]
 8008556:	2203      	movs	r2, #3
 8008558:	4650      	mov	r0, sl
 800855a:	f7f7 fe41 	bl	80001e0 <memchr>
 800855e:	b138      	cbz	r0, 8008570 <_svfiprintf_r+0x150>
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	eba0 000a 	sub.w	r0, r0, sl
 8008566:	2240      	movs	r2, #64	@ 0x40
 8008568:	4082      	lsls	r2, r0
 800856a:	4313      	orrs	r3, r2
 800856c:	3401      	adds	r4, #1
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008574:	4824      	ldr	r0, [pc, #144]	@ (8008608 <_svfiprintf_r+0x1e8>)
 8008576:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800857a:	2206      	movs	r2, #6
 800857c:	f7f7 fe30 	bl	80001e0 <memchr>
 8008580:	2800      	cmp	r0, #0
 8008582:	d036      	beq.n	80085f2 <_svfiprintf_r+0x1d2>
 8008584:	4b21      	ldr	r3, [pc, #132]	@ (800860c <_svfiprintf_r+0x1ec>)
 8008586:	bb1b      	cbnz	r3, 80085d0 <_svfiprintf_r+0x1b0>
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	3307      	adds	r3, #7
 800858c:	f023 0307 	bic.w	r3, r3, #7
 8008590:	3308      	adds	r3, #8
 8008592:	9303      	str	r3, [sp, #12]
 8008594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008596:	4433      	add	r3, r6
 8008598:	9309      	str	r3, [sp, #36]	@ 0x24
 800859a:	e76a      	b.n	8008472 <_svfiprintf_r+0x52>
 800859c:	fb0c 3202 	mla	r2, ip, r2, r3
 80085a0:	460c      	mov	r4, r1
 80085a2:	2001      	movs	r0, #1
 80085a4:	e7a8      	b.n	80084f8 <_svfiprintf_r+0xd8>
 80085a6:	2300      	movs	r3, #0
 80085a8:	3401      	adds	r4, #1
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	4619      	mov	r1, r3
 80085ae:	f04f 0c0a 	mov.w	ip, #10
 80085b2:	4620      	mov	r0, r4
 80085b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b8:	3a30      	subs	r2, #48	@ 0x30
 80085ba:	2a09      	cmp	r2, #9
 80085bc:	d903      	bls.n	80085c6 <_svfiprintf_r+0x1a6>
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0c6      	beq.n	8008550 <_svfiprintf_r+0x130>
 80085c2:	9105      	str	r1, [sp, #20]
 80085c4:	e7c4      	b.n	8008550 <_svfiprintf_r+0x130>
 80085c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ca:	4604      	mov	r4, r0
 80085cc:	2301      	movs	r3, #1
 80085ce:	e7f0      	b.n	80085b2 <_svfiprintf_r+0x192>
 80085d0:	ab03      	add	r3, sp, #12
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	462a      	mov	r2, r5
 80085d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008610 <_svfiprintf_r+0x1f0>)
 80085d8:	a904      	add	r1, sp, #16
 80085da:	4638      	mov	r0, r7
 80085dc:	f3af 8000 	nop.w
 80085e0:	1c42      	adds	r2, r0, #1
 80085e2:	4606      	mov	r6, r0
 80085e4:	d1d6      	bne.n	8008594 <_svfiprintf_r+0x174>
 80085e6:	89ab      	ldrh	r3, [r5, #12]
 80085e8:	065b      	lsls	r3, r3, #25
 80085ea:	f53f af2d 	bmi.w	8008448 <_svfiprintf_r+0x28>
 80085ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085f0:	e72c      	b.n	800844c <_svfiprintf_r+0x2c>
 80085f2:	ab03      	add	r3, sp, #12
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	462a      	mov	r2, r5
 80085f8:	4b05      	ldr	r3, [pc, #20]	@ (8008610 <_svfiprintf_r+0x1f0>)
 80085fa:	a904      	add	r1, sp, #16
 80085fc:	4638      	mov	r0, r7
 80085fe:	f000 f879 	bl	80086f4 <_printf_i>
 8008602:	e7ed      	b.n	80085e0 <_svfiprintf_r+0x1c0>
 8008604:	0800be81 	.word	0x0800be81
 8008608:	0800be8b 	.word	0x0800be8b
 800860c:	00000000 	.word	0x00000000
 8008610:	08008369 	.word	0x08008369
 8008614:	0800be87 	.word	0x0800be87

08008618 <_printf_common>:
 8008618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	4616      	mov	r6, r2
 800861e:	4698      	mov	r8, r3
 8008620:	688a      	ldr	r2, [r1, #8]
 8008622:	690b      	ldr	r3, [r1, #16]
 8008624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008628:	4293      	cmp	r3, r2
 800862a:	bfb8      	it	lt
 800862c:	4613      	movlt	r3, r2
 800862e:	6033      	str	r3, [r6, #0]
 8008630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008634:	4607      	mov	r7, r0
 8008636:	460c      	mov	r4, r1
 8008638:	b10a      	cbz	r2, 800863e <_printf_common+0x26>
 800863a:	3301      	adds	r3, #1
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	0699      	lsls	r1, r3, #26
 8008642:	bf42      	ittt	mi
 8008644:	6833      	ldrmi	r3, [r6, #0]
 8008646:	3302      	addmi	r3, #2
 8008648:	6033      	strmi	r3, [r6, #0]
 800864a:	6825      	ldr	r5, [r4, #0]
 800864c:	f015 0506 	ands.w	r5, r5, #6
 8008650:	d106      	bne.n	8008660 <_printf_common+0x48>
 8008652:	f104 0a19 	add.w	sl, r4, #25
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	6832      	ldr	r2, [r6, #0]
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	42ab      	cmp	r3, r5
 800865e:	dc26      	bgt.n	80086ae <_printf_common+0x96>
 8008660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	3b00      	subs	r3, #0
 8008668:	bf18      	it	ne
 800866a:	2301      	movne	r3, #1
 800866c:	0692      	lsls	r2, r2, #26
 800866e:	d42b      	bmi.n	80086c8 <_printf_common+0xb0>
 8008670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008674:	4641      	mov	r1, r8
 8008676:	4638      	mov	r0, r7
 8008678:	47c8      	blx	r9
 800867a:	3001      	adds	r0, #1
 800867c:	d01e      	beq.n	80086bc <_printf_common+0xa4>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	6922      	ldr	r2, [r4, #16]
 8008682:	f003 0306 	and.w	r3, r3, #6
 8008686:	2b04      	cmp	r3, #4
 8008688:	bf02      	ittt	eq
 800868a:	68e5      	ldreq	r5, [r4, #12]
 800868c:	6833      	ldreq	r3, [r6, #0]
 800868e:	1aed      	subeq	r5, r5, r3
 8008690:	68a3      	ldr	r3, [r4, #8]
 8008692:	bf0c      	ite	eq
 8008694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008698:	2500      	movne	r5, #0
 800869a:	4293      	cmp	r3, r2
 800869c:	bfc4      	itt	gt
 800869e:	1a9b      	subgt	r3, r3, r2
 80086a0:	18ed      	addgt	r5, r5, r3
 80086a2:	2600      	movs	r6, #0
 80086a4:	341a      	adds	r4, #26
 80086a6:	42b5      	cmp	r5, r6
 80086a8:	d11a      	bne.n	80086e0 <_printf_common+0xc8>
 80086aa:	2000      	movs	r0, #0
 80086ac:	e008      	b.n	80086c0 <_printf_common+0xa8>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4652      	mov	r2, sl
 80086b2:	4641      	mov	r1, r8
 80086b4:	4638      	mov	r0, r7
 80086b6:	47c8      	blx	r9
 80086b8:	3001      	adds	r0, #1
 80086ba:	d103      	bne.n	80086c4 <_printf_common+0xac>
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c4:	3501      	adds	r5, #1
 80086c6:	e7c6      	b.n	8008656 <_printf_common+0x3e>
 80086c8:	18e1      	adds	r1, r4, r3
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	2030      	movs	r0, #48	@ 0x30
 80086ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086d2:	4422      	add	r2, r4
 80086d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086dc:	3302      	adds	r3, #2
 80086de:	e7c7      	b.n	8008670 <_printf_common+0x58>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4622      	mov	r2, r4
 80086e4:	4641      	mov	r1, r8
 80086e6:	4638      	mov	r0, r7
 80086e8:	47c8      	blx	r9
 80086ea:	3001      	adds	r0, #1
 80086ec:	d0e6      	beq.n	80086bc <_printf_common+0xa4>
 80086ee:	3601      	adds	r6, #1
 80086f0:	e7d9      	b.n	80086a6 <_printf_common+0x8e>
	...

080086f4 <_printf_i>:
 80086f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	7e0f      	ldrb	r7, [r1, #24]
 80086fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086fc:	2f78      	cmp	r7, #120	@ 0x78
 80086fe:	4691      	mov	r9, r2
 8008700:	4680      	mov	r8, r0
 8008702:	460c      	mov	r4, r1
 8008704:	469a      	mov	sl, r3
 8008706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800870a:	d807      	bhi.n	800871c <_printf_i+0x28>
 800870c:	2f62      	cmp	r7, #98	@ 0x62
 800870e:	d80a      	bhi.n	8008726 <_printf_i+0x32>
 8008710:	2f00      	cmp	r7, #0
 8008712:	f000 80d2 	beq.w	80088ba <_printf_i+0x1c6>
 8008716:	2f58      	cmp	r7, #88	@ 0x58
 8008718:	f000 80b9 	beq.w	800888e <_printf_i+0x19a>
 800871c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008724:	e03a      	b.n	800879c <_printf_i+0xa8>
 8008726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800872a:	2b15      	cmp	r3, #21
 800872c:	d8f6      	bhi.n	800871c <_printf_i+0x28>
 800872e:	a101      	add	r1, pc, #4	@ (adr r1, 8008734 <_printf_i+0x40>)
 8008730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008734:	0800878d 	.word	0x0800878d
 8008738:	080087a1 	.word	0x080087a1
 800873c:	0800871d 	.word	0x0800871d
 8008740:	0800871d 	.word	0x0800871d
 8008744:	0800871d 	.word	0x0800871d
 8008748:	0800871d 	.word	0x0800871d
 800874c:	080087a1 	.word	0x080087a1
 8008750:	0800871d 	.word	0x0800871d
 8008754:	0800871d 	.word	0x0800871d
 8008758:	0800871d 	.word	0x0800871d
 800875c:	0800871d 	.word	0x0800871d
 8008760:	080088a1 	.word	0x080088a1
 8008764:	080087cb 	.word	0x080087cb
 8008768:	0800885b 	.word	0x0800885b
 800876c:	0800871d 	.word	0x0800871d
 8008770:	0800871d 	.word	0x0800871d
 8008774:	080088c3 	.word	0x080088c3
 8008778:	0800871d 	.word	0x0800871d
 800877c:	080087cb 	.word	0x080087cb
 8008780:	0800871d 	.word	0x0800871d
 8008784:	0800871d 	.word	0x0800871d
 8008788:	08008863 	.word	0x08008863
 800878c:	6833      	ldr	r3, [r6, #0]
 800878e:	1d1a      	adds	r2, r3, #4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6032      	str	r2, [r6, #0]
 8008794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800879c:	2301      	movs	r3, #1
 800879e:	e09d      	b.n	80088dc <_printf_i+0x1e8>
 80087a0:	6833      	ldr	r3, [r6, #0]
 80087a2:	6820      	ldr	r0, [r4, #0]
 80087a4:	1d19      	adds	r1, r3, #4
 80087a6:	6031      	str	r1, [r6, #0]
 80087a8:	0606      	lsls	r6, r0, #24
 80087aa:	d501      	bpl.n	80087b0 <_printf_i+0xbc>
 80087ac:	681d      	ldr	r5, [r3, #0]
 80087ae:	e003      	b.n	80087b8 <_printf_i+0xc4>
 80087b0:	0645      	lsls	r5, r0, #25
 80087b2:	d5fb      	bpl.n	80087ac <_printf_i+0xb8>
 80087b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	da03      	bge.n	80087c4 <_printf_i+0xd0>
 80087bc:	232d      	movs	r3, #45	@ 0x2d
 80087be:	426d      	negs	r5, r5
 80087c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087c4:	4859      	ldr	r0, [pc, #356]	@ (800892c <_printf_i+0x238>)
 80087c6:	230a      	movs	r3, #10
 80087c8:	e011      	b.n	80087ee <_printf_i+0xfa>
 80087ca:	6821      	ldr	r1, [r4, #0]
 80087cc:	6833      	ldr	r3, [r6, #0]
 80087ce:	0608      	lsls	r0, r1, #24
 80087d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80087d4:	d402      	bmi.n	80087dc <_printf_i+0xe8>
 80087d6:	0649      	lsls	r1, r1, #25
 80087d8:	bf48      	it	mi
 80087da:	b2ad      	uxthmi	r5, r5
 80087dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80087de:	4853      	ldr	r0, [pc, #332]	@ (800892c <_printf_i+0x238>)
 80087e0:	6033      	str	r3, [r6, #0]
 80087e2:	bf14      	ite	ne
 80087e4:	230a      	movne	r3, #10
 80087e6:	2308      	moveq	r3, #8
 80087e8:	2100      	movs	r1, #0
 80087ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087ee:	6866      	ldr	r6, [r4, #4]
 80087f0:	60a6      	str	r6, [r4, #8]
 80087f2:	2e00      	cmp	r6, #0
 80087f4:	bfa2      	ittt	ge
 80087f6:	6821      	ldrge	r1, [r4, #0]
 80087f8:	f021 0104 	bicge.w	r1, r1, #4
 80087fc:	6021      	strge	r1, [r4, #0]
 80087fe:	b90d      	cbnz	r5, 8008804 <_printf_i+0x110>
 8008800:	2e00      	cmp	r6, #0
 8008802:	d04b      	beq.n	800889c <_printf_i+0x1a8>
 8008804:	4616      	mov	r6, r2
 8008806:	fbb5 f1f3 	udiv	r1, r5, r3
 800880a:	fb03 5711 	mls	r7, r3, r1, r5
 800880e:	5dc7      	ldrb	r7, [r0, r7]
 8008810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008814:	462f      	mov	r7, r5
 8008816:	42bb      	cmp	r3, r7
 8008818:	460d      	mov	r5, r1
 800881a:	d9f4      	bls.n	8008806 <_printf_i+0x112>
 800881c:	2b08      	cmp	r3, #8
 800881e:	d10b      	bne.n	8008838 <_printf_i+0x144>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	07df      	lsls	r7, r3, #31
 8008824:	d508      	bpl.n	8008838 <_printf_i+0x144>
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	6861      	ldr	r1, [r4, #4]
 800882a:	4299      	cmp	r1, r3
 800882c:	bfde      	ittt	le
 800882e:	2330      	movle	r3, #48	@ 0x30
 8008830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008838:	1b92      	subs	r2, r2, r6
 800883a:	6122      	str	r2, [r4, #16]
 800883c:	f8cd a000 	str.w	sl, [sp]
 8008840:	464b      	mov	r3, r9
 8008842:	aa03      	add	r2, sp, #12
 8008844:	4621      	mov	r1, r4
 8008846:	4640      	mov	r0, r8
 8008848:	f7ff fee6 	bl	8008618 <_printf_common>
 800884c:	3001      	adds	r0, #1
 800884e:	d14a      	bne.n	80088e6 <_printf_i+0x1f2>
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	b004      	add	sp, #16
 8008856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	f043 0320 	orr.w	r3, r3, #32
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	4833      	ldr	r0, [pc, #204]	@ (8008930 <_printf_i+0x23c>)
 8008864:	2778      	movs	r7, #120	@ 0x78
 8008866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	6831      	ldr	r1, [r6, #0]
 800886e:	061f      	lsls	r7, r3, #24
 8008870:	f851 5b04 	ldr.w	r5, [r1], #4
 8008874:	d402      	bmi.n	800887c <_printf_i+0x188>
 8008876:	065f      	lsls	r7, r3, #25
 8008878:	bf48      	it	mi
 800887a:	b2ad      	uxthmi	r5, r5
 800887c:	6031      	str	r1, [r6, #0]
 800887e:	07d9      	lsls	r1, r3, #31
 8008880:	bf44      	itt	mi
 8008882:	f043 0320 	orrmi.w	r3, r3, #32
 8008886:	6023      	strmi	r3, [r4, #0]
 8008888:	b11d      	cbz	r5, 8008892 <_printf_i+0x19e>
 800888a:	2310      	movs	r3, #16
 800888c:	e7ac      	b.n	80087e8 <_printf_i+0xf4>
 800888e:	4827      	ldr	r0, [pc, #156]	@ (800892c <_printf_i+0x238>)
 8008890:	e7e9      	b.n	8008866 <_printf_i+0x172>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f023 0320 	bic.w	r3, r3, #32
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	e7f6      	b.n	800888a <_printf_i+0x196>
 800889c:	4616      	mov	r6, r2
 800889e:	e7bd      	b.n	800881c <_printf_i+0x128>
 80088a0:	6833      	ldr	r3, [r6, #0]
 80088a2:	6825      	ldr	r5, [r4, #0]
 80088a4:	6961      	ldr	r1, [r4, #20]
 80088a6:	1d18      	adds	r0, r3, #4
 80088a8:	6030      	str	r0, [r6, #0]
 80088aa:	062e      	lsls	r6, r5, #24
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	d501      	bpl.n	80088b4 <_printf_i+0x1c0>
 80088b0:	6019      	str	r1, [r3, #0]
 80088b2:	e002      	b.n	80088ba <_printf_i+0x1c6>
 80088b4:	0668      	lsls	r0, r5, #25
 80088b6:	d5fb      	bpl.n	80088b0 <_printf_i+0x1bc>
 80088b8:	8019      	strh	r1, [r3, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	4616      	mov	r6, r2
 80088c0:	e7bc      	b.n	800883c <_printf_i+0x148>
 80088c2:	6833      	ldr	r3, [r6, #0]
 80088c4:	1d1a      	adds	r2, r3, #4
 80088c6:	6032      	str	r2, [r6, #0]
 80088c8:	681e      	ldr	r6, [r3, #0]
 80088ca:	6862      	ldr	r2, [r4, #4]
 80088cc:	2100      	movs	r1, #0
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7f7 fc86 	bl	80001e0 <memchr>
 80088d4:	b108      	cbz	r0, 80088da <_printf_i+0x1e6>
 80088d6:	1b80      	subs	r0, r0, r6
 80088d8:	6060      	str	r0, [r4, #4]
 80088da:	6863      	ldr	r3, [r4, #4]
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	2300      	movs	r3, #0
 80088e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088e4:	e7aa      	b.n	800883c <_printf_i+0x148>
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	4632      	mov	r2, r6
 80088ea:	4649      	mov	r1, r9
 80088ec:	4640      	mov	r0, r8
 80088ee:	47d0      	blx	sl
 80088f0:	3001      	adds	r0, #1
 80088f2:	d0ad      	beq.n	8008850 <_printf_i+0x15c>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	079b      	lsls	r3, r3, #30
 80088f8:	d413      	bmi.n	8008922 <_printf_i+0x22e>
 80088fa:	68e0      	ldr	r0, [r4, #12]
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	4298      	cmp	r0, r3
 8008900:	bfb8      	it	lt
 8008902:	4618      	movlt	r0, r3
 8008904:	e7a6      	b.n	8008854 <_printf_i+0x160>
 8008906:	2301      	movs	r3, #1
 8008908:	4632      	mov	r2, r6
 800890a:	4649      	mov	r1, r9
 800890c:	4640      	mov	r0, r8
 800890e:	47d0      	blx	sl
 8008910:	3001      	adds	r0, #1
 8008912:	d09d      	beq.n	8008850 <_printf_i+0x15c>
 8008914:	3501      	adds	r5, #1
 8008916:	68e3      	ldr	r3, [r4, #12]
 8008918:	9903      	ldr	r1, [sp, #12]
 800891a:	1a5b      	subs	r3, r3, r1
 800891c:	42ab      	cmp	r3, r5
 800891e:	dcf2      	bgt.n	8008906 <_printf_i+0x212>
 8008920:	e7eb      	b.n	80088fa <_printf_i+0x206>
 8008922:	2500      	movs	r5, #0
 8008924:	f104 0619 	add.w	r6, r4, #25
 8008928:	e7f5      	b.n	8008916 <_printf_i+0x222>
 800892a:	bf00      	nop
 800892c:	0800be92 	.word	0x0800be92
 8008930:	0800bea3 	.word	0x0800bea3

08008934 <__sflush_r>:
 8008934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	0716      	lsls	r6, r2, #28
 800893e:	4605      	mov	r5, r0
 8008940:	460c      	mov	r4, r1
 8008942:	d454      	bmi.n	80089ee <__sflush_r+0xba>
 8008944:	684b      	ldr	r3, [r1, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	dc02      	bgt.n	8008950 <__sflush_r+0x1c>
 800894a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd48      	ble.n	80089e2 <__sflush_r+0xae>
 8008950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008952:	2e00      	cmp	r6, #0
 8008954:	d045      	beq.n	80089e2 <__sflush_r+0xae>
 8008956:	2300      	movs	r3, #0
 8008958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800895c:	682f      	ldr	r7, [r5, #0]
 800895e:	6a21      	ldr	r1, [r4, #32]
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	d030      	beq.n	80089c6 <__sflush_r+0x92>
 8008964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	0759      	lsls	r1, r3, #29
 800896a:	d505      	bpl.n	8008978 <__sflush_r+0x44>
 800896c:	6863      	ldr	r3, [r4, #4]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008972:	b10b      	cbz	r3, 8008978 <__sflush_r+0x44>
 8008974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008976:	1ad2      	subs	r2, r2, r3
 8008978:	2300      	movs	r3, #0
 800897a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800897c:	6a21      	ldr	r1, [r4, #32]
 800897e:	4628      	mov	r0, r5
 8008980:	47b0      	blx	r6
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	d106      	bne.n	8008996 <__sflush_r+0x62>
 8008988:	6829      	ldr	r1, [r5, #0]
 800898a:	291d      	cmp	r1, #29
 800898c:	d82b      	bhi.n	80089e6 <__sflush_r+0xb2>
 800898e:	4a2a      	ldr	r2, [pc, #168]	@ (8008a38 <__sflush_r+0x104>)
 8008990:	410a      	asrs	r2, r1
 8008992:	07d6      	lsls	r6, r2, #31
 8008994:	d427      	bmi.n	80089e6 <__sflush_r+0xb2>
 8008996:	2200      	movs	r2, #0
 8008998:	6062      	str	r2, [r4, #4]
 800899a:	04d9      	lsls	r1, r3, #19
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	d504      	bpl.n	80089ac <__sflush_r+0x78>
 80089a2:	1c42      	adds	r2, r0, #1
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0x76>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	b903      	cbnz	r3, 80089ac <__sflush_r+0x78>
 80089aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80089ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ae:	602f      	str	r7, [r5, #0]
 80089b0:	b1b9      	cbz	r1, 80089e2 <__sflush_r+0xae>
 80089b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b6:	4299      	cmp	r1, r3
 80089b8:	d002      	beq.n	80089c0 <__sflush_r+0x8c>
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7ff fbdc 	bl	8008178 <_free_r>
 80089c0:	2300      	movs	r3, #0
 80089c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80089c4:	e00d      	b.n	80089e2 <__sflush_r+0xae>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b0      	blx	r6
 80089cc:	4602      	mov	r2, r0
 80089ce:	1c50      	adds	r0, r2, #1
 80089d0:	d1c9      	bne.n	8008966 <__sflush_r+0x32>
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0c6      	beq.n	8008966 <__sflush_r+0x32>
 80089d8:	2b1d      	cmp	r3, #29
 80089da:	d001      	beq.n	80089e0 <__sflush_r+0xac>
 80089dc:	2b16      	cmp	r3, #22
 80089de:	d11e      	bne.n	8008a1e <__sflush_r+0xea>
 80089e0:	602f      	str	r7, [r5, #0]
 80089e2:	2000      	movs	r0, #0
 80089e4:	e022      	b.n	8008a2c <__sflush_r+0xf8>
 80089e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	e01b      	b.n	8008a26 <__sflush_r+0xf2>
 80089ee:	690f      	ldr	r7, [r1, #16]
 80089f0:	2f00      	cmp	r7, #0
 80089f2:	d0f6      	beq.n	80089e2 <__sflush_r+0xae>
 80089f4:	0793      	lsls	r3, r2, #30
 80089f6:	680e      	ldr	r6, [r1, #0]
 80089f8:	bf08      	it	eq
 80089fa:	694b      	ldreq	r3, [r1, #20]
 80089fc:	600f      	str	r7, [r1, #0]
 80089fe:	bf18      	it	ne
 8008a00:	2300      	movne	r3, #0
 8008a02:	eba6 0807 	sub.w	r8, r6, r7
 8008a06:	608b      	str	r3, [r1, #8]
 8008a08:	f1b8 0f00 	cmp.w	r8, #0
 8008a0c:	dde9      	ble.n	80089e2 <__sflush_r+0xae>
 8008a0e:	6a21      	ldr	r1, [r4, #32]
 8008a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a12:	4643      	mov	r3, r8
 8008a14:	463a      	mov	r2, r7
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	dc08      	bgt.n	8008a30 <__sflush_r+0xfc>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	4407      	add	r7, r0
 8008a32:	eba8 0800 	sub.w	r8, r8, r0
 8008a36:	e7e7      	b.n	8008a08 <__sflush_r+0xd4>
 8008a38:	dfbffffe 	.word	0xdfbffffe

08008a3c <_fflush_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	690b      	ldr	r3, [r1, #16]
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b913      	cbnz	r3, 8008a4c <_fflush_r+0x10>
 8008a46:	2500      	movs	r5, #0
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	b118      	cbz	r0, 8008a56 <_fflush_r+0x1a>
 8008a4e:	6a03      	ldr	r3, [r0, #32]
 8008a50:	b90b      	cbnz	r3, 8008a56 <_fflush_r+0x1a>
 8008a52:	f7ff f989 	bl	8007d68 <__sinit>
 8008a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f3      	beq.n	8008a46 <_fflush_r+0xa>
 8008a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a60:	07d0      	lsls	r0, r2, #31
 8008a62:	d404      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a64:	0599      	lsls	r1, r3, #22
 8008a66:	d402      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a6a:	f7ff fb82 	bl	8008172 <__retarget_lock_acquire_recursive>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	4621      	mov	r1, r4
 8008a72:	f7ff ff5f 	bl	8008934 <__sflush_r>
 8008a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a78:	07da      	lsls	r2, r3, #31
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	d4e4      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	059b      	lsls	r3, r3, #22
 8008a82:	d4e1      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a86:	f7ff fb75 	bl	8008174 <__retarget_lock_release_recursive>
 8008a8a:	e7dd      	b.n	8008a48 <_fflush_r+0xc>

08008a8c <__swhatbuf_r>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	460c      	mov	r4, r1
 8008a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a94:	2900      	cmp	r1, #0
 8008a96:	b096      	sub	sp, #88	@ 0x58
 8008a98:	4615      	mov	r5, r2
 8008a9a:	461e      	mov	r6, r3
 8008a9c:	da0d      	bge.n	8008aba <__swhatbuf_r+0x2e>
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008aa4:	f04f 0100 	mov.w	r1, #0
 8008aa8:	bf14      	ite	ne
 8008aaa:	2340      	movne	r3, #64	@ 0x40
 8008aac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	6031      	str	r1, [r6, #0]
 8008ab4:	602b      	str	r3, [r5, #0]
 8008ab6:	b016      	add	sp, #88	@ 0x58
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	466a      	mov	r2, sp
 8008abc:	f000 f862 	bl	8008b84 <_fstat_r>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	dbec      	blt.n	8008a9e <__swhatbuf_r+0x12>
 8008ac4:	9901      	ldr	r1, [sp, #4]
 8008ac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008aca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ace:	4259      	negs	r1, r3
 8008ad0:	4159      	adcs	r1, r3
 8008ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ad6:	e7eb      	b.n	8008ab0 <__swhatbuf_r+0x24>

08008ad8 <__smakebuf_r>:
 8008ad8:	898b      	ldrh	r3, [r1, #12]
 8008ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008adc:	079d      	lsls	r5, r3, #30
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	d507      	bpl.n	8008af4 <__smakebuf_r+0x1c>
 8008ae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	2301      	movs	r3, #1
 8008aee:	6163      	str	r3, [r4, #20]
 8008af0:	b003      	add	sp, #12
 8008af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af4:	ab01      	add	r3, sp, #4
 8008af6:	466a      	mov	r2, sp
 8008af8:	f7ff ffc8 	bl	8008a8c <__swhatbuf_r>
 8008afc:	9f00      	ldr	r7, [sp, #0]
 8008afe:	4605      	mov	r5, r0
 8008b00:	4639      	mov	r1, r7
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff fba4 	bl	8008250 <_malloc_r>
 8008b08:	b948      	cbnz	r0, 8008b1e <__smakebuf_r+0x46>
 8008b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b0e:	059a      	lsls	r2, r3, #22
 8008b10:	d4ee      	bmi.n	8008af0 <__smakebuf_r+0x18>
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	f043 0302 	orr.w	r3, r3, #2
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	e7e2      	b.n	8008ae4 <__smakebuf_r+0xc>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	6020      	str	r0, [r4, #0]
 8008b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b2e:	b15b      	cbz	r3, 8008b48 <__smakebuf_r+0x70>
 8008b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b34:	4630      	mov	r0, r6
 8008b36:	f000 f837 	bl	8008ba8 <_isatty_r>
 8008b3a:	b128      	cbz	r0, 8008b48 <__smakebuf_r+0x70>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f023 0303 	bic.w	r3, r3, #3
 8008b42:	f043 0301 	orr.w	r3, r3, #1
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	89a3      	ldrh	r3, [r4, #12]
 8008b4a:	431d      	orrs	r5, r3
 8008b4c:	81a5      	strh	r5, [r4, #12]
 8008b4e:	e7cf      	b.n	8008af0 <__smakebuf_r+0x18>

08008b50 <memmove>:
 8008b50:	4288      	cmp	r0, r1
 8008b52:	b510      	push	{r4, lr}
 8008b54:	eb01 0402 	add.w	r4, r1, r2
 8008b58:	d902      	bls.n	8008b60 <memmove+0x10>
 8008b5a:	4284      	cmp	r4, r0
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	d807      	bhi.n	8008b70 <memmove+0x20>
 8008b60:	1e43      	subs	r3, r0, #1
 8008b62:	42a1      	cmp	r1, r4
 8008b64:	d008      	beq.n	8008b78 <memmove+0x28>
 8008b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b6e:	e7f8      	b.n	8008b62 <memmove+0x12>
 8008b70:	4402      	add	r2, r0
 8008b72:	4601      	mov	r1, r0
 8008b74:	428a      	cmp	r2, r1
 8008b76:	d100      	bne.n	8008b7a <memmove+0x2a>
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b82:	e7f7      	b.n	8008b74 <memmove+0x24>

08008b84 <_fstat_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	@ (8008ba4 <_fstat_r+0x20>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	602b      	str	r3, [r5, #0]
 8008b92:	f7fa f9ce 	bl	8002f32 <_fstat>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	d102      	bne.n	8008ba0 <_fstat_r+0x1c>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	b103      	cbz	r3, 8008ba0 <_fstat_r+0x1c>
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	bd38      	pop	{r3, r4, r5, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000464 	.word	0x20000464

08008ba8 <_isatty_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d06      	ldr	r5, [pc, #24]	@ (8008bc4 <_isatty_r+0x1c>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	f7fa f9cd 	bl	8002f52 <_isatty>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_isatty_r+0x1a>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_isatty_r+0x1a>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20000464 	.word	0x20000464

08008bc8 <_sbrk_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d06      	ldr	r5, [pc, #24]	@ (8008be4 <_sbrk_r+0x1c>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7fa f9d6 	bl	8002f84 <_sbrk>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_sbrk_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_sbrk_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	20000464 	.word	0x20000464

08008be8 <memcpy>:
 8008be8:	440a      	add	r2, r1
 8008bea:	4291      	cmp	r1, r2
 8008bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf0:	d100      	bne.n	8008bf4 <memcpy+0xc>
 8008bf2:	4770      	bx	lr
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	d1f9      	bne.n	8008bf6 <memcpy+0xe>
 8008c02:	bd10      	pop	{r4, pc}

08008c04 <_realloc_r>:
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4615      	mov	r5, r2
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	b921      	cbnz	r1, 8008c1a <_realloc_r+0x16>
 8008c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c14:	4611      	mov	r1, r2
 8008c16:	f7ff bb1b 	b.w	8008250 <_malloc_r>
 8008c1a:	b92a      	cbnz	r2, 8008c28 <_realloc_r+0x24>
 8008c1c:	f7ff faac 	bl	8008178 <_free_r>
 8008c20:	2400      	movs	r4, #0
 8008c22:	4620      	mov	r0, r4
 8008c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c28:	f000 f81a 	bl	8008c60 <_malloc_usable_size_r>
 8008c2c:	4285      	cmp	r5, r0
 8008c2e:	4606      	mov	r6, r0
 8008c30:	d802      	bhi.n	8008c38 <_realloc_r+0x34>
 8008c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c36:	d8f4      	bhi.n	8008c22 <_realloc_r+0x1e>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	f7ff fb08 	bl	8008250 <_malloc_r>
 8008c40:	4607      	mov	r7, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0ec      	beq.n	8008c20 <_realloc_r+0x1c>
 8008c46:	42b5      	cmp	r5, r6
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	bf28      	it	cs
 8008c4e:	4632      	movcs	r2, r6
 8008c50:	f7ff ffca 	bl	8008be8 <memcpy>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f7ff fa8e 	bl	8008178 <_free_r>
 8008c5c:	463c      	mov	r4, r7
 8008c5e:	e7e0      	b.n	8008c22 <_realloc_r+0x1e>

08008c60 <_malloc_usable_size_r>:
 8008c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c64:	1f18      	subs	r0, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bfbc      	itt	lt
 8008c6a:	580b      	ldrlt	r3, [r1, r0]
 8008c6c:	18c0      	addlt	r0, r0, r3
 8008c6e:	4770      	bx	lr

08008c70 <_init>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr

08008c7c <_fini>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr
