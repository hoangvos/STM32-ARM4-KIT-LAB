
Ex02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009034  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009268  08009268  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009270  08009270  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009274  08009274  00019274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000408  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000488  20000488  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ee1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000488c  00000000  00000000  00040f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  00045820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001528  00000000  00000000  00046f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d96  00000000  00000000  00048470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020b9f  00000000  00000000  0006f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e003d  00000000  00000000  0008fda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fde2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062d4  00000000  00000000  0016fe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091ac 	.word	0x080091ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080091ac 	.word	0x080091ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <MX_ADC1_Init+0x108>)
 8000df8:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <MX_ADC1_Init+0x10c>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <MX_ADC1_Init+0x108>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b35      	ldr	r3, [pc, #212]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e24:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <MX_ADC1_Init+0x110>)
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e30:	2205      	movs	r2, #5
 8000e32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e42:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e44:	f002 f93a 	bl	80030bc <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f001 fb65 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e52:	2308      	movs	r3, #8
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e64:	f002 fa9c 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e6e:	f001 fb55 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e72:	2309      	movs	r3, #9
 8000e74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481b      	ldr	r0, [pc, #108]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e80:	f002 fa8e 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e8a:	f001 fb47 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e92:	2303      	movs	r3, #3
 8000e94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e9c:	f002 fa80 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ea6:	f001 fb39 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_ADC1_Init+0x108>)
 8000eb8:	f002 fa72 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ec2:	f001 fb2b 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <MX_ADC1_Init+0x108>)
 8000ed4:	f002 fa64 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ede:	f001 fb1d 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000f0 	.word	0x200000f0
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	0f000001 	.word	0x0f000001

08000ef8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a3c      	ldr	r2, [pc, #240]	; (8001008 <HAL_ADC_MspInit+0x110>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d171      	bne.n	8000ffe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a3a      	ldr	r2, [pc, #232]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b34      	ldr	r3, [pc, #208]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a33      	ldr	r2, [pc, #204]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <HAL_ADC_MspInit+0x118>)
 8000f82:	f003 f9c1 	bl	8004308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f86:	2303      	movs	r3, #3
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	481e      	ldr	r0, [pc, #120]	; (8001014 <HAL_ADC_MspInit+0x11c>)
 8000f9a:	f003 f9b5 	bl	8004308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_ADC_MspInit+0x124>)
 8000fa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe2:	480d      	ldr	r0, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fe4:	f002 fd8e 	bl	8003b04 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fee:	f001 fa95 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40012000 	.word	0x40012000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020400 	.word	0x40020400
 8001018:	20000138 	.word	0x20000138
 800101c:	40026410 	.word	0x40026410

08001020 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2108      	movs	r1, #8
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <button_init+0x14>)
 800102a:	f003 fb09 	bl	8004640 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020c00 	.word	0x40020c00

08001038 <button_Scan>:

void button_Scan(){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2108      	movs	r1, #8
 8001042:	482f      	ldr	r0, [pc, #188]	; (8001100 <button_Scan+0xc8>)
 8001044:	f003 fafc 	bl	8004640 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	2108      	movs	r1, #8
 800104c:	482c      	ldr	r0, [pc, #176]	; (8001100 <button_Scan+0xc8>)
 800104e:	f003 faf7 	bl	8004640 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001052:	230a      	movs	r3, #10
 8001054:	2202      	movs	r2, #2
 8001056:	492b      	ldr	r1, [pc, #172]	; (8001104 <button_Scan+0xcc>)
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <button_Scan+0xd0>)
 800105a:	f004 ff4c 	bl	8005ef6 <HAL_SPI_Receive>
	  int button_index = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001066:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	e03f      	b.n	80010ee <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db06      	blt.n	8001082 <button_Scan+0x4a>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b03      	cmp	r3, #3
 8001078:	dc03      	bgt.n	8001082 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3304      	adds	r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e018      	b.n	80010b4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b03      	cmp	r3, #3
 8001086:	dd07      	ble.n	8001098 <button_Scan+0x60>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b07      	cmp	r3, #7
 800108c:	dc04      	bgt.n	8001098 <button_Scan+0x60>
			  button_index = 7 - i;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f1c3 0307 	rsb	r3, r3, #7
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e00d      	b.n	80010b4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b07      	cmp	r3, #7
 800109c:	dd06      	ble.n	80010ac <button_Scan+0x74>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0b      	cmp	r3, #11
 80010a2:	dc03      	bgt.n	80010ac <button_Scan+0x74>
			  button_index = i + 4;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3304      	adds	r3, #4
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e003      	b.n	80010b4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1c3 0317 	rsb	r3, r3, #23
 80010b2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <button_Scan+0xcc>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	897b      	ldrh	r3, [r7, #10]
 80010ba:	4013      	ands	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <button_Scan+0x96>
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <button_Scan+0xd4>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2100      	movs	r1, #0
 80010c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010cc:	e009      	b.n	80010e2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <button_Scan+0xd4>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b299      	uxth	r1, r3
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <button_Scan+0xd4>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80010e2:	897b      	ldrh	r3, [r7, #10]
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3301      	adds	r3, #1
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	ddbc      	ble.n	800106e <button_Scan+0x36>
	  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020c00 	.word	0x40020c00
 8001104:	2000009c 	.word	0x2000009c
 8001108:	200002bc 	.word	0x200002bc
 800110c:	20000198 	.word	0x20000198

08001110 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001114:	2100      	movs	r1, #0
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <buzzer_init+0x10>)
 8001118:	f005 fc2e 	bl	8006978 <HAL_TIM_PWM_Start>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000314 	.word	0x20000314

08001124 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <buzzer_SetVolume+0x28>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <buzzer_SetVolume+0x28>)
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <buzzer_SetVolume+0x2c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	2000009e 	.word	0x2000009e
 8001150:	20000314 	.word	0x20000314

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_DMA_Init+0x3c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <MX_DMA_Init+0x3c>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_DMA_Init+0x3c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2038      	movs	r0, #56	; 0x38
 800117c:	f002 fc8b 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001180:	2038      	movs	r0, #56	; 0x38
 8001182:	f002 fca4 	bl	8003ace <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <draw_graph>:
#include "draw_graph.h"

int power_buffer[POWER_BUFFER_LENGTH] = {};
int power_buffer_counter = 0;

void draw_graph() {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	ed2d 8b02 	vpush	{d8}
 800119a:	b087      	sub	sp, #28
 800119c:	af02      	add	r7, sp, #8
	int temp = sensor_GetCurrent()*sensor_GetVoltage();
 800119e:	f001 fa33 	bl	8002608 <sensor_GetCurrent>
 80011a2:	eeb0 8a40 	vmov.f32	s16, s0
 80011a6:	f001 f9f3 	bl	8002590 <sensor_GetVoltage>
 80011aa:	eef0 7a40 	vmov.f32	s15, s0
 80011ae:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b6:	ee17 3a90 	vmov	r3, s15
 80011ba:	603b      	str	r3, [r7, #0]
	power_buffer[power_buffer_counter] = temp;
 80011bc:	4b53      	ldr	r3, [pc, #332]	; (800130c <draw_graph+0x178>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4953      	ldr	r1, [pc, #332]	; (8001310 <draw_graph+0x17c>)
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	++power_buffer_counter;
 80011c8:	4b50      	ldr	r3, [pc, #320]	; (800130c <draw_graph+0x178>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a4f      	ldr	r2, [pc, #316]	; (800130c <draw_graph+0x178>)
 80011d0:	6013      	str	r3, [r2, #0]
	if (power_buffer_counter == POWER_BUFFER_LENGTH)
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <draw_graph+0x178>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b0b      	cmp	r3, #11
 80011d8:	d102      	bne.n	80011e0 <draw_graph+0x4c>
		power_buffer_counter = 0;
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <draw_graph+0x178>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
	lcd_Fill(20, 0, 220, 200, WHITE);
 80011e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	23c8      	movs	r3, #200	; 0xc8
 80011e8:	22dc      	movs	r2, #220	; 0xdc
 80011ea:	2100      	movs	r1, #0
 80011ec:	2014      	movs	r0, #20
 80011ee:	f000 fbd9 	bl	80019a4 <lcd_Fill>
	lcd_DrawLine(20, 100, 20, 200, RED);
 80011f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	23c8      	movs	r3, #200	; 0xc8
 80011fa:	2214      	movs	r2, #20
 80011fc:	2164      	movs	r1, #100	; 0x64
 80011fe:	2014      	movs	r0, #20
 8001200:	f000 fc1d 	bl	8001a3e <lcd_DrawLine>
	lcd_DrawLine(20, 200, 220, 200, RED);
 8001204:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	23c8      	movs	r3, #200	; 0xc8
 800120c:	22dc      	movs	r2, #220	; 0xdc
 800120e:	21c8      	movs	r1, #200	; 0xc8
 8001210:	2014      	movs	r0, #20
 8001212:	f000 fc14 	bl	8001a3e <lcd_DrawLine>
	int x = 20;
 8001216:	2314      	movs	r3, #20
 8001218:	60fb      	str	r3, [r7, #12]
	for (int i = power_buffer_counter + 1; i < POWER_BUFFER_LENGTH; ++i){
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <draw_graph+0x178>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	e021      	b.n	8001268 <draw_graph+0xd4>
		lcd_DrawLine(x, 200 - power_buffer[i-1], x + 20, 200 - power_buffer[i], RED);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	b298      	uxth	r0, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3b01      	subs	r3, #1
 800122c:	4a38      	ldr	r2, [pc, #224]	; (8001310 <draw_graph+0x17c>)
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	b29b      	uxth	r3, r3
 8001234:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001238:	b299      	uxth	r1, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3314      	adds	r3, #20
 8001240:	b29a      	uxth	r2, r3
 8001242:	4c33      	ldr	r4, [pc, #204]	; (8001310 <draw_graph+0x17c>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800124a:	b29b      	uxth	r3, r3
 800124c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001250:	b29b      	uxth	r3, r3
 8001252:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001256:	9400      	str	r4, [sp, #0]
 8001258:	f000 fbf1 	bl	8001a3e <lcd_DrawLine>
		x += 20;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3314      	adds	r3, #20
 8001260:	60fb      	str	r3, [r7, #12]
	for (int i = power_buffer_counter + 1; i < POWER_BUFFER_LENGTH; ++i){
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3301      	adds	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b0a      	cmp	r3, #10
 800126c:	ddda      	ble.n	8001224 <draw_graph+0x90>
	}
	if (x < 220) {
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2bdb      	cmp	r3, #219	; 0xdb
 8001272:	dc44      	bgt.n	80012fe <draw_graph+0x16a>
		lcd_DrawLine(x, 200 - power_buffer[POWER_BUFFER_LENGTH - 1], x + 20, 200 - power_buffer[0], RED);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	b298      	uxth	r0, r3
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <draw_graph+0x17c>)
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	b29b      	uxth	r3, r3
 800127e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001282:	b299      	uxth	r1, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	b29b      	uxth	r3, r3
 8001288:	3314      	adds	r3, #20
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <draw_graph+0x17c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001296:	b29b      	uxth	r3, r3
 8001298:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800129c:	9400      	str	r4, [sp, #0]
 800129e:	f000 fbce 	bl	8001a3e <lcd_DrawLine>
		x += 20;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3314      	adds	r3, #20
 80012a6:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < power_buffer_counter - 1; ++i) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	e021      	b.n	80012f2 <draw_graph+0x15e>
			lcd_DrawLine(x, 200 - power_buffer[i], x + 20, 200 - power_buffer[i + 1], RED);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b298      	uxth	r0, r3
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <draw_graph+0x17c>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80012c0:	b299      	uxth	r1, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3314      	adds	r3, #20
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4c10      	ldr	r4, [pc, #64]	; (8001310 <draw_graph+0x17c>)
 80012d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80012e0:	9400      	str	r4, [sp, #0]
 80012e2:	f000 fbac 	bl	8001a3e <lcd_DrawLine>
			x += 20;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3314      	adds	r3, #20
 80012ea:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < power_buffer_counter - 1; ++i) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <draw_graph+0x178>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbd7      	blt.n	80012ae <draw_graph+0x11a>
		}
	}
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	ecbd 8b02 	vpop	{d8}
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	200000cc 	.word	0x200000cc
 8001310:	200000a0 	.word	0x200000a0

08001314 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800131a:	230a      	movs	r3, #10
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2307      	movs	r3, #7
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <ds3231_ReadTime+0xa4>)
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2200      	movs	r2, #0
 800132a:	21d0      	movs	r1, #208	; 0xd0
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <ds3231_ReadTime+0xa8>)
 800132e:	f003 faff 	bl	8004930 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <ds3231_ReadTime+0xa4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f001 fde6 	bl	8002f08 <BCD2DEC>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <ds3231_ReadTime+0xac>)
 8001342:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <ds3231_ReadTime+0xa4>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fddd 	bl	8002f08 <BCD2DEC>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <ds3231_ReadTime+0xb0>)
 8001354:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <ds3231_ReadTime+0xa4>)
 8001358:	789b      	ldrb	r3, [r3, #2]
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fdd4 	bl	8002f08 <BCD2DEC>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <ds3231_ReadTime+0xb4>)
 8001366:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <ds3231_ReadTime+0xa4>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fdcb 	bl	8002f08 <BCD2DEC>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <ds3231_ReadTime+0xb8>)
 8001378:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <ds3231_ReadTime+0xa4>)
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fdc2 	bl	8002f08 <BCD2DEC>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <ds3231_ReadTime+0xbc>)
 800138a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <ds3231_ReadTime+0xa4>)
 800138e:	795b      	ldrb	r3, [r3, #5]
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fdb9 	bl	8002f08 <BCD2DEC>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <ds3231_ReadTime+0xc0>)
 800139c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <ds3231_ReadTime+0xa4>)
 80013a0:	799b      	ldrb	r3, [r3, #6]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fdb0 	bl	8002f08 <BCD2DEC>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <ds3231_ReadTime+0xc4>)
 80013ae:	701a      	strb	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001c0 	.word	0x200001c0
 80013bc:	20000218 	.word	0x20000218
 80013c0:	200001b8 	.word	0x200001b8
 80013c4:	200001ba 	.word	0x200001ba
 80013c8:	200001bd 	.word	0x200001bd
 80013cc:	200001bc 	.word	0x200001bc
 80013d0:	200001bb 	.word	0x200001bb
 80013d4:	200001be 	.word	0x200001be
 80013d8:	200001b9 	.word	0x200001b9

080013dc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <MX_FSMC_Init+0xec>)
 800140a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800140e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001412:	4a2e      	ldr	r2, [pc, #184]	; (80014cc <MX_FSMC_Init+0xf0>)
 8001414:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <MX_FSMC_Init+0xec>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <MX_FSMC_Init+0xec>)
 800142a:	2210      	movs	r2, #16
 800142c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_FSMC_Init+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_FSMC_Init+0xec>)
 800145e:	2200      	movs	r2, #0
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_FSMC_Init+0xec>)
 8001464:	2200      	movs	r2, #0
 8001466:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_FSMC_Init+0xec>)
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800146e:	230f      	movs	r3, #15
 8001470:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001472:	230f      	movs	r3, #15
 8001474:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001476:	233c      	movs	r3, #60	; 0x3c
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800147e:	2310      	movs	r3, #16
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001482:	2311      	movs	r3, #17
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001486:	2300      	movs	r3, #0
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800148a:	2308      	movs	r3, #8
 800148c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800148e:	230f      	movs	r3, #15
 8001490:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001492:	2309      	movs	r3, #9
 8001494:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800149a:	2310      	movs	r3, #16
 800149c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800149e:	2311      	movs	r3, #17
 80014a0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80014a6:	463a      	mov	r2, r7
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_FSMC_Init+0xec>)
 80014b0:	f005 f904 	bl	80066bc <HAL_SRAM_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80014ba:	f001 f82f 	bl	800251c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80014be:	bf00      	nop
 80014c0:	3738      	adds	r7, #56	; 0x38
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001c8 	.word	0x200001c8
 80014cc:	a0000104 	.word	0xa0000104

080014d0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_FSMC_MspInit+0x88>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d131      	bne.n	8001550 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_FSMC_MspInit+0x88>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_FSMC_MspInit+0x8c>)
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_FSMC_MspInit+0x8c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6393      	str	r3, [r2, #56]	; 0x38
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_FSMC_MspInit+0x8c>)
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800150e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001512:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001520:	230c      	movs	r3, #12
 8001522:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_FSMC_MspInit+0x90>)
 800152a:	f002 feed 	bl	8004308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800152e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001532:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001540:	230c      	movs	r3, #12
 8001542:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <HAL_FSMC_MspInit+0x94>)
 800154a:	f002 fedd 	bl	8004308 <HAL_GPIO_Init>
 800154e:	e000      	b.n	8001552 <HAL_FSMC_MspInit+0x82>
    return;
 8001550:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200000d0 	.word	0x200000d0
 800155c:	40023800 	.word	0x40023800
 8001560:	40021000 	.word	0x40021000
 8001564:	40020c00 	.word	0x40020c00

08001568 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001570:	f7ff ffae 	bl	80014d0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a69      	ldr	r2, [pc, #420]	; (8001740 <MX_GPIO_Init+0x1c4>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	623b      	str	r3, [r7, #32]
 80015ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a62      	ldr	r2, [pc, #392]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b60      	ldr	r3, [pc, #384]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	4b55      	ldr	r3, [pc, #340]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a54      	ldr	r2, [pc, #336]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b52      	ldr	r3, [pc, #328]	; (8001740 <MX_GPIO_Init+0x1c4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b4e      	ldr	r3, [pc, #312]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <MX_GPIO_Init+0x1c4>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b47      	ldr	r3, [pc, #284]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a46      	ldr	r2, [pc, #280]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b44      	ldr	r3, [pc, #272]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b40      	ldr	r3, [pc, #256]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a3f      	ldr	r2, [pc, #252]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <MX_GPIO_Init+0x1c4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <MX_GPIO_Init+0x1c4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a38      	ldr	r2, [pc, #224]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MX_GPIO_Init+0x1c4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2170      	movs	r1, #112	; 0x70
 8001676:	4833      	ldr	r0, [pc, #204]	; (8001744 <MX_GPIO_Init+0x1c8>)
 8001678:	f002 ffe2 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001682:	4831      	ldr	r0, [pc, #196]	; (8001748 <MX_GPIO_Init+0x1cc>)
 8001684:	f002 ffdc 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	482f      	ldr	r0, [pc, #188]	; (800174c <MX_GPIO_Init+0x1d0>)
 800168e:	f002 ffd7 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001698:	482d      	ldr	r0, [pc, #180]	; (8001750 <MX_GPIO_Init+0x1d4>)
 800169a:	f002 ffd1 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2108      	movs	r1, #8
 80016a2:	482c      	ldr	r0, [pc, #176]	; (8001754 <MX_GPIO_Init+0x1d8>)
 80016a4:	f002 ffcc 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80016a8:	2370      	movs	r3, #112	; 0x70
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <MX_GPIO_Init+0x1c8>)
 80016c0:	f002 fe22 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	481a      	ldr	r0, [pc, #104]	; (8001748 <MX_GPIO_Init+0x1cc>)
 80016de:	f002 fe13 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_GPIO_Init+0x1d0>)
 80016fa:	f002 fe05 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80016fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_GPIO_Init+0x1d4>)
 8001718:	f002 fdf6 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800171c:	2308      	movs	r3, #8
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	4808      	ldr	r0, [pc, #32]	; (8001754 <MX_GPIO_Init+0x1d8>)
 8001734:	f002 fde8 	bl	8004308 <HAL_GPIO_Init>

}
 8001738:	bf00      	nop
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800
 8001744:	40021000 	.word	0x40021000
 8001748:	40020800 	.word	0x40020800
 800174c:	40021800 	.word	0x40021800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020c00 	.word	0x40020c00

08001758 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_I2C1_Init+0x50>)
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <MX_I2C1_Init+0x54>)
 8001760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_I2C1_Init+0x58>)
 8001766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001796:	f002 ff87 	bl	80046a8 <HAL_I2C_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a0:	f000 febc 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000218 	.word	0x20000218
 80017ac:	40005400 	.word	0x40005400
 80017b0:	000186a0 	.word	0x000186a0

080017b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_I2C_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_I2C_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_I2C_MspInit+0x88>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_I2C_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f2:	23c0      	movs	r3, #192	; 0xc0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001802:	2304      	movs	r3, #4
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <HAL_I2C_MspInit+0x8c>)
 800180e:	f002 fd7b 	bl	8004308 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_I2C_MspInit+0x88>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_I2C_MspInit+0x88>)
 800181c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_I2C_MspInit+0x88>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40005400 	.word	0x40005400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020400 	.word	0x40020400

08001844 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <LCD_WR_REG+0x1c>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	8013      	strh	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	600ffffe 	.word	0x600ffffe

08001864 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <LCD_WR_DATA+0x1c>)
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	8053      	strh	r3, [r2, #2]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	600ffffe 	.word	0x600ffffe

08001884 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <LCD_RD_DATA+0x20>)
 800188c:	885b      	ldrh	r3, [r3, #2]
 800188e:	b29b      	uxth	r3, r3
 8001890:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	b29b      	uxth	r3, r3
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	600ffffe 	.word	0x600ffffe

080018a8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	4603      	mov	r3, r0
 80018bc:	80bb      	strh	r3, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80018c6:	202a      	movs	r0, #42	; 0x2a
 80018c8:	f7ff ffbc 	bl	8001844 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ffc6 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	b29b      	uxth	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ffc0 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ffba 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffb4 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80018fc:	202b      	movs	r0, #43	; 0x2b
 80018fe:	f7ff ffa1 	bl	8001844 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001902:	88bb      	ldrh	r3, [r7, #4]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	b29b      	uxth	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ffab 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ffa5 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800191a:	883b      	ldrh	r3, [r7, #0]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff9f 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001926:	883b      	ldrh	r3, [r7, #0]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff99 	bl	8001864 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001932:	202c      	movs	r0, #44	; 0x2c
 8001934:	f7ff ff86 	bl	8001844 <LCD_WR_REG>
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}

08001940 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <lcd_Clear+0x60>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <lcd_Clear+0x60>)
 8001954:	885b      	ldrh	r3, [r3, #2]
 8001956:	3b01      	subs	r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	2100      	movs	r1, #0
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ffa3 	bl	80018a8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001962:	2300      	movs	r3, #0
 8001964:	81fb      	strh	r3, [r7, #14]
 8001966:	e011      	b.n	800198c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001968:	2300      	movs	r3, #0
 800196a:	81bb      	strh	r3, [r7, #12]
 800196c:	e006      	b.n	800197c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff77 	bl	8001864 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001976:	89bb      	ldrh	r3, [r7, #12]
 8001978:	3301      	adds	r3, #1
 800197a:	81bb      	strh	r3, [r7, #12]
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <lcd_Clear+0x60>)
 800197e:	885b      	ldrh	r3, [r3, #2]
 8001980:	89ba      	ldrh	r2, [r7, #12]
 8001982:	429a      	cmp	r2, r3
 8001984:	d3f3      	bcc.n	800196e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	3301      	adds	r3, #1
 800198a:	81fb      	strh	r3, [r7, #14]
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <lcd_Clear+0x60>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	89fa      	ldrh	r2, [r7, #14]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3e8      	bcc.n	8001968 <lcd_Clear+0x28>
		}
	}
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000026c 	.word	0x2000026c

080019a4 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4604      	mov	r4, r0
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	4603      	mov	r3, r0
 80019b8:	80bb      	strh	r3, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	807b      	strh	r3, [r7, #2]
 80019be:	4613      	mov	r3, r2
 80019c0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	883b      	ldrh	r3, [r7, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	88b9      	ldrh	r1, [r7, #4]
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	f7ff ff69 	bl	80018a8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	81fb      	strh	r3, [r7, #14]
 80019da:	e010      	b.n	80019fe <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	81bb      	strh	r3, [r7, #12]
 80019e0:	e006      	b.n	80019f0 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80019e2:	8c3b      	ldrh	r3, [r7, #32]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff3d 	bl	8001864 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80019ea:	89bb      	ldrh	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	81bb      	strh	r3, [r7, #12]
 80019f0:	89ba      	ldrh	r2, [r7, #12]
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3f4      	bcc.n	80019e2 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	3301      	adds	r3, #1
 80019fc:	81fb      	strh	r3, [r7, #14]
 80019fe:	89fa      	ldrh	r2, [r7, #14]
 8001a00:	883b      	ldrh	r3, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d3ea      	bcc.n	80019dc <lcd_Fill+0x38>
		}
	}
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	80bb      	strh	r3, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	88b9      	ldrh	r1, [r7, #4]
 8001a28:	88f8      	ldrh	r0, [r7, #6]
 8001a2a:	f7ff ff3d 	bl	80018a8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff17 	bl	8001864 <LCD_WR_DATA>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001a3e:	b590      	push	{r4, r7, lr}
 8001a40:	b08d      	sub	sp, #52	; 0x34
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4604      	mov	r4, r0
 8001a46:	4608      	mov	r0, r1
 8001a48:	4611      	mov	r1, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	80fb      	strh	r3, [r7, #6]
 8001a50:	4603      	mov	r3, r0
 8001a52:	80bb      	strh	r3, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001a64:	887a      	ldrh	r2, [r7, #2]
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001a6c:	883a      	ldrh	r2, [r7, #0]
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dd02      	ble.n	8001a88 <lcd_DrawLine+0x4a>
 8001a82:	2301      	movs	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e00b      	b.n	8001aa0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <lcd_DrawLine+0x56>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e005      	b.n	8001aa0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dd02      	ble.n	8001aac <lcd_DrawLine+0x6e>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e00b      	b.n	8001ac4 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <lcd_DrawLine+0x7a>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e005      	b.n	8001ac4 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001ac4:	6a3a      	ldr	r2, [r7, #32]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dd02      	ble.n	8001ad2 <lcd_DrawLine+0x94>
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	e001      	b.n	8001ad6 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ada:	e02b      	b.n	8001b34 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	b291      	uxth	r1, r2
 8001ae4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff91 	bl	8001a10 <lcd_DrawPoint>
		xerr+=delta_x;
 8001aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	4413      	add	r3, r2
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dd07      	ble.n	8001b16 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dd07      	ble.n	8001b2e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001b2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b30:	3301      	adds	r3, #1
 8001b32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dacf      	bge.n	8001adc <lcd_DrawLine+0x9e>
		}
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3734      	adds	r7, #52	; 0x34
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}

08001b46 <mypow>:
		}
	}
}

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	460a      	mov	r2, r1
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	4613      	mov	r3, r2
 8001b54:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001b5a:	e004      	b.n	8001b66 <mypow+0x20>
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	71ba      	strb	r2, [r7, #6]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f5      	bne.n	8001b5c <mypow+0x16>
	return result;
 8001b70:	68fb      	ldr	r3, [r7, #12]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <lcd_SetDir+0x44>)
 8001b9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ba0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <lcd_SetDir+0x44>)
 8001ba4:	22f0      	movs	r2, #240	; 0xf0
 8001ba6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ba8:	e006      	b.n	8001bb8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <lcd_SetDir+0x44>)
 8001bac:	22f0      	movs	r2, #240	; 0xf0
 8001bae:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <lcd_SetDir+0x44>)
 8001bb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bb6:	805a      	strh	r2, [r3, #2]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	2000026c 	.word	0x2000026c

08001bc8 <lcd_init>:


void lcd_init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd2:	48aa      	ldr	r0, [pc, #680]	; (8001e7c <lcd_init+0x2b4>)
 8001bd4:	f002 fd34 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001bd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bdc:	f001 fa4a 	bl	8003074 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be6:	48a5      	ldr	r0, [pc, #660]	; (8001e7c <lcd_init+0x2b4>)
 8001be8:	f002 fd2a 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001bec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf0:	f001 fa40 	bl	8003074 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff ffc3 	bl	8001b80 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001bfa:	20d3      	movs	r0, #211	; 0xd3
 8001bfc:	f7ff fe22 	bl	8001844 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c00:	f7ff fe40 	bl	8001884 <LCD_RD_DATA>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b9d      	ldr	r3, [pc, #628]	; (8001e80 <lcd_init+0x2b8>)
 8001c0a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c0c:	f7ff fe3a 	bl	8001884 <LCD_RD_DATA>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b9a      	ldr	r3, [pc, #616]	; (8001e80 <lcd_init+0x2b8>)
 8001c16:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c18:	f7ff fe34 	bl	8001884 <LCD_RD_DATA>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b97      	ldr	r3, [pc, #604]	; (8001e80 <lcd_init+0x2b8>)
 8001c22:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c24:	4b96      	ldr	r3, [pc, #600]	; (8001e80 <lcd_init+0x2b8>)
 8001c26:	889b      	ldrh	r3, [r3, #4]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b94      	ldr	r3, [pc, #592]	; (8001e80 <lcd_init+0x2b8>)
 8001c2e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c30:	f7ff fe28 	bl	8001884 <LCD_RD_DATA>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <lcd_init+0x2b8>)
 8001c3a:	889b      	ldrh	r3, [r3, #4]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <lcd_init+0x2b8>)
 8001c42:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001c44:	20cf      	movs	r0, #207	; 0xcf
 8001c46:	f7ff fdfd 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fe0a 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001c50:	20c1      	movs	r0, #193	; 0xc1
 8001c52:	f7ff fe07 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001c56:	2030      	movs	r0, #48	; 0x30
 8001c58:	f7ff fe04 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001c5c:	20ed      	movs	r0, #237	; 0xed
 8001c5e:	f7ff fdf1 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001c62:	2064      	movs	r0, #100	; 0x64
 8001c64:	f7ff fdfe 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f7ff fdfb 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001c6e:	2012      	movs	r0, #18
 8001c70:	f7ff fdf8 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001c74:	2081      	movs	r0, #129	; 0x81
 8001c76:	f7ff fdf5 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001c7a:	20e8      	movs	r0, #232	; 0xe8
 8001c7c:	f7ff fde2 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001c80:	2085      	movs	r0, #133	; 0x85
 8001c82:	f7ff fdef 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001c86:	2010      	movs	r0, #16
 8001c88:	f7ff fdec 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001c8c:	207a      	movs	r0, #122	; 0x7a
 8001c8e:	f7ff fde9 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001c92:	20cb      	movs	r0, #203	; 0xcb
 8001c94:	f7ff fdd6 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001c98:	2039      	movs	r0, #57	; 0x39
 8001c9a:	f7ff fde3 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001c9e:	202c      	movs	r0, #44	; 0x2c
 8001ca0:	f7ff fde0 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fddd 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001caa:	2034      	movs	r0, #52	; 0x34
 8001cac:	f7ff fdda 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f7ff fdd7 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001cb6:	20f7      	movs	r0, #247	; 0xf7
 8001cb8:	f7ff fdc4 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001cbc:	2020      	movs	r0, #32
 8001cbe:	f7ff fdd1 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001cc2:	20ea      	movs	r0, #234	; 0xea
 8001cc4:	f7ff fdbe 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff fdcb 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fdc8 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001cd4:	20c0      	movs	r0, #192	; 0xc0
 8001cd6:	f7ff fdb5 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001cda:	201b      	movs	r0, #27
 8001cdc:	f7ff fdc2 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001ce0:	20c1      	movs	r0, #193	; 0xc1
 8001ce2:	f7ff fdaf 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff fdbc 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001cec:	20c5      	movs	r0, #197	; 0xc5
 8001cee:	f7ff fda9 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001cf2:	2030      	movs	r0, #48	; 0x30
 8001cf4:	f7ff fdb6 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001cf8:	2030      	movs	r0, #48	; 0x30
 8001cfa:	f7ff fdb3 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001cfe:	20c7      	movs	r0, #199	; 0xc7
 8001d00:	f7ff fda0 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d04:	20b7      	movs	r0, #183	; 0xb7
 8001d06:	f7ff fdad 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d0a:	2036      	movs	r0, #54	; 0x36
 8001d0c:	f7ff fd9a 	bl	8001844 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001d10:	2008      	movs	r0, #8
 8001d12:	f7ff fda7 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001d16:	203a      	movs	r0, #58	; 0x3a
 8001d18:	f7ff fd94 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d1c:	2055      	movs	r0, #85	; 0x55
 8001d1e:	f7ff fda1 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d22:	20b1      	movs	r0, #177	; 0xb1
 8001d24:	f7ff fd8e 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fd9b 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d2e:	201a      	movs	r0, #26
 8001d30:	f7ff fd98 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001d34:	20b6      	movs	r0, #182	; 0xb6
 8001d36:	f7ff fd85 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	f7ff fd92 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001d40:	20a2      	movs	r0, #162	; 0xa2
 8001d42:	f7ff fd8f 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001d46:	20f2      	movs	r0, #242	; 0xf2
 8001d48:	f7ff fd7c 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff fd89 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001d52:	2026      	movs	r0, #38	; 0x26
 8001d54:	f7ff fd76 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fd83 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001d5e:	20e0      	movs	r0, #224	; 0xe0
 8001d60:	f7ff fd70 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001d64:	200f      	movs	r0, #15
 8001d66:	f7ff fd7d 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001d6a:	202a      	movs	r0, #42	; 0x2a
 8001d6c:	f7ff fd7a 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001d70:	2028      	movs	r0, #40	; 0x28
 8001d72:	f7ff fd77 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d76:	2008      	movs	r0, #8
 8001d78:	f7ff fd74 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001d7c:	200e      	movs	r0, #14
 8001d7e:	f7ff fd71 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d82:	2008      	movs	r0, #8
 8001d84:	f7ff fd6e 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001d88:	2054      	movs	r0, #84	; 0x54
 8001d8a:	f7ff fd6b 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001d8e:	20a9      	movs	r0, #169	; 0xa9
 8001d90:	f7ff fd68 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001d94:	2043      	movs	r0, #67	; 0x43
 8001d96:	f7ff fd65 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f7ff fd62 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001da0:	200f      	movs	r0, #15
 8001da2:	f7ff fd5f 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fd5c 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff fd59 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff fd56 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff fd53 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001dbe:	20e1      	movs	r0, #225	; 0xe1
 8001dc0:	f7ff fd40 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fd4d 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001dca:	2015      	movs	r0, #21
 8001dcc:	f7ff fd4a 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001dd0:	2017      	movs	r0, #23
 8001dd2:	f7ff fd47 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001dd6:	2007      	movs	r0, #7
 8001dd8:	f7ff fd44 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ddc:	2011      	movs	r0, #17
 8001dde:	f7ff fd41 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001de2:	2006      	movs	r0, #6
 8001de4:	f7ff fd3e 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001de8:	202b      	movs	r0, #43	; 0x2b
 8001dea:	f7ff fd3b 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001dee:	2056      	movs	r0, #86	; 0x56
 8001df0:	f7ff fd38 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001df4:	203c      	movs	r0, #60	; 0x3c
 8001df6:	f7ff fd35 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	f7ff fd32 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e00:	2010      	movs	r0, #16
 8001e02:	f7ff fd2f 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f7ff fd2c 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e0c:	203f      	movs	r0, #63	; 0x3f
 8001e0e:	f7ff fd29 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e12:	203f      	movs	r0, #63	; 0x3f
 8001e14:	f7ff fd26 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e18:	200f      	movs	r0, #15
 8001e1a:	f7ff fd23 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e1e:	202b      	movs	r0, #43	; 0x2b
 8001e20:	f7ff fd10 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff fd1d 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fd1a 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7ff fd17 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001e36:	203f      	movs	r0, #63	; 0x3f
 8001e38:	f7ff fd14 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001e3c:	202a      	movs	r0, #42	; 0x2a
 8001e3e:	f7ff fd01 	bl	8001844 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fd0e 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff fd0b 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fd08 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001e54:	20ef      	movs	r0, #239	; 0xef
 8001e56:	f7ff fd05 	bl	8001864 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001e5a:	2011      	movs	r0, #17
 8001e5c:	f7ff fcf2 	bl	8001844 <LCD_WR_REG>
	HAL_Delay(120);
 8001e60:	2078      	movs	r0, #120	; 0x78
 8001e62:	f001 f907 	bl	8003074 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001e66:	2029      	movs	r0, #41	; 0x29
 8001e68:	f7ff fcec 	bl	8001844 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e72:	4804      	ldr	r0, [pc, #16]	; (8001e84 <lcd_init+0x2bc>)
 8001e74:	f002 fbe4 	bl	8004640 <HAL_GPIO_WritePin>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	2000026c 	.word	0x2000026c
 8001e84:	40020000 	.word	0x40020000

08001e88 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <led7_Scan+0x104>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <led7_Scan+0x104>)
 8001e96:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <led7_Scan+0x108>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <led7_Scan+0x10c>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <led7_Scan+0x104>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <led7_Scan+0x104>)
 8001eb2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <led7_Scan+0x108>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d847      	bhi.n	8001f4c <led7_Scan+0xc4>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <led7_Scan+0x3c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001ef3 	.word	0x08001ef3
 8001ecc:	08001f11 	.word	0x08001f11
 8001ed0:	08001f2f 	.word	0x08001f2f
	case 0:
		spi_buffer |= 0x00b0;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <led7_Scan+0x104>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <led7_Scan+0x104>)
 8001ee0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <led7_Scan+0x104>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <led7_Scan+0x104>)
 8001eee:	801a      	strh	r2, [r3, #0]
		break;
 8001ef0:	e02d      	b.n	8001f4e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <led7_Scan+0x104>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <led7_Scan+0x104>)
 8001efe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <led7_Scan+0x104>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f023 0320 	bic.w	r3, r3, #32
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <led7_Scan+0x104>)
 8001f0c:	801a      	strh	r2, [r3, #0]
		break;
 8001f0e:	e01e      	b.n	8001f4e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <led7_Scan+0x104>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <led7_Scan+0x104>)
 8001f1c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <led7_Scan+0x104>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f023 0310 	bic.w	r3, r3, #16
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <led7_Scan+0x104>)
 8001f2a:	801a      	strh	r2, [r3, #0]
		break;
 8001f2c:	e00f      	b.n	8001f4e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <led7_Scan+0x104>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <led7_Scan+0x104>)
 8001f3a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <led7_Scan+0x104>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <led7_Scan+0x104>)
 8001f48:	801a      	strh	r2, [r3, #0]
		break;
 8001f4a:	e000      	b.n	8001f4e <led7_Scan+0xc6>
	default:
		break;
 8001f4c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <led7_Scan+0x108>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	425a      	negs	r2, r3
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	bf58      	it	pl
 8001f60:	4253      	negpl	r3, r2
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <led7_Scan+0x108>)
 8001f64:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2140      	movs	r1, #64	; 0x40
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <led7_Scan+0x110>)
 8001f6c:	f002 fb68 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001f70:	2301      	movs	r3, #1
 8001f72:	2202      	movs	r2, #2
 8001f74:	4905      	ldr	r1, [pc, #20]	; (8001f8c <led7_Scan+0x104>)
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <led7_Scan+0x114>)
 8001f78:	f003 fe81 	bl	8005c7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <led7_Scan+0x110>)
 8001f82:	f002 fb5d 	bl	8004640 <HAL_GPIO_WritePin>
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000000e 	.word	0x2000000e
 8001f90:	200000d4 	.word	0x200000d4
 8001f94:	20000000 	.word	0x20000000
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	200002bc 	.word	0x200002bc

08001fa0 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	4613      	mov	r3, r2
 8001fac:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0e      	blt.n	8001fd2 <led7_SetDigit+0x32>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	dc0b      	bgt.n	8001fd2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <led7_SetDigit+0x40>)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b2d9      	uxtb	r1, r3
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <led7_SetDigit+0x44>)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	4413      	add	r3, r2
 8001fce:	460a      	mov	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <led7_SetColon+0x20>
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <led7_SetColon+0x3c>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	f023 0308 	bic.w	r3, r3, #8
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <led7_SetColon+0x3c>)
 8002004:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8002006:	e006      	b.n	8002016 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <led7_SetColon+0x3c>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <led7_SetColon+0x3c>)
 8002014:	801a      	strh	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000000e 	.word	0x2000000e

08002028 <updateColon>:

int hour;
int minute;
int colon_status = 0;

void updateColon(){
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	colon_status = !colon_status;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <updateColon+0x28>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <updateColon+0x28>)
 800203e:	601a      	str	r2, [r3, #0]
		led7_SetColon(colon_status);
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <updateColon+0x28>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffce 	bl	8001fe8 <led7_SetColon>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200000d8 	.word	0x200000d8

08002054 <updateTime>:
void updateTime(){
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	minute = ds3231_min;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <updateTime+0x24>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <updateTime+0x28>)
 8002060:	601a      	str	r2, [r3, #0]
	hour = ds3231_hours;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <updateTime+0x2c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <updateTime+0x30>)
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200001ba 	.word	0x200001ba
 800207c:	200002a8 	.word	0x200002a8
 8002080:	200001bd 	.word	0x200001bd
 8002084:	200002ac 	.word	0x200002ac

08002088 <displayTime>:
void displayTime(){
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
    int hour_tens = hour / 10;
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <displayTime+0x94>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a23      	ldr	r2, [pc, #140]	; (8002120 <displayTime+0x98>)
 8002094:	fb82 1203 	smull	r1, r2, r2, r3
 8002098:	1092      	asrs	r2, r2, #2
 800209a:	17db      	asrs	r3, r3, #31
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]
    int hour_units = hour % 10;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <displayTime+0x94>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <displayTime+0x98>)
 80020a6:	fb83 1302 	smull	r1, r3, r3, r2
 80020aa:	1099      	asrs	r1, r3, #2
 80020ac:	17d3      	asrs	r3, r2, #31
 80020ae:	1ac9      	subs	r1, r1, r3
 80020b0:	460b      	mov	r3, r1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	60bb      	str	r3, [r7, #8]
    int minute_tens = minute / 10;
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <displayTime+0x9c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a17      	ldr	r2, [pc, #92]	; (8002120 <displayTime+0x98>)
 80020c2:	fb82 1203 	smull	r1, r2, r2, r3
 80020c6:	1092      	asrs	r2, r2, #2
 80020c8:	17db      	asrs	r3, r3, #31
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	607b      	str	r3, [r7, #4]
    int minute_units = minute % 10;
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <displayTime+0x9c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <displayTime+0x98>)
 80020d4:	fb83 1302 	smull	r1, r3, r3, r2
 80020d8:	1099      	asrs	r1, r3, #2
 80020da:	17d3      	asrs	r3, r2, #31
 80020dc:	1ac9      	subs	r1, r1, r3
 80020de:	460b      	mov	r3, r1
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	603b      	str	r3, [r7, #0]
    led7_SetDigit(hour_tens, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7ff ff56 	bl	8001fa0 <led7_SetDigit>
    led7_SetDigit(hour_units, 1, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2101      	movs	r1, #1
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	f7ff ff51 	bl	8001fa0 <led7_SetDigit>
    led7_SetDigit(minute_tens, 2, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2102      	movs	r1, #2
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff4c 	bl	8001fa0 <led7_SetDigit>
    led7_SetDigit(minute_units, 3, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2103      	movs	r1, #3
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f7ff ff47 	bl	8001fa0 <led7_SetDigit>
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200002ac 	.word	0x200002ac
 8002120:	66666667 	.word	0x66666667
 8002124:	200002a8 	.word	0x200002a8

08002128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212c:	f000 ff30 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002130:	f000 f85e 	bl	80021f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002134:	f7ff fa22 	bl	800157c <MX_GPIO_Init>
  MX_FSMC_Init();
 8002138:	f7ff f950 	bl	80013dc <MX_FSMC_Init>
  MX_SPI1_Init();
 800213c:	f000 fade 	bl	80026fc <MX_SPI1_Init>
  MX_TIM2_Init();
 8002140:	f000 fc12 	bl	8002968 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002144:	f7ff fb08 	bl	8001758 <MX_I2C1_Init>
  MX_DMA_Init();
 8002148:	f7ff f804 	bl	8001154 <MX_DMA_Init>
  MX_ADC1_Init();
 800214c:	f7fe fe4a 	bl	8000de4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002150:	f000 fe60 	bl	8002e14 <MX_USART1_UART_Init>
  MX_TIM13_Init();
 8002154:	f000 fc54 	bl	8002a00 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002158:	f000 f8b4 	bl	80022c4 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fbef 	bl	8001940 <lcd_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (timer_flag[3] == 1) {
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <main+0xc0>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <main+0x54>
	  	  setTimer(3, DEBUG_LED_TIME);
 800216a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800216e:	2003      	movs	r0, #3
 8002170:	f000 fd2a 	bl	8002bc8 <setTimer>
	  	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002174:	2110      	movs	r1, #16
 8002176:	481d      	ldr	r0, [pc, #116]	; (80021ec <main+0xc4>)
 8002178:	f002 fa7b 	bl	8004672 <HAL_GPIO_TogglePin>
	  	}
	  if (timer_flag[0] == 1) {
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <main+0xc0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <main+0x68>
		  setTimer(0, COLON_BLINK_TIME);
 8002184:	21fa      	movs	r1, #250	; 0xfa
 8002186:	2000      	movs	r0, #0
 8002188:	f000 fd1e 	bl	8002bc8 <setTimer>
		  updateColon();
 800218c:	f7ff ff4c 	bl	8002028 <updateColon>
	  }
	  if (timer_flag[1] == 1) {
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <main+0xc0>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <main+0x82>
		  setTimer(1, ONE_MINUTE_TIME);
 8002198:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800219c:	2001      	movs	r0, #1
 800219e:	f000 fd13 	bl	8002bc8 <setTimer>
		  updateTime();
 80021a2:	f7ff ff57 	bl	8002054 <updateTime>
		  displayTime();
 80021a6:	f7ff ff6f 	bl	8002088 <displayTime>
	  }
	  	if (timer_flag[2] == 1) {
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <main+0xc0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10d      	bne.n	80021ce <main+0xa6>
	  	  setTimer(2, BUTTON_READING_TIME);
 80021b2:	2132      	movs	r1, #50	; 0x32
 80021b4:	2002      	movs	r0, #2
 80021b6:	f000 fd07 	bl	8002bc8 <setTimer>
	  	  button_Scan();
 80021ba:	f7fe ff3d 	bl	8001038 <button_Scan>
	  	  test_Adc();
 80021be:	f000 f8c3 	bl	8002348 <test_Adc>
	  	  test_Buzzer();
 80021c2:	f000 f8e1 	bl	8002388 <test_Buzzer>
	  	  ds3231_ReadTime();
 80021c6:	f7ff f8a5 	bl	8001314 <ds3231_ReadTime>
	  	  test_Uart();
 80021ca:	f000 f8f9 	bl	80023c0 <test_Uart>
	  	}
	  	if (timer_flag[4] == 1) {
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <main+0xc0>)
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d1c5      	bne.n	8002162 <main+0x3a>
	  		setTimer(4, GET_DATA_TIME);
 80021d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80021da:	2004      	movs	r0, #4
 80021dc:	f000 fcf4 	bl	8002bc8 <setTimer>
	  		draw_graph();
 80021e0:	f7fe ffd8 	bl	8001194 <draw_graph>
	  if (timer_flag[3] == 1) {
 80021e4:	e7bd      	b.n	8002162 <main+0x3a>
 80021e6:	bf00      	nop
 80021e8:	200003b8 	.word	0x200003b8
 80021ec:	40021000 	.word	0x40021000

080021f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	; 0x50
 80021f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	2230      	movs	r2, #48	; 0x30
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f006 fb9e 	bl	8008940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <SystemClock_Config+0xcc>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <SystemClock_Config+0xcc>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <SystemClock_Config+0xcc>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <SystemClock_Config+0xd0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <SystemClock_Config+0xd0>)
 800223a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <SystemClock_Config+0xd0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800224c:	2302      	movs	r3, #2
 800224e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002250:	2301      	movs	r3, #1
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002254:	2310      	movs	r3, #16
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002258:	2302      	movs	r3, #2
 800225a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800225c:	2300      	movs	r3, #0
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002260:	2308      	movs	r3, #8
 8002262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002264:	23a8      	movs	r3, #168	; 0xa8
 8002266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002268:	2302      	movs	r3, #2
 800226a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800226c:	2304      	movs	r3, #4
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	4618      	mov	r0, r3
 8002276:	f003 f805 	bl	8005284 <HAL_RCC_OscConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002280:	f000 f94c 	bl	800251c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002284:	230f      	movs	r3, #15
 8002286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002296:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800229a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2105      	movs	r1, #5
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fa66 	bl	8005774 <HAL_RCC_ClockConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022ae:	f000 f935 	bl	800251c <Error_Handler>
  }
}
 80022b2:	bf00      	nop
 80022b4:	3750      	adds	r7, #80	; 0x50
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40007000 	.word	0x40007000

080022c4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  initTimer();
 80022c8:	f000 fc5e 	bl	8002b88 <initTimer>
  button_init();
 80022cc:	f7fe fea8 	bl	8001020 <button_init>
  lcd_init();
 80022d0:	f7ff fc7a 	bl	8001bc8 <lcd_init>
  sensor_init();
 80022d4:	f000 f928 	bl	8002528 <sensor_init>
  buzzer_init();
 80022d8:	f7fe ff1a 	bl	8001110 <buzzer_init>
  displayTime();
 80022dc:	f7ff fed4 	bl	8002088 <displayTime>
  uart_init_rs232();
 80022e0:	f000 fcca 	bl	8002c78 <uart_init_rs232>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <isButtonUp>:
////// -------- ///////

uint8_t count_led_debug = 0;

uint8_t isButtonUp()
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <isButtonUp+0x1c>)
 80022ee:	88db      	ldrh	r3, [r3, #6]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <isButtonUp+0x10>
        return 1;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <isButtonUp+0x12>
    else
        return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	20000198 	.word	0x20000198

08002308 <isButtonDown>:

uint8_t isButtonDown()
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <isButtonDown+0x1c>)
 800230e:	89db      	ldrh	r3, [r3, #14]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <isButtonDown+0x10>
        return 1;
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <isButtonDown+0x12>
    else
        return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000198 	.word	0x20000198

08002328 <isButtonRight>:

uint8_t isButtonRight()
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <isButtonRight+0x1c>)
 800232e:	8adb      	ldrh	r3, [r3, #22]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <isButtonRight+0x10>
        return 1;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <isButtonRight+0x12>
    else
        return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20000198 	.word	0x20000198

08002348 <test_Adc>:

uint8_t count_adc = 0;

void test_Adc(){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	count_adc = (count_adc + 1)%20;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <test_Adc+0x38>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <test_Adc+0x3c>)
 8002354:	fb83 1302 	smull	r1, r3, r3, r2
 8002358:	10d9      	asrs	r1, r3, #3
 800235a:	17d3      	asrs	r3, r2, #31
 800235c:	1ac9      	subs	r1, r1, r3
 800235e:	460b      	mov	r3, r1
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	1ad1      	subs	r1, r2, r3
 8002368:	b2ca      	uxtb	r2, r1
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <test_Adc+0x38>)
 800236c:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <test_Adc+0x38>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <test_Adc+0x32>
		sensor_Read();
 8002376:	f000 f8e5 	bl	8002544 <sensor_Read>
//		lcd_ShowFloatNum(130, 140, sensor_GetTemperature(), 4, RED, BLACK, 16);
//
//		lcd_ShowStr(10, 160, "Humidity:", RED, BLACK, 16, 0);
//		lcd_ShowFloatNum(130, 160, (float)sensor_GetPotentiometer()*100.0/4095, 4, RED, BLACK, 16);
	}
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200000dc 	.word	0x200000dc
 8002384:	66666667 	.word	0x66666667

08002388 <test_Buzzer>:

void test_Buzzer(){
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 800238c:	f7ff ffac 	bl	80022e8 <isButtonUp>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 8002396:	2032      	movs	r0, #50	; 0x32
 8002398:	f7fe fec4 	bl	8001124 <buzzer_SetVolume>
	}

	if(isButtonDown()){
 800239c:	f7ff ffb4 	bl	8002308 <isButtonDown>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe febc 	bl	8001124 <buzzer_SetVolume>
	}

	if(isButtonRight()){
 80023ac:	f7ff ffbc 	bl	8002328 <isButtonRight>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 80023b6:	2019      	movs	r0, #25
 80023b8:	f7fe feb4 	bl	8001124 <buzzer_SetVolume>
	}

}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <test_Uart>:
void test_Uart(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	ed2d 8b02 	vpush	{d8}
 80023c6:	af00      	add	r7, sp, #0
  if(button_count[12] == 1){
 80023c8:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <test_Uart+0x128>)
 80023ca:	8b1b      	ldrh	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 8082 	bne.w	80024d6 <test_Uart+0x116>
	uart_Rs232SendNum(ds3231_hours);
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <test_Uart+0x12c>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fc76 	bl	8002cc8 <uart_Rs232SendNum>
    uart_Rs232SendString(":");
 80023dc:	4844      	ldr	r0, [pc, #272]	; (80024f0 <test_Uart+0x130>)
 80023de:	f000 fc59 	bl	8002c94 <uart_Rs232SendString>
    uart_Rs232SendNum(ds3231_min);
 80023e2:	4b44      	ldr	r3, [pc, #272]	; (80024f4 <test_Uart+0x134>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fc6e 	bl	8002cc8 <uart_Rs232SendNum>
    uart_Rs232SendString(":");
 80023ec:	4840      	ldr	r0, [pc, #256]	; (80024f0 <test_Uart+0x130>)
 80023ee:	f000 fc51 	bl	8002c94 <uart_Rs232SendString>
    uart_Rs232SendNum(ds3231_sec);
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <test_Uart+0x138>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fc66 	bl	8002cc8 <uart_Rs232SendNum>
    uart_Rs232SendString("\n");
 80023fc:	483f      	ldr	r0, [pc, #252]	; (80024fc <test_Uart+0x13c>)
 80023fe:	f000 fc49 	bl	8002c94 <uart_Rs232SendString>

    uart_Rs232SendString("Power:");
 8002402:	483f      	ldr	r0, [pc, #252]	; (8002500 <test_Uart+0x140>)
 8002404:	f000 fc46 	bl	8002c94 <uart_Rs232SendString>
	uart_Rs232SendNumPercent(sensor_GetVoltage()*sensor_GetCurrent()*100);
 8002408:	f000 f8c2 	bl	8002590 <sensor_GetVoltage>
 800240c:	eeb0 8a40 	vmov.f32	s16, s0
 8002410:	f000 f8fa 	bl	8002608 <sensor_GetCurrent>
 8002414:	eef0 7a40 	vmov.f32	s15, s0
 8002418:	ee68 7a27 	vmul.f32	s15, s16, s15
 800241c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002504 <test_Uart+0x144>
 8002420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002428:	ee17 0a90 	vmov	r0, s15
 800242c:	f000 fca2 	bl	8002d74 <uart_Rs232SendNumPercent>
	uart_Rs232SendString("\n");
 8002430:	4832      	ldr	r0, [pc, #200]	; (80024fc <test_Uart+0x13c>)
 8002432:	f000 fc2f 	bl	8002c94 <uart_Rs232SendString>

    uart_Rs232SendString("Light:");
 8002436:	4834      	ldr	r0, [pc, #208]	; (8002508 <test_Uart+0x148>)
 8002438:	f000 fc2c 	bl	8002c94 <uart_Rs232SendString>
	uart_Rs232SendNum(sensor_GetLight());
 800243c:	f000 f890 	bl	8002560 <sensor_GetLight>
 8002440:	4603      	mov	r3, r0
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fc40 	bl	8002cc8 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 8002448:	482c      	ldr	r0, [pc, #176]	; (80024fc <test_Uart+0x13c>)
 800244a:	f000 fc23 	bl	8002c94 <uart_Rs232SendString>

	uart_Rs232SendString("Temperature:");
 800244e:	482f      	ldr	r0, [pc, #188]	; (800250c <test_Uart+0x14c>)
 8002450:	f000 fc20 	bl	8002c94 <uart_Rs232SendString>
	uart_Rs232SendNumPercent(sensor_GetTemperature()*100);
 8002454:	f000 f934 	bl	80026c0 <sensor_GetTemperature>
 8002458:	eef0 7a40 	vmov.f32	s15, s0
 800245c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002504 <test_Uart+0x144>
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002468:	ee17 0a90 	vmov	r0, s15
 800246c:	f000 fc82 	bl	8002d74 <uart_Rs232SendNumPercent>
	uart_Rs232SendString("\n");
 8002470:	4822      	ldr	r0, [pc, #136]	; (80024fc <test_Uart+0x13c>)
 8002472:	f000 fc0f 	bl	8002c94 <uart_Rs232SendString>

	uart_Rs232SendString("Humidity:");
 8002476:	4826      	ldr	r0, [pc, #152]	; (8002510 <test_Uart+0x150>)
 8002478:	f000 fc0c 	bl	8002c94 <uart_Rs232SendString>
	uart_Rs232SendNumPercent(sensor_GetPotentiometer()*100.0/4095*100);
 800247c:	f000 f87c 	bl	8002578 <sensor_GetPotentiometer>
 8002480:	4603      	mov	r3, r0
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f846 	bl	8000514 <__aeabi_i2d>
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <test_Uart+0x154>)
 800248e:	f7fe f8ab 	bl	80005e8 <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	a311      	add	r3, pc, #68	; (adr r3, 80024e0 <test_Uart+0x120>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe f9cc 	bl	800083c <__aeabi_ddiv>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <test_Uart+0x154>)
 80024b2:	f7fe f899 	bl	80005e8 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f7fe faa5 	bl	8000a0c <__aeabi_d2uiz>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fc55 	bl	8002d74 <uart_Rs232SendNumPercent>
	uart_Rs232SendString("\n");
 80024ca:	480c      	ldr	r0, [pc, #48]	; (80024fc <test_Uart+0x13c>)
 80024cc:	f000 fbe2 	bl	8002c94 <uart_Rs232SendString>
	uart_Rs232SendString("------\n");
 80024d0:	4811      	ldr	r0, [pc, #68]	; (8002518 <test_Uart+0x158>)
 80024d2:	f000 fbdf 	bl	8002c94 <uart_Rs232SendString>
  }
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	ecbd 8b02 	vpop	{d8}
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	00000000 	.word	0x00000000
 80024e4:	40affe00 	.word	0x40affe00
 80024e8:	20000198 	.word	0x20000198
 80024ec:	200001bd 	.word	0x200001bd
 80024f0:	080091c4 	.word	0x080091c4
 80024f4:	200001ba 	.word	0x200001ba
 80024f8:	200001b8 	.word	0x200001b8
 80024fc:	080091c8 	.word	0x080091c8
 8002500:	080091cc 	.word	0x080091cc
 8002504:	42c80000 	.word	0x42c80000
 8002508:	080091d4 	.word	0x080091d4
 800250c:	080091dc 	.word	0x080091dc
 8002510:	080091ec 	.word	0x080091ec
 8002514:	40590000 	.word	0x40590000
 8002518:	080091f8 	.word	0x080091f8

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002524:	e7fe      	b.n	8002524 <Error_Handler+0x8>
	...

08002528 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 800252c:	2205      	movs	r2, #5
 800252e:	4903      	ldr	r1, [pc, #12]	; (800253c <sensor_init+0x14>)
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <sensor_init+0x18>)
 8002532:	f000 fe07 	bl	8003144 <HAL_ADC_Start_DMA>
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200002b0 	.word	0x200002b0
 8002540:	200000f0 	.word	0x200000f0

08002544 <sensor_Read>:

void sensor_Read(){
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002548:	2205      	movs	r2, #5
 800254a:	4903      	ldr	r1, [pc, #12]	; (8002558 <sensor_Read+0x14>)
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <sensor_Read+0x18>)
 800254e:	f000 fdf9 	bl	8003144 <HAL_ADC_Start_DMA>
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200002b0 	.word	0x200002b0
 800255c:	200000f0 	.word	0x200000f0

08002560 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <sensor_GetLight+0x14>)
 8002566:	889b      	ldrh	r3, [r3, #4]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200002b0 	.word	0x200002b0

08002578 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <sensor_GetPotentiometer+0x14>)
 800257e:	88db      	ldrh	r3, [r3, #6]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	200002b0 	.word	0x200002b0

08002590 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <sensor_GetVoltage+0x70>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a0:	ee17 0a90 	vmov	r0, s15
 80025a4:	f7fd ffc8 	bl	8000538 <__aeabi_f2d>
 80025a8:	a311      	add	r3, pc, #68	; (adr r3, 80025f0 <sensor_GetVoltage+0x60>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe f81b 	bl	80005e8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <sensor_GetVoltage+0x74>)
 80025c0:	f7fe f812 	bl	80005e8 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	a30a      	add	r3, pc, #40	; (adr r3, 80025f8 <sensor_GetVoltage+0x68>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fe f933 	bl	800083c <__aeabi_ddiv>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe fa35 	bl	8000a4c <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	ee07 3a90 	vmov	s15, r3
}
 80025e8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	66666666 	.word	0x66666666
 80025f4:	400a6666 	.word	0x400a6666
 80025f8:	cccccccd 	.word	0xcccccccd
 80025fc:	40b908ac 	.word	0x40b908ac
 8002600:	200002b0 	.word	0x200002b0
 8002604:	40280000 	.word	0x40280000

08002608 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <sensor_GetCurrent+0xa8>)
 800260e:	885b      	ldrh	r3, [r3, #2]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002618:	ee17 0a90 	vmov	r0, s15
 800261c:	f7fd ff8c 	bl	8000538 <__aeabi_f2d>
 8002620:	a31f      	add	r3, pc, #124	; (adr r3, 80026a0 <sensor_GetCurrent+0x98>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fd ffdf 	bl	80005e8 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <sensor_GetCurrent+0xac>)
 8002638:	f7fd ffd6 	bl	80005e8 <__aeabi_dmul>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	a318      	add	r3, pc, #96	; (adr r3, 80026a8 <sensor_GetCurrent+0xa0>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fe f8f7 	bl	800083c <__aeabi_ddiv>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <sensor_GetCurrent+0xb0>)
 800265c:	f7fd fe0c 	bl	8000278 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <sensor_GetCurrent+0xb4>)
 800266e:	f7fd ffbb 	bl	80005e8 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <sensor_GetCurrent+0xb0>)
 8002680:	f7fe f8dc 	bl	800083c <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe f9de 	bl	8000a4c <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	ee07 3a90 	vmov	s15, r3
}
 8002696:	eeb0 0a67 	vmov.f32	s0, s15
 800269a:	bd80      	pop	{r7, pc}
 800269c:	f3af 8000 	nop.w
 80026a0:	66666666 	.word	0x66666666
 80026a4:	400a6666 	.word	0x400a6666
 80026a8:	147ae148 	.word	0x147ae148
 80026ac:	40a4b2ee 	.word	0x40a4b2ee
 80026b0:	200002b0 	.word	0x200002b0
 80026b4:	408f4000 	.word	0x408f4000
 80026b8:	40040000 	.word	0x40040000
 80026bc:	40140000 	.word	0x40140000

080026c0 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <sensor_GetTemperature+0x30>)
 80026c6:	891b      	ldrh	r3, [r3, #8]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80026f4 <sensor_GetTemperature+0x34>
 80026d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80026f8 <sensor_GetTemperature+0x38>
 80026dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026e0:	eef0 7a66 	vmov.f32	s15, s13
}
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	200002b0 	.word	0x200002b0
 80026f4:	43a50000 	.word	0x43a50000
 80026f8:	457ff000 	.word	0x457ff000

080026fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_SPI1_Init+0x64>)
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <MX_SPI1_Init+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <MX_SPI1_Init+0x64>)
 8002708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800270c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_SPI1_Init+0x64>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MX_SPI1_Init+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_SPI1_Init+0x64>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_SPI1_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_SPI1_Init+0x64>)
 8002728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_SPI1_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <MX_SPI1_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_SPI1_Init+0x64>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <MX_SPI1_Init+0x64>)
 8002742:	2200      	movs	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_SPI1_Init+0x64>)
 8002748:	220a      	movs	r2, #10
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <MX_SPI1_Init+0x64>)
 800274e:	f003 fa0d 	bl	8005b6c <HAL_SPI_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002758:	f7ff fee0 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200002bc 	.word	0x200002bc
 8002764:	40013000 	.word	0x40013000

08002768 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_SPI_MspInit+0x84>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d12b      	bne.n	80027e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_SPI_MspInit+0x88>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_SPI_MspInit+0x88>)
 8002794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_SPI_MspInit+0x88>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_SPI_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_SPI_MspInit+0x88>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_SPI_MspInit+0x88>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027c2:	2338      	movs	r3, #56	; 0x38
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027d2:	2305      	movs	r3, #5
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_SPI_MspInit+0x8c>)
 80027de:	f001 fd93 	bl	8004308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40013000 	.word	0x40013000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020400 	.word	0x40020400

080027f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_MspInit+0x4c>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_MspInit+0x4c>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_MspInit+0x4c>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_MspInit+0x4c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_MspInit+0x4c>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_MspInit+0x4c>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800284c:	e7fe      	b.n	800284c <NMI_Handler+0x4>

0800284e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler+0x4>

08002854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <MemManage_Handler+0x4>

0800285a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <BusFault_Handler+0x4>

08002860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <UsageFault_Handler+0x4>

08002866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002894:	f000 fbce 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}

0800289c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <TIM2_IRQHandler+0x10>)
 80028a2:	f004 f931 	bl	8006b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000035c 	.word	0x2000035c

080028b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <USART1_IRQHandler+0x10>)
 80028b6:	f005 f891 	bl	80079dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000430 	.word	0x20000430

080028c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA2_Stream0_IRQHandler+0x10>)
 80028ca:	f001 fab3 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000138 	.word	0x20000138

080028d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <_sbrk+0x5c>)
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <_sbrk+0x60>)
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <_sbrk+0x64>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <_sbrk+0x64>)
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <_sbrk+0x68>)
 80028f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	429a      	cmp	r2, r3
 8002906:	d207      	bcs.n	8002918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002908:	f005 fff0 	bl	80088ec <__errno>
 800290c:	4603      	mov	r3, r0
 800290e:	220c      	movs	r2, #12
 8002910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e009      	b.n	800292c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <_sbrk+0x64>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <_sbrk+0x64>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	4a05      	ldr	r2, [pc, #20]	; (800293c <_sbrk+0x64>)
 8002928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20020000 	.word	0x20020000
 8002938:	00000400 	.word	0x00000400
 800293c:	200000e0 	.word	0x200000e0
 8002940:	20000488 	.word	0x20000488

08002944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <SystemInit+0x20>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <SystemInit+0x20>)
 8002950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297c:	463b      	mov	r3, r7
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <MX_TIM2_Init+0x94>)
 8002986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800298a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <MX_TIM2_Init+0x94>)
 800298e:	f240 3247 	movw	r2, #839	; 0x347
 8002992:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <MX_TIM2_Init+0x94>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <MX_TIM2_Init+0x94>)
 800299c:	2263      	movs	r2, #99	; 0x63
 800299e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a0:	4b16      	ldr	r3, [pc, #88]	; (80029fc <MX_TIM2_Init+0x94>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <MX_TIM2_Init+0x94>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029ac:	4813      	ldr	r0, [pc, #76]	; (80029fc <MX_TIM2_Init+0x94>)
 80029ae:	f003 fec9 	bl	8006744 <HAL_TIM_Base_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029b8:	f7ff fdb0 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	4619      	mov	r1, r3
 80029c8:	480c      	ldr	r0, [pc, #48]	; (80029fc <MX_TIM2_Init+0x94>)
 80029ca:	f004 fa67 	bl	8006e9c <HAL_TIM_ConfigClockSource>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029d4:	f7ff fda2 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029e0:	463b      	mov	r3, r7
 80029e2:	4619      	mov	r1, r3
 80029e4:	4805      	ldr	r0, [pc, #20]	; (80029fc <MX_TIM2_Init+0x94>)
 80029e6:	f004 fe59 	bl	800769c <HAL_TIMEx_MasterConfigSynchronization>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029f0:	f7ff fd94 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000035c 	.word	0x2000035c

08002a00 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <MX_TIM13_Init+0x98>)
 8002a1c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a20:	f240 3247 	movw	r2, #839	; 0x347
 8002a24:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a32:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002a40:	4814      	ldr	r0, [pc, #80]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a42:	f003 fe7f 	bl	8006744 <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002a4c:	f7ff fd66 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002a50:	4810      	ldr	r0, [pc, #64]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a52:	f003 ff37 	bl	80068c4 <HAL_TIM_PWM_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002a5c:	f7ff fd5e 	bl	800251c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a60:	2360      	movs	r3, #96	; 0x60
 8002a62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	2200      	movs	r2, #0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4807      	ldr	r0, [pc, #28]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a78:	f004 f94e 	bl	8006d18 <HAL_TIM_PWM_ConfigChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002a82:	f7ff fd4b 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002a86:	4803      	ldr	r0, [pc, #12]	; (8002a94 <MX_TIM13_Init+0x94>)
 8002a88:	f000 f844 	bl	8002b14 <HAL_TIM_MspPostInit>

}
 8002a8c:	bf00      	nop
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000314 	.word	0x20000314
 8002a98:	40001c00 	.word	0x40001c00

08002a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d116      	bne.n	8002adc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_TIM_Base_MspInit+0x70>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_TIM_Base_MspInit+0x70>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_TIM_Base_MspInit+0x70>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	201c      	movs	r0, #28
 8002ad0:	f000 ffe1 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ad4:	201c      	movs	r0, #28
 8002ad6:	f000 fffa 	bl	8003ace <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002ada:	e012      	b.n	8002b02 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <HAL_TIM_Base_MspInit+0x74>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10d      	bne.n	8002b02 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_TIM_Base_MspInit+0x70>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_TIM_Base_MspInit+0x70>)
 8002af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_TIM_Base_MspInit+0x70>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40001c00 	.word	0x40001c00

08002b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_TIM_MspPostInit+0x68>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d11e      	bne.n	8002b74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_TIM_MspPostInit+0x6c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_TIM_MspPostInit+0x6c>)
 8002b40:	f043 0320 	orr.w	r3, r3, #32
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_TIM_MspPostInit+0x6c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002b64:	2309      	movs	r3, #9
 8002b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_TIM_MspPostInit+0x70>)
 8002b70:	f001 fbca 	bl	8004308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002b74:	bf00      	nop
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40001c00 	.word	0x40001c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40021400 	.word	0x40021400

08002b88 <initTimer>:
 * timer2: read button
 */
int timer_counter[TIMER_NUMBER];
int timer_flag[TIMER_NUMBER];

void initTimer() {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <initTimer+0x3c>)
 8002b8e:	f003 fe29 	bl	80067e4 <HAL_TIM_Base_Start_IT>
	setTimer(0, COLON_BLINK_TIME);
 8002b92:	21fa      	movs	r1, #250	; 0xfa
 8002b94:	2000      	movs	r0, #0
 8002b96:	f000 f817 	bl	8002bc8 <setTimer>
	setTimer(1, ONE_MINUTE_TIME);
 8002b9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f000 f812 	bl	8002bc8 <setTimer>
	setTimer(2, BUTTON_READING_TIME);
 8002ba4:	2132      	movs	r1, #50	; 0x32
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	f000 f80e 	bl	8002bc8 <setTimer>
	setTimer(3, DEBUG_LED_TIME);
 8002bac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 f809 	bl	8002bc8 <setTimer>
	setTimer(4, GET_DATA_TIME);
 8002bb6:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bba:	2004      	movs	r0, #4
 8002bbc:	f000 f804 	bl	8002bc8 <setTimer>
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2000035c 	.word	0x2000035c

08002bc8 <setTimer>:

void setTimer(int index, int duration){
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  timer_counter[index] = duration / TIME_CYCLE;
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <setTimer+0x2c>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  timer_flag[index] = 0;
 8002bdc:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <setTimer+0x30>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2100      	movs	r1, #0
 8002be2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	200003a4 	.word	0x200003a4
 8002bf8:	200003b8 	.word	0x200003b8

08002bfc <runTimer>:
void runTimer(){
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
  for(int i = 0; i < TIMER_NUMBER; ++i){
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	e01c      	b.n	8002c42 <runTimer+0x46>
    if(timer_counter[i] > 0){
 8002c08:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <runTimer+0x5c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	dd13      	ble.n	8002c3c <runTimer+0x40>
      --timer_counter[i];
 8002c14:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <runTimer+0x5c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	490e      	ldr	r1, [pc, #56]	; (8002c58 <runTimer+0x5c>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(timer_counter[i] == 0)
 8002c26:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <runTimer+0x5c>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <runTimer+0x40>
	    timer_flag[i] = 1;
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <runTimer+0x60>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2101      	movs	r1, #1
 8002c38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < TIMER_NUMBER; ++i){
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	dddf      	ble.n	8002c08 <runTimer+0xc>
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	200003a4 	.word	0x200003a4
 8002c5c:	200003b8 	.word	0x200003b8

08002c60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  runTimer();
 8002c68:	f7ff ffc8 	bl	8002bfc <runTimer>
  led7_Scan();
 8002c6c:	f7ff f90c 	bl	8001e88 <led7_Scan>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4903      	ldr	r1, [pc, #12]	; (8002c8c <uart_init_rs232+0x14>)
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <uart_init_rs232+0x18>)
 8002c82:	f004 fe7a 	bl	800797a <HAL_UART_Receive_IT>
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200000e4 	.word	0x200000e4
 8002c90:	20000430 	.word	0x20000430

08002c94 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4907      	ldr	r1, [pc, #28]	; (8002cbc <uart_Rs232SendString+0x28>)
 8002ca0:	4807      	ldr	r0, [pc, #28]	; (8002cc0 <uart_Rs232SendString+0x2c>)
 8002ca2:	f005 fe55 	bl	8008950 <siprintf>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	230a      	movs	r3, #10
 8002cac:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <uart_Rs232SendString+0x2c>)
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <uart_Rs232SendString+0x30>)
 8002cb0:	f004 fdd1 	bl	8007856 <HAL_UART_Transmit>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08009200 	.word	0x08009200
 8002cc0:	200003cc 	.word	0x200003cc
 8002cc4:	20000430 	.word	0x20000430

08002cc8 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8002cd6:	4824      	ldr	r0, [pc, #144]	; (8002d68 <uart_Rs232SendNum+0xa0>)
 8002cd8:	f7ff ffdc 	bl	8002c94 <uart_Rs232SendString>
		return;
 8002cdc:	e040      	b.n	8002d60 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002ce2:	230a      	movs	r3, #10
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	e038      	b.n	8002d5a <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	4619      	mov	r1, r3
 8002cee:	200a      	movs	r0, #10
 8002cf0:	f7fe ff29 	bl	8001b46 <mypow>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d315      	bcc.n	8002d2a <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	200a      	movs	r0, #10
 8002d0a:	f7fe ff1c 	bl	8001b46 <mypow>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4914      	ldr	r1, [pc, #80]	; (8002d6c <uart_Rs232SendNum+0xa4>)
 8002d1c:	4814      	ldr	r0, [pc, #80]	; (8002d70 <uart_Rs232SendNum+0xa8>)
 8002d1e:	f005 fe17 	bl	8008950 <siprintf>
            uart_Rs232SendString(msg);
 8002d22:	4813      	ldr	r0, [pc, #76]	; (8002d70 <uart_Rs232SendNum+0xa8>)
 8002d24:	f7ff ffb6 	bl	8002c94 <uart_Rs232SendString>
 8002d28:	e005      	b.n	8002d36 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <uart_Rs232SendNum+0xa0>)
 8002d32:	f7ff ffaf 	bl	8002c94 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	200a      	movs	r0, #10
 8002d3e:	f7fe ff02 	bl	8001b46 <mypow>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d4c:	fb02 f201 	mul.w	r2, r2, r1
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	dcc3      	bgt.n	8002ce8 <uart_Rs232SendNum+0x20>
    }
}
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	08009204 	.word	0x08009204
 8002d6c:	08009208 	.word	0x08009208
 8002d70:	200003cc 	.word	0x200003cc

08002d74 <uart_Rs232SendNumPercent>:

void uart_Rs232SendNumPercent(uint32_t num)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	sprintf((void*)msg,"%ld",num/100);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <uart_Rs232SendNumPercent+0x54>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	461a      	mov	r2, r3
 8002d88:	4910      	ldr	r1, [pc, #64]	; (8002dcc <uart_Rs232SendNumPercent+0x58>)
 8002d8a:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <uart_Rs232SendNumPercent+0x5c>)
 8002d8c:	f005 fde0 	bl	8008950 <siprintf>
    uart_Rs232SendString(msg);
 8002d90:	480f      	ldr	r0, [pc, #60]	; (8002dd0 <uart_Rs232SendNumPercent+0x5c>)
 8002d92:	f7ff ff7f 	bl	8002c94 <uart_Rs232SendString>
    uart_Rs232SendString(".");
 8002d96:	480f      	ldr	r0, [pc, #60]	; (8002dd4 <uart_Rs232SendNumPercent+0x60>)
 8002d98:	f7ff ff7c 	bl	8002c94 <uart_Rs232SendString>
    sprintf((void*)msg,"%ld",num%100);
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <uart_Rs232SendNumPercent+0x54>)
 8002da0:	fba3 1302 	umull	r1, r3, r3, r2
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	2164      	movs	r1, #100	; 0x64
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <uart_Rs232SendNumPercent+0x58>)
 8002db2:	4807      	ldr	r0, [pc, #28]	; (8002dd0 <uart_Rs232SendNumPercent+0x5c>)
 8002db4:	f005 fdcc 	bl	8008950 <siprintf>
    uart_Rs232SendString(msg);
 8002db8:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <uart_Rs232SendNumPercent+0x5c>)
 8002dba:	f7ff ff6b 	bl	8002c94 <uart_Rs232SendString>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	51eb851f 	.word	0x51eb851f
 8002dcc:	0800920c 	.word	0x0800920c
 8002dd0:	200003cc 	.word	0x200003cc
 8002dd4:	08009210 	.word	0x08009210

08002dd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <HAL_UART_RxCpltCallback+0x30>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10a      	bne.n	8002e00 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002dea:	230a      	movs	r3, #10
 8002dec:	2201      	movs	r2, #1
 8002dee:	4907      	ldr	r1, [pc, #28]	; (8002e0c <HAL_UART_RxCpltCallback+0x34>)
 8002df0:	4807      	ldr	r0, [pc, #28]	; (8002e10 <HAL_UART_RxCpltCallback+0x38>)
 8002df2:	f004 fd30 	bl	8007856 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002df6:	2201      	movs	r2, #1
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_UART_RxCpltCallback+0x34>)
 8002dfa:	4805      	ldr	r0, [pc, #20]	; (8002e10 <HAL_UART_RxCpltCallback+0x38>)
 8002dfc:	f004 fdbd 	bl	800797a <HAL_UART_Receive_IT>
	}
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	200000e4 	.word	0x200000e4
 8002e10:	20000430 	.word	0x20000430

08002e14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <MX_USART1_UART_Init+0x50>)
 8002e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <MX_USART1_UART_Init+0x4c>)
 8002e4c:	f004 fcb6 	bl	80077bc <HAL_UART_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e56:	f7ff fb61 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000430 	.word	0x20000430
 8002e64:	40011000 	.word	0x40011000

08002e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <HAL_UART_MspInit+0x94>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d134      	bne.n	8002ef4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <HAL_UART_MspInit+0x98>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <HAL_UART_MspInit+0x98>)
 8002e94:	f043 0310 	orr.w	r3, r3, #16
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_UART_MspInit+0x98>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_UART_MspInit+0x98>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <HAL_UART_MspInit+0x98>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_UART_MspInit+0x98>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ec2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ed4:	2307      	movs	r3, #7
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4809      	ldr	r0, [pc, #36]	; (8002f04 <HAL_UART_MspInit+0x9c>)
 8002ee0:	f001 fa12 	bl	8004308 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2025      	movs	r0, #37	; 0x25
 8002eea:	f000 fdd4 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eee:	2025      	movs	r0, #37	; 0x25
 8002ef0:	f000 fded 	bl	8003ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3728      	adds	r7, #40	; 0x28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020000 	.word	0x40020000

08002f08 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b2db      	uxtb	r3, r3
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f44:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f58:	4c0b      	ldr	r4, [pc, #44]	; (8002f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f66:	f7ff fced 	bl	8002944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f005 fcc5 	bl	80088f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7ff f8db 	bl	8002128 <main>
  bx  lr    
 8002f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002f80:	08009278 	.word	0x08009278
  ldr r2, =_sbss
 8002f84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002f88:	20000488 	.word	0x20000488

08002f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 fd61 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	200f      	movs	r0, #15
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fc18 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fd79 	bl	8003aea <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f000 fd41 	bl	8003a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000010 	.word	0x20000010
 800302c:	20000018 	.word	0x20000018
 8003030:	20000014 	.word	0x20000014

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000018 	.word	0x20000018
 8003058:	20000474 	.word	0x20000474

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000474 	.word	0x20000474

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000018 	.word	0x20000018

080030bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e033      	b.n	800313a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd ff0c 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa68 	bl	80035e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
 800312a:	e001      	b.n	8003130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Start_DMA+0x1e>
 800315e:	2302      	movs	r3, #2
 8003160:	e0e9      	b.n	8003336 <HAL_ADC_Start_DMA+0x1f2>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d018      	beq.n	80031aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003188:	4b6d      	ldr	r3, [pc, #436]	; (8003340 <HAL_ADC_Start_DMA+0x1fc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6d      	ldr	r2, [pc, #436]	; (8003344 <HAL_ADC_Start_DMA+0x200>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0c9a      	lsrs	r2, r3, #18
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800319c:	e002      	b.n	80031a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f9      	bne.n	800319e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b8:	d107      	bne.n	80031ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 80a1 	bne.w	800331c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003218:	d106      	bne.n	8003228 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f023 0206 	bic.w	r2, r3, #6
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
 8003226:	e002      	b.n	800322e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003236:	4b44      	ldr	r3, [pc, #272]	; (8003348 <HAL_ADC_Start_DMA+0x204>)
 8003238:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4a43      	ldr	r2, [pc, #268]	; (800334c <HAL_ADC_Start_DMA+0x208>)
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	4a42      	ldr	r2, [pc, #264]	; (8003350 <HAL_ADC_Start_DMA+0x20c>)
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_ADC_Start_DMA+0x210>)
 8003250:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800325a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800326a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	334c      	adds	r3, #76	; 0x4c
 8003286:	4619      	mov	r1, r3
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f000 fce8 	bl	8003c60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2b00      	cmp	r3, #0
 800329a:	d12a      	bne.n	80032f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2d      	ldr	r2, [pc, #180]	; (8003358 <HAL_ADC_Start_DMA+0x214>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d015      	beq.n	80032d2 <HAL_ADC_Start_DMA+0x18e>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2c      	ldr	r2, [pc, #176]	; (800335c <HAL_ADC_Start_DMA+0x218>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d105      	bne.n	80032bc <HAL_ADC_Start_DMA+0x178>
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_ADC_Start_DMA+0x204>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a27      	ldr	r2, [pc, #156]	; (8003360 <HAL_ADC_Start_DMA+0x21c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d136      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_ADC_Start_DMA+0x204>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d130      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d129      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	e020      	b.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <HAL_ADC_Start_DMA+0x214>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d11b      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d114      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	e00b      	b.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f043 0210 	orr.w	r2, r3, #16
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000010 	.word	0x20000010
 8003344:	431bde83 	.word	0x431bde83
 8003348:	40012300 	.word	0x40012300
 800334c:	080037dd 	.word	0x080037dd
 8003350:	08003897 	.word	0x08003897
 8003354:	080038b3 	.word	0x080038b3
 8003358:	40012000 	.word	0x40012000
 800335c:	40012100 	.word	0x40012100
 8003360:	40012200 	.word	0x40012200

08003364 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e105      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x228>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d925      	bls.n	8003418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43da      	mvns	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	400a      	ands	r2, r1
 80033f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	4603      	mov	r3, r0
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4403      	add	r3, r0
 800340a:	3b1e      	subs	r3, #30
 800340c:	409a      	lsls	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e022      	b.n	800345e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	2207      	movs	r2, #7
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	400a      	ands	r2, r1
 800343a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6919      	ldr	r1, [r3, #16]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
 800344e:	4603      	mov	r3, r0
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4403      	add	r3, r0
 8003454:	409a      	lsls	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d824      	bhi.n	80034b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	221f      	movs	r2, #31
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	4618      	mov	r0, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b05      	subs	r3, #5
 80034a2:	fa00 f203 	lsl.w	r2, r0, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34
 80034ae:	e04c      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d824      	bhi.n	8003502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b23      	subs	r3, #35	; 0x23
 80034ca:	221f      	movs	r2, #31
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	400a      	ands	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b23      	subs	r3, #35	; 0x23
 80034f4:	fa00 f203 	lsl.w	r2, r0, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003500:	e023      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b41      	subs	r3, #65	; 0x41
 8003514:	221f      	movs	r2, #31
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b41      	subs	r3, #65	; 0x41
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_ADC_ConfigChannel+0x234>)
 800354c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d109      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b12      	cmp	r3, #18
 800355e:	d105      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d123      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d003      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x1e6>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b11      	cmp	r3, #17
 8003584:	d11b      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d111      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_ADC_ConfigChannel+0x23c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <HAL_ADC_ConfigChannel+0x240>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	0c9a      	lsrs	r2, r3, #18
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012300 	.word	0x40012300
 80035d8:	40012000 	.word	0x40012000
 80035dc:	20000010 	.word	0x20000010
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ec:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <ADC_Init+0x1f0>)
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800363c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <ADC_Init+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800368a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e00f      	b.n	80036e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0202 	bic.w	r2, r2, #2
 80036f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e1b      	ldrb	r3, [r3, #24]
 80036fc:	005a      	lsls	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800372e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	3b01      	subs	r3, #1
 800373c:	035a      	lsls	r2, r3, #13
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e007      	b.n	8003758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	3b01      	subs	r3, #1
 8003774:	051a      	lsls	r2, r3, #20
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800378c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800379a:	025a      	lsls	r2, r3, #9
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	029a      	lsls	r2, r3, #10
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40012300 	.word	0x40012300
 80037d8:	0f000001 	.word	0x0f000001

080037dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d13c      	bne.n	8003870 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d12b      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003814:	2b00      	cmp	r3, #0
 8003816:	d127      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003830:	2b00      	cmp	r3, #0
 8003832:	d119      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0220 	bic.w	r2, r2, #32
 8003842:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff fd7b 	bl	8003364 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800386e:	e00e      	b.n	800388e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff fd85 	bl	800338c <HAL_ADC_ErrorCallback>
}
 8003882:	e004      	b.n	800388e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fd67 	bl	8003378 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fd5a 	bl	800338c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	60d3      	str	r3, [r2, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <__NVIC_EnableIRQ+0x38>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4c:	d301      	bcc.n	8003a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <SysTick_Config+0x40>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f7ff ff8e 	bl	8003980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <SysTick_Config+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <SysTick_Config+0x40>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff29 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa8:	f7ff ff3e 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff8e 	bl	80039d4 <NVIC_EncodePriority>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff5d 	bl	8003980 <__NVIC_SetPriority>
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff31 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ffa2 	bl	8003a3c <SysTick_Config>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff faa4 	bl	800305c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e099      	b.n	8003c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b40:	e00f      	b.n	8003b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b42:	f7ff fa8b 	bl	800305c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d908      	bls.n	8003b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e078      	b.n	8003c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e8      	bne.n	8003b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_DMA_Init+0x158>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d107      	bne.n	8003bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0307 	bic.w	r3, r3, #7
 8003be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d117      	bne.n	8003c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fb01 	bl	8004210 <DMA_CheckFifoParam>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2240      	movs	r2, #64	; 0x40
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c22:	2301      	movs	r3, #1
 8003c24:	e016      	b.n	8003c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fab8 	bl	80041a4 <DMA_CalcBaseAndBitshift>
 8003c34:	4603      	mov	r3, r0
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	223f      	movs	r2, #63	; 0x3f
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	f010803f 	.word	0xf010803f

08003c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_DMA_Start_IT+0x26>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e040      	b.n	8003d08 <HAL_DMA_Start_IT+0xa8>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d12f      	bne.n	8003cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fa4a 	bl	8004148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	223f      	movs	r2, #63	; 0x3f
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0216 	orr.w	r2, r2, #22
 8003cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0208 	orr.w	r2, r2, #8
 8003ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e005      	b.n	8003d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
 8003d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d1e:	f7ff f99d 	bl	800305c <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d008      	beq.n	8003d42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e052      	b.n	8003de8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0216 	bic.w	r2, r2, #22
 8003d50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_DMA_Abort+0x62>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0208 	bic.w	r2, r2, #8
 8003d80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d92:	e013      	b.n	8003dbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d94:	f7ff f962 	bl	800305c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d90c      	bls.n	8003dbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2203      	movs	r2, #3
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e015      	b.n	8003de8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e4      	bne.n	8003d94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	223f      	movs	r2, #63	; 0x3f
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d004      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e00c      	b.n	8003e28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2205      	movs	r2, #5
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e40:	4b92      	ldr	r3, [pc, #584]	; (800408c <HAL_DMA_IRQHandler+0x258>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a92      	ldr	r2, [pc, #584]	; (8004090 <HAL_DMA_IRQHandler+0x25c>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	2208      	movs	r2, #8
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0204 	bic.w	r2, r2, #4
 8003e86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	2204      	movs	r2, #4
 8003edc:	409a      	lsls	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	2204      	movs	r2, #4
 8003efa:	409a      	lsls	r2, r3
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	f043 0204 	orr.w	r2, r3, #4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	2210      	movs	r2, #16
 8003f12:	409a      	lsls	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d043      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d03c      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	2210      	movs	r2, #16
 8003f30:	409a      	lsls	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d024      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
 8003f62:	e01f      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	e016      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0208 	bic.w	r2, r2, #8
 8003f92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	2220      	movs	r2, #32
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 808e 	beq.w	80040d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8086 	beq.w	80040d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	2220      	movs	r2, #32
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d136      	bne.n	800404c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0216 	bic.w	r2, r2, #22
 8003fec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ffc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <HAL_DMA_IRQHandler+0x1da>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0208 	bic.w	r2, r2, #8
 800401c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	223f      	movs	r2, #63	; 0x3f
 8004024:	409a      	lsls	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403e:	2b00      	cmp	r3, #0
 8004040:	d07d      	beq.n	800413e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
        }
        return;
 800404a:	e078      	b.n	800413e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01c      	beq.n	8004094 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	2b00      	cmp	r3, #0
 800406e:	d030      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e02b      	b.n	80040d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d027      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
 800408a:	e022      	b.n	80040d2 <HAL_DMA_IRQHandler+0x29e>
 800408c:	20000010 	.word	0x20000010
 8004090:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0210 	bic.w	r2, r2, #16
 80040b0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d032      	beq.n	8004140 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d022      	beq.n	800412c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2205      	movs	r2, #5
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3301      	adds	r3, #1
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	429a      	cmp	r2, r3
 8004108:	d307      	bcc.n	800411a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f2      	bne.n	80040fe <HAL_DMA_IRQHandler+0x2ca>
 8004118:	e000      	b.n	800411c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800411a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
 800413c:	e000      	b.n	8004140 <HAL_DMA_IRQHandler+0x30c>
        return;
 800413e:	bf00      	nop
    }
  }
}
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop

08004148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d108      	bne.n	8004188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004186:	e007      	b.n	8004198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	3b10      	subs	r3, #16
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <DMA_CalcBaseAndBitshift+0x64>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041be:	4a13      	ldr	r2, [pc, #76]	; (800420c <DMA_CalcBaseAndBitshift+0x68>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d909      	bls.n	80041e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	; 0x58
 80041e4:	e007      	b.n	80041f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	aaaaaaab 	.word	0xaaaaaaab
 800420c:	0800922c 	.word	0x0800922c

08004210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11f      	bne.n	800426a <DMA_CheckFifoParam+0x5a>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d856      	bhi.n	80042de <DMA_CheckFifoParam+0xce>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <DMA_CheckFifoParam+0x28>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004249 	.word	0x08004249
 800423c:	0800425b 	.word	0x0800425b
 8004240:	08004249 	.word	0x08004249
 8004244:	080042df 	.word	0x080042df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d046      	beq.n	80042e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e043      	b.n	80042e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004262:	d140      	bne.n	80042e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e03d      	b.n	80042e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004272:	d121      	bne.n	80042b8 <DMA_CheckFifoParam+0xa8>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d837      	bhi.n	80042ea <DMA_CheckFifoParam+0xda>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <DMA_CheckFifoParam+0x70>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004291 	.word	0x08004291
 8004284:	08004297 	.word	0x08004297
 8004288:	08004291 	.word	0x08004291
 800428c:	080042a9 	.word	0x080042a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      break;
 8004294:	e030      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d025      	beq.n	80042ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a6:	e022      	b.n	80042ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042b0:	d11f      	bne.n	80042f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042b6:	e01c      	b.n	80042f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d903      	bls.n	80042c6 <DMA_CheckFifoParam+0xb6>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d003      	beq.n	80042cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042c4:	e018      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ca:	e015      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	e00b      	b.n	80042f6 <DMA_CheckFifoParam+0xe6>
      break;
 80042de:	bf00      	nop
 80042e0:	e00a      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e2:	bf00      	nop
 80042e4:	e008      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
 80042e8:	e006      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
    }
  } 
  
  return status; 
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop

08004308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e16b      	b.n	80045fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004324:	2201      	movs	r2, #1
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	f040 815a 	bne.w	80045f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d005      	beq.n	800435a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004356:	2b02      	cmp	r3, #2
 8004358:	d130      	bne.n	80043bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	2203      	movs	r2, #3
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0201 	and.w	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d017      	beq.n	80043f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d123      	bne.n	800444c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	08da      	lsrs	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3208      	adds	r2, #8
 800440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	220f      	movs	r2, #15
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	08da      	lsrs	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3208      	adds	r2, #8
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	2203      	movs	r2, #3
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0203 	and.w	r2, r3, #3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80b4 	beq.w	80045f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b60      	ldr	r3, [pc, #384]	; (8004614 <HAL_GPIO_Init+0x30c>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	4a5f      	ldr	r2, [pc, #380]	; (8004614 <HAL_GPIO_Init+0x30c>)
 8004498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800449c:	6453      	str	r3, [r2, #68]	; 0x44
 800449e:	4b5d      	ldr	r3, [pc, #372]	; (8004614 <HAL_GPIO_Init+0x30c>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044aa:	4a5b      	ldr	r2, [pc, #364]	; (8004618 <HAL_GPIO_Init+0x310>)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	3302      	adds	r3, #2
 80044b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_GPIO_Init+0x314>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <HAL_GPIO_Init+0x226>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a51      	ldr	r2, [pc, #324]	; (8004620 <HAL_GPIO_Init+0x318>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_Init+0x222>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a50      	ldr	r2, [pc, #320]	; (8004624 <HAL_GPIO_Init+0x31c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_Init+0x21e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <HAL_GPIO_Init+0x320>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x21a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4e      	ldr	r2, [pc, #312]	; (800462c <HAL_GPIO_Init+0x324>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x216>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4d      	ldr	r2, [pc, #308]	; (8004630 <HAL_GPIO_Init+0x328>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x212>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4c      	ldr	r2, [pc, #304]	; (8004634 <HAL_GPIO_Init+0x32c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x20e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4b      	ldr	r2, [pc, #300]	; (8004638 <HAL_GPIO_Init+0x330>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x20a>
 800450e:	2307      	movs	r3, #7
 8004510:	e00e      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004512:	2308      	movs	r3, #8
 8004514:	e00c      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004516:	2306      	movs	r3, #6
 8004518:	e00a      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451a:	2305      	movs	r3, #5
 800451c:	e008      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451e:	2304      	movs	r3, #4
 8004520:	e006      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004522:	2303      	movs	r3, #3
 8004524:	e004      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004526:	2302      	movs	r3, #2
 8004528:	e002      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452e:	2300      	movs	r3, #0
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	f002 0203 	and.w	r2, r2, #3
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	4093      	lsls	r3, r2
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004540:	4935      	ldr	r1, [pc, #212]	; (8004618 <HAL_GPIO_Init+0x310>)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3302      	adds	r3, #2
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800454e:	4b3b      	ldr	r3, [pc, #236]	; (800463c <HAL_GPIO_Init+0x334>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004572:	4a32      	ldr	r2, [pc, #200]	; (800463c <HAL_GPIO_Init+0x334>)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_GPIO_Init+0x334>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <HAL_GPIO_Init+0x334>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a2:	4b26      	ldr	r3, [pc, #152]	; (800463c <HAL_GPIO_Init+0x334>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_GPIO_Init+0x334>)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_GPIO_Init+0x334>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f0:	4a12      	ldr	r2, [pc, #72]	; (800463c <HAL_GPIO_Init+0x334>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	f67f ae90 	bls.w	8004324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	40013800 	.word	0x40013800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400
 8004624:	40020800 	.word	0x40020800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40021000 	.word	0x40021000
 8004630:	40021400 	.word	0x40021400
 8004634:	40021800 	.word	0x40021800
 8004638:	40021c00 	.word	0x40021c00
 800463c:	40013c00 	.word	0x40013c00

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004650:	787b      	ldrb	r3, [r7, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800465c:	e003      	b.n	8004666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	041a      	lsls	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004684:	887a      	ldrh	r2, [r7, #2]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4013      	ands	r3, r2
 800468a:	041a      	lsls	r2, r3, #16
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	43d9      	mvns	r1, r3
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	400b      	ands	r3, r1
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e12b      	b.n	8004912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fd f870 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800470c:	f001 fa06 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4a81      	ldr	r2, [pc, #516]	; (800491c <HAL_I2C_Init+0x274>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d807      	bhi.n	800472c <HAL_I2C_Init+0x84>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a80      	ldr	r2, [pc, #512]	; (8004920 <HAL_I2C_Init+0x278>)
 8004720:	4293      	cmp	r3, r2
 8004722:	bf94      	ite	ls
 8004724:	2301      	movls	r3, #1
 8004726:	2300      	movhi	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e006      	b.n	800473a <HAL_I2C_Init+0x92>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a7d      	ldr	r2, [pc, #500]	; (8004924 <HAL_I2C_Init+0x27c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	bf94      	ite	ls
 8004734:	2301      	movls	r3, #1
 8004736:	2300      	movhi	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0e7      	b.n	8004912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a78      	ldr	r2, [pc, #480]	; (8004928 <HAL_I2C_Init+0x280>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0c9b      	lsrs	r3, r3, #18
 800474c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a6a      	ldr	r2, [pc, #424]	; (800491c <HAL_I2C_Init+0x274>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d802      	bhi.n	800477c <HAL_I2C_Init+0xd4>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3301      	adds	r3, #1
 800477a:	e009      	b.n	8004790 <HAL_I2C_Init+0xe8>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_I2C_Init+0x284>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	3301      	adds	r3, #1
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	430b      	orrs	r3, r1
 8004796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	495c      	ldr	r1, [pc, #368]	; (800491c <HAL_I2C_Init+0x274>)
 80047ac:	428b      	cmp	r3, r1
 80047ae:	d819      	bhi.n	80047e4 <HAL_I2C_Init+0x13c>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1e59      	subs	r1, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c4:	400b      	ands	r3, r1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_I2C_Init+0x138>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e59      	subs	r1, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047de:	e051      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 80047e0:	2304      	movs	r3, #4
 80047e2:	e04f      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <HAL_I2C_Init+0x168>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1e58      	subs	r0, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	440b      	add	r3, r1
 80047fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e012      	b.n	8004836 <HAL_I2C_Init+0x18e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e58      	subs	r0, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	0099      	lsls	r1, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	fbb0 f3f3 	udiv	r3, r0, r3
 8004826:	3301      	adds	r3, #1
 8004828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_I2C_Init+0x196>
 800483a:	2301      	movs	r3, #1
 800483c:	e022      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10e      	bne.n	8004864 <HAL_I2C_Init+0x1bc>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1e58      	subs	r0, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	440b      	add	r3, r1
 8004854:	fbb0 f3f3 	udiv	r3, r0, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004862:	e00f      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	0099      	lsls	r1, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	fbb0 f3f3 	udiv	r3, r0, r3
 800487a:	3301      	adds	r3, #1
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	6809      	ldr	r1, [r1, #0]
 8004888:	4313      	orrs	r3, r2
 800488a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6911      	ldr	r1, [r2, #16]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68d2      	ldr	r2, [r2, #12]
 80048be:	4311      	orrs	r1, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	000186a0 	.word	0x000186a0
 8004920:	001e847f 	.word	0x001e847f
 8004924:	003d08ff 	.word	0x003d08ff
 8004928:	431bde83 	.word	0x431bde83
 800492c:	10624dd3 	.word	0x10624dd3

08004930 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800494a:	f7fe fb87 	bl	800305c <HAL_GetTick>
 800494e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b20      	cmp	r3, #32
 800495a:	f040 8208 	bne.w	8004d6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2319      	movs	r3, #25
 8004964:	2201      	movs	r2, #1
 8004966:	497b      	ldr	r1, [pc, #492]	; (8004b54 <HAL_I2C_Mem_Read+0x224>)
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 faef 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
 8004976:	e1fb      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_I2C_Mem_Read+0x56>
 8004982:	2302      	movs	r3, #2
 8004984:	e1f4      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d007      	beq.n	80049ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2222      	movs	r2, #34	; 0x22
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a5b      	ldr	r2, [pc, #364]	; (8004b58 <HAL_I2C_Mem_Read+0x228>)
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ee:	88f8      	ldrh	r0, [r7, #6]
 80049f0:	893a      	ldrh	r2, [r7, #8]
 80049f2:	8979      	ldrh	r1, [r7, #10]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4603      	mov	r3, r0
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f9bc 	bl	8004d7c <I2C_RequestMemoryRead>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1b0      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d113      	bne.n	8004a3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e184      	b.n	8004d48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d11b      	bne.n	8004a7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e164      	b.n	8004d48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d11b      	bne.n	8004abe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	e144      	b.n	8004d48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ad4:	e138      	b.n	8004d48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	f200 80f1 	bhi.w	8004cc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d123      	bne.n	8004b30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fb44 	bl	800517a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e139      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b2e:	e10b      	b.n	8004d48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d14e      	bne.n	8004bd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4906      	ldr	r1, [pc, #24]	; (8004b5c <HAL_I2C_Mem_Read+0x22c>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa02 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e10e      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
 8004b52:	bf00      	nop
 8004b54:	00100002 	.word	0x00100002
 8004b58:	ffff0000 	.word	0xffff0000
 8004b5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bd4:	e0b8      	b.n	8004d48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4966      	ldr	r1, [pc, #408]	; (8004d78 <HAL_I2C_Mem_Read+0x448>)
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f9b3 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0bf      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2200      	movs	r2, #0
 8004c3a:	494f      	ldr	r1, [pc, #316]	; (8004d78 <HAL_I2C_Mem_Read+0x448>)
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f985 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e091      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cc0:	e042      	b.n	8004d48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa57 	bl	800517a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e04c      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d118      	bne.n	8004d48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f aec2 	bne.w	8004ad6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e000      	b.n	8004d70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3728      	adds	r7, #40	; 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	00010004 	.word	0x00010004

08004d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	813b      	strh	r3, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f8c2 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ddc:	d103      	bne.n	8004de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0aa      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dea:	897b      	ldrh	r3, [r7, #10]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	4952      	ldr	r1, [pc, #328]	; (8004f48 <I2C_RequestMemoryRead+0x1cc>)
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f8fa 	bl	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e097      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	6a39      	ldr	r1, [r7, #32]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f964 	bl	80050f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d107      	bne.n	8004e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e076      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d105      	bne.n	8004e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e58:	893b      	ldrh	r3, [r7, #8]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	611a      	str	r2, [r3, #16]
 8004e62:	e021      	b.n	8004ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e64:	893b      	ldrh	r3, [r7, #8]
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e74:	6a39      	ldr	r1, [r7, #32]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f93e 	bl	80050f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d107      	bne.n	8004e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e050      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e9e:	893b      	ldrh	r3, [r7, #8]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	6a39      	ldr	r1, [r7, #32]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f923 	bl	80050f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d107      	bne.n	8004ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e035      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f82b 	bl	8004f4c <I2C_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0a:	d103      	bne.n	8004f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e013      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	4906      	ldr	r1, [pc, #24]	; (8004f48 <I2C_RequestMemoryRead+0x1cc>)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f863 	bl	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	00010002 	.word	0x00010002

08004f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5c:	e025      	b.n	8004faa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d021      	beq.n	8004faa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fe f879 	bl	800305c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d116      	bne.n	8004faa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f043 0220 	orr.w	r2, r3, #32
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e023      	b.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d10d      	bne.n	8004fd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	e00c      	b.n	8004fea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	43da      	mvns	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d0b6      	beq.n	8004f5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005008:	e051      	b.n	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005018:	d123      	bne.n	8005062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005028:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005032:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e046      	b.n	80050f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d021      	beq.n	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506a:	f7fd fff7 	bl	800305c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d116      	bne.n	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e020      	b.n	80050f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d10c      	bne.n	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	43da      	mvns	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bf14      	ite	ne
 80050ca:	2301      	movne	r3, #1
 80050cc:	2300      	moveq	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e00b      	b.n	80050ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	43da      	mvns	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d18d      	bne.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005104:	e02d      	b.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f88d 	bl	8005226 <I2C_IsAcknowledgeFailed>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e02d      	b.n	8005172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d021      	beq.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7fd ff9d 	bl	800305c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	d302      	bcc.n	8005134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d116      	bne.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e007      	b.n	8005172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d1ca      	bne.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005186:	e042      	b.n	800520e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b10      	cmp	r3, #16
 8005194:	d119      	bne.n	80051ca <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f06f 0210 	mvn.w	r2, #16
 800519e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e029      	b.n	800521e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fd ff47 	bl	800305c <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e007      	b.n	800521e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d1b5      	bne.n	8005188 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d11b      	bne.n	8005276 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005246:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f043 0204 	orr.w	r2, r3, #4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e264      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d075      	beq.n	800538e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052a2:	4ba3      	ldr	r3, [pc, #652]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d00c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ae:	4ba0      	ldr	r3, [pc, #640]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d112      	bne.n	80052e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ba:	4b9d      	ldr	r3, [pc, #628]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c6:	d10b      	bne.n	80052e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	4b99      	ldr	r3, [pc, #612]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d05b      	beq.n	800538c <HAL_RCC_OscConfig+0x108>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d157      	bne.n	800538c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e23f      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d106      	bne.n	80052f8 <HAL_RCC_OscConfig+0x74>
 80052ea:	4b91      	ldr	r3, [pc, #580]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a90      	ldr	r2, [pc, #576]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e01d      	b.n	8005334 <HAL_RCC_OscConfig+0xb0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0x98>
 8005302:	4b8b      	ldr	r3, [pc, #556]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a8a      	ldr	r2, [pc, #552]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b88      	ldr	r3, [pc, #544]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a87      	ldr	r2, [pc, #540]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0xb0>
 800531c:	4b84      	ldr	r3, [pc, #528]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a83      	ldr	r2, [pc, #524]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b81      	ldr	r3, [pc, #516]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a80      	ldr	r2, [pc, #512]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 800532e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fd fe8e 	bl	800305c <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005344:	f7fd fe8a 	bl	800305c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e204      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	4b76      	ldr	r3, [pc, #472]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0xc0>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fd fe7a 	bl	800305c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800536c:	f7fd fe76 	bl	800305c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e1f0      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	4b6c      	ldr	r3, [pc, #432]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0xe8>
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800538c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d063      	beq.n	8005462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800539a:	4b65      	ldr	r3, [pc, #404]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a6:	4b62      	ldr	r3, [pc, #392]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d11c      	bne.n	80053ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b2:	4b5f      	ldr	r3, [pc, #380]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d116      	bne.n	80053ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053be:	4b5c      	ldr	r3, [pc, #368]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_RCC_OscConfig+0x152>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d001      	beq.n	80053d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e1c4      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d6:	4b56      	ldr	r3, [pc, #344]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4952      	ldr	r1, [pc, #328]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ea:	e03a      	b.n	8005462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053f4:	4b4f      	ldr	r3, [pc, #316]	; (8005534 <HAL_RCC_OscConfig+0x2b0>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fd fe2f 	bl	800305c <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005402:	f7fd fe2b 	bl	800305c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e1a5      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005414:	4b46      	ldr	r3, [pc, #280]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005420:	4b43      	ldr	r3, [pc, #268]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4940      	ldr	r1, [pc, #256]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005436:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_OscConfig+0x2b0>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fd fe0e 	bl	800305c <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005444:	f7fd fe0a 	bl	800305c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e184      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005456:	4b36      	ldr	r3, [pc, #216]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d030      	beq.n	80054d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005476:	4b30      	ldr	r3, [pc, #192]	; (8005538 <HAL_RCC_OscConfig+0x2b4>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547c:	f7fd fdee 	bl	800305c <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005484:	f7fd fdea 	bl	800305c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e164      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005496:	4b26      	ldr	r3, [pc, #152]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x200>
 80054a2:	e015      	b.n	80054d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <HAL_RCC_OscConfig+0x2b4>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054aa:	f7fd fdd7 	bl	800305c <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b2:	f7fd fdd3 	bl	800305c <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e14d      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80054c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f0      	bne.n	80054b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a0 	beq.w	800561e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e2:	4b13      	ldr	r3, [pc, #76]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4a0e      	ldr	r2, [pc, #56]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6413      	str	r3, [r2, #64]	; 0x40
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_OscConfig+0x2b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d121      	bne.n	800555e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_RCC_OscConfig+0x2b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a07      	ldr	r2, [pc, #28]	; (800553c <HAL_RCC_OscConfig+0x2b8>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005526:	f7fd fd99 	bl	800305c <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552c:	e011      	b.n	8005552 <HAL_RCC_OscConfig+0x2ce>
 800552e:	bf00      	nop
 8005530:	40023800 	.word	0x40023800
 8005534:	42470000 	.word	0x42470000
 8005538:	42470e80 	.word	0x42470e80
 800553c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005540:	f7fd fd8c 	bl	800305c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e106      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b85      	ldr	r3, [pc, #532]	; (8005768 <HAL_RCC_OscConfig+0x4e4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d106      	bne.n	8005574 <HAL_RCC_OscConfig+0x2f0>
 8005566:	4b81      	ldr	r3, [pc, #516]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a80      	ldr	r2, [pc, #512]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
 8005572:	e01c      	b.n	80055ae <HAL_RCC_OscConfig+0x32a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d10c      	bne.n	8005596 <HAL_RCC_OscConfig+0x312>
 800557c:	4b7b      	ldr	r3, [pc, #492]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a7a      	ldr	r2, [pc, #488]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 8005582:	f043 0304 	orr.w	r3, r3, #4
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
 8005588:	4b78      	ldr	r3, [pc, #480]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a77      	ldr	r2, [pc, #476]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
 8005594:	e00b      	b.n	80055ae <HAL_RCC_OscConfig+0x32a>
 8005596:	4b75      	ldr	r3, [pc, #468]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a74      	ldr	r2, [pc, #464]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
 80055a2:	4b72      	ldr	r3, [pc, #456]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a71      	ldr	r2, [pc, #452]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 80055a8:	f023 0304 	bic.w	r3, r3, #4
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d015      	beq.n	80055e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b6:	f7fd fd51 	bl	800305c <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fd fd4d 	bl	800305c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e0c5      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d4:	4b65      	ldr	r3, [pc, #404]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ee      	beq.n	80055be <HAL_RCC_OscConfig+0x33a>
 80055e0:	e014      	b.n	800560c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e2:	f7fd fd3b 	bl	800305c <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fd fd37 	bl	800305c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0af      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005600:	4b5a      	ldr	r3, [pc, #360]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ee      	bne.n	80055ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d105      	bne.n	800561e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005612:	4b56      	ldr	r3, [pc, #344]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	4a55      	ldr	r2, [pc, #340]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 8005618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 809b 	beq.w	800575e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005628:	4b50      	ldr	r3, [pc, #320]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b08      	cmp	r3, #8
 8005632:	d05c      	beq.n	80056ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d141      	bne.n	80056c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563c:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <HAL_RCC_OscConfig+0x4ec>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005642:	f7fd fd0b 	bl	800305c <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564a:	f7fd fd07 	bl	800305c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e081      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565c:	4b43      	ldr	r3, [pc, #268]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	019b      	lsls	r3, r3, #6
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	3b01      	subs	r3, #1
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	061b      	lsls	r3, r3, #24
 800568c:	4937      	ldr	r1, [pc, #220]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005692:	4b37      	ldr	r3, [pc, #220]	; (8005770 <HAL_RCC_OscConfig+0x4ec>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fd fce0 	bl	800305c <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fd fcdc 	bl	800305c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e056      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b2:	4b2e      	ldr	r3, [pc, #184]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x41c>
 80056be:	e04e      	b.n	800575e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_OscConfig+0x4ec>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c6:	f7fd fcc9 	bl	800305c <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ce:	f7fd fcc5 	bl	800305c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e03f      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e0:	4b22      	ldr	r3, [pc, #136]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <HAL_RCC_OscConfig+0x44a>
 80056ec:	e037      	b.n	800575e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e032      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056fa:	4b1c      	ldr	r3, [pc, #112]	; (800576c <HAL_RCC_OscConfig+0x4e8>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d028      	beq.n	800575a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d121      	bne.n	800575a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d11a      	bne.n	800575a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800572a:	4013      	ands	r3, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005730:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005732:	4293      	cmp	r3, r2
 8005734:	d111      	bne.n	800575a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	3b01      	subs	r3, #1
 8005744:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d107      	bne.n	800575a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d001      	beq.n	800575e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40007000 	.word	0x40007000
 800576c:	40023800 	.word	0x40023800
 8005770:	42470060 	.word	0x42470060

08005774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0cc      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005788:	4b68      	ldr	r3, [pc, #416]	; (800592c <HAL_RCC_ClockConfig+0x1b8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90c      	bls.n	80057b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005796:	4b65      	ldr	r3, [pc, #404]	; (800592c <HAL_RCC_ClockConfig+0x1b8>)
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579e:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d001      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0b8      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d020      	beq.n	80057fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057c8:	4b59      	ldr	r3, [pc, #356]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a58      	ldr	r2, [pc, #352]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057e0:	4b53      	ldr	r3, [pc, #332]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4a52      	ldr	r2, [pc, #328]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ec:	4b50      	ldr	r3, [pc, #320]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	494d      	ldr	r1, [pc, #308]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d044      	beq.n	8005894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d107      	bne.n	8005822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005812:	4b47      	ldr	r3, [pc, #284]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d119      	bne.n	8005852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e07f      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d003      	beq.n	8005832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582e:	2b03      	cmp	r3, #3
 8005830:	d107      	bne.n	8005842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005832:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e06f      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005842:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e067      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005852:	4b37      	ldr	r3, [pc, #220]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f023 0203 	bic.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4934      	ldr	r1, [pc, #208]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005864:	f7fd fbfa 	bl	800305c <HAL_GetTick>
 8005868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	e00a      	b.n	8005882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586c:	f7fd fbf6 	bl	800305c <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f241 3288 	movw	r2, #5000	; 0x1388
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e04f      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005882:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 020c 	and.w	r2, r3, #12
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d1eb      	bne.n	800586c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <HAL_RCC_ClockConfig+0x1b8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d20c      	bcs.n	80058bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b22      	ldr	r3, [pc, #136]	; (800592c <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e032      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c8:	4b19      	ldr	r3, [pc, #100]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4916      	ldr	r1, [pc, #88]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058e6:	4b12      	ldr	r3, [pc, #72]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	490e      	ldr	r1, [pc, #56]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058fa:	f000 f821 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	490a      	ldr	r1, [pc, #40]	; (8005934 <HAL_RCC_ClockConfig+0x1c0>)
 800590c:	5ccb      	ldrb	r3, [r1, r3]
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	4a09      	ldr	r2, [pc, #36]	; (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 8005914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_RCC_ClockConfig+0x1c8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fb5a 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40023c00 	.word	0x40023c00
 8005930:	40023800 	.word	0x40023800
 8005934:	08009214 	.word	0x08009214
 8005938:	20000010 	.word	0x20000010
 800593c:	20000014 	.word	0x20000014

08005940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	2300      	movs	r3, #0
 8005952:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005958:	4b67      	ldr	r3, [pc, #412]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 030c 	and.w	r3, r3, #12
 8005960:	2b08      	cmp	r3, #8
 8005962:	d00d      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0x40>
 8005964:	2b08      	cmp	r3, #8
 8005966:	f200 80bd 	bhi.w	8005ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x34>
 800596e:	2b04      	cmp	r3, #4
 8005970:	d003      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x3a>
 8005972:	e0b7      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005974:	4b61      	ldr	r3, [pc, #388]	; (8005afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005976:	60bb      	str	r3, [r7, #8]
       break;
 8005978:	e0b7      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800597a:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800597c:	60bb      	str	r3, [r7, #8]
      break;
 800597e:	e0b4      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005980:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800598a:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d04d      	beq.n	8005a32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005996:	4b58      	ldr	r3, [pc, #352]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	099b      	lsrs	r3, r3, #6
 800599c:	461a      	mov	r2, r3
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	ea02 0800 	and.w	r8, r2, r0
 80059ae:	ea03 0901 	and.w	r9, r3, r1
 80059b2:	4640      	mov	r0, r8
 80059b4:	4649      	mov	r1, r9
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	014b      	lsls	r3, r1, #5
 80059c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059c4:	0142      	lsls	r2, r0, #5
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	ebb0 0008 	subs.w	r0, r0, r8
 80059ce:	eb61 0109 	sbc.w	r1, r1, r9
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	018b      	lsls	r3, r1, #6
 80059dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059e0:	0182      	lsls	r2, r0, #6
 80059e2:	1a12      	subs	r2, r2, r0
 80059e4:	eb63 0301 	sbc.w	r3, r3, r1
 80059e8:	f04f 0000 	mov.w	r0, #0
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	00d9      	lsls	r1, r3, #3
 80059f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059f6:	00d0      	lsls	r0, r2, #3
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	eb12 0208 	adds.w	r2, r2, r8
 8005a00:	eb43 0309 	adc.w	r3, r3, r9
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	0259      	lsls	r1, r3, #9
 8005a0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a12:	0250      	lsls	r0, r2, #9
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	f7fb f862 	bl	8000aec <__aeabi_uldivmod>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e04a      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a32:	4b31      	ldr	r3, [pc, #196]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a42:	f04f 0100 	mov.w	r1, #0
 8005a46:	ea02 0400 	and.w	r4, r2, r0
 8005a4a:	ea03 0501 	and.w	r5, r3, r1
 8005a4e:	4620      	mov	r0, r4
 8005a50:	4629      	mov	r1, r5
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	014b      	lsls	r3, r1, #5
 8005a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a60:	0142      	lsls	r2, r0, #5
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	1b00      	subs	r0, r0, r4
 8005a68:	eb61 0105 	sbc.w	r1, r1, r5
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	018b      	lsls	r3, r1, #6
 8005a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a7a:	0182      	lsls	r2, r0, #6
 8005a7c:	1a12      	subs	r2, r2, r0
 8005a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	00d9      	lsls	r1, r3, #3
 8005a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a90:	00d0      	lsls	r0, r2, #3
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	1912      	adds	r2, r2, r4
 8005a98:	eb45 0303 	adc.w	r3, r5, r3
 8005a9c:	f04f 0000 	mov.w	r0, #0
 8005aa0:	f04f 0100 	mov.w	r1, #0
 8005aa4:	0299      	lsls	r1, r3, #10
 8005aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005aaa:	0290      	lsls	r0, r2, #10
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	f7fb f816 	bl	8000aec <__aeabi_uldivmod>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	60bb      	str	r3, [r7, #8]
      break;
 8005ae2:	e002      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ae6:	60bb      	str	r3, [r7, #8]
      break;
 8005ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aea:	68bb      	ldr	r3, [r7, #8]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005af6:	bf00      	nop
 8005af8:	40023800 	.word	0x40023800
 8005afc:	00f42400 	.word	0x00f42400
 8005b00:	007a1200 	.word	0x007a1200

08005b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b08:	4b03      	ldr	r3, [pc, #12]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000010 	.word	0x20000010

08005b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b20:	f7ff fff0 	bl	8005b04 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	0a9b      	lsrs	r3, r3, #10
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4903      	ldr	r1, [pc, #12]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	08009224 	.word	0x08009224

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b48:	f7ff ffdc 	bl	8005b04 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0b5b      	lsrs	r3, r3, #13
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4903      	ldr	r1, [pc, #12]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40023800 	.word	0x40023800
 8005b68:	08009224 	.word	0x08009224

08005b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e07b      	b.n	8005c76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d108      	bne.n	8005b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8e:	d009      	beq.n	8005ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	61da      	str	r2, [r3, #28]
 8005b96:	e005      	b.n	8005ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc fdd2 	bl	8002768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c28:	ea42 0103 	orr.w	r1, r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	f003 0104 	and.w	r1, r3, #4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f003 0210 	and.w	r2, r3, #16
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b088      	sub	sp, #32
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_Transmit+0x22>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e126      	b.n	8005eee <HAL_SPI_Transmit+0x270>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca8:	f7fd f9d8 	bl	800305c <HAL_GetTick>
 8005cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cc2:	e10b      	b.n	8005edc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_SPI_Transmit+0x52>
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cd4:	e102      	b.n	8005edc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2203      	movs	r2, #3
 8005cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	88fa      	ldrh	r2, [r7, #6]
 8005cee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1c:	d10f      	bne.n	8005d3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d007      	beq.n	8005d5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d64:	d14b      	bne.n	8005dfe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_Transmit+0xf6>
 8005d6e:	8afb      	ldrh	r3, [r7, #22]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d13e      	bne.n	8005df2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	881a      	ldrh	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d98:	e02b      	b.n	8005df2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d112      	bne.n	8005dce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	881a      	ldrh	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	1c9a      	adds	r2, r3, #2
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dcc:	e011      	b.n	8005df2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dce:	f7fd f945 	bl	800305c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d803      	bhi.n	8005de6 <HAL_SPI_Transmit+0x168>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d102      	bne.n	8005dec <HAL_SPI_Transmit+0x16e>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005df0:	e074      	b.n	8005edc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1ce      	bne.n	8005d9a <HAL_SPI_Transmit+0x11c>
 8005dfc:	e04c      	b.n	8005e98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_Transmit+0x18e>
 8005e06:	8afb      	ldrh	r3, [r7, #22]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d140      	bne.n	8005e8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	330c      	adds	r3, #12
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e32:	e02c      	b.n	8005e8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d113      	bne.n	8005e6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	7812      	ldrb	r2, [r2, #0]
 8005e4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e68:	e011      	b.n	8005e8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e6a:	f7fd f8f7 	bl	800305c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d803      	bhi.n	8005e82 <HAL_SPI_Transmit+0x204>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d102      	bne.n	8005e88 <HAL_SPI_Transmit+0x20a>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d102      	bne.n	8005e8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e8c:	e026      	b.n	8005edc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1cd      	bne.n	8005e34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fbcb 	bl	8006638 <SPI_EndRxTxTransaction>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e000      	b.n	8005edc <HAL_SPI_Transmit+0x25e>
  }

error:
 8005eda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af02      	add	r7, sp, #8
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f12:	d112      	bne.n	8005f3a <HAL_SPI_Receive+0x44>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10e      	bne.n	8005f3a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f24:	88fa      	ldrh	r2, [r7, #6]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f8f1 	bl	8006118 <HAL_SPI_TransmitReceive>
 8005f36:	4603      	mov	r3, r0
 8005f38:	e0ea      	b.n	8006110 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_SPI_Receive+0x52>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e0e3      	b.n	8006110 <HAL_SPI_Receive+0x21a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f50:	f7fd f884 	bl	800305c <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
 8005f64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f66:	e0ca      	b.n	80060fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Receive+0x7e>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f78:	e0c1      	b.n	80060fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc0:	d10f      	bne.n	8005fe2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fe0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d007      	beq.n	8006000 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d162      	bne.n	80060ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006008:	e02e      	b.n	8006068 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d115      	bne.n	8006044 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f103 020c 	add.w	r2, r3, #12
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006042:	e011      	b.n	8006068 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006044:	f7fd f80a 	bl	800305c <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d803      	bhi.n	800605c <HAL_SPI_Receive+0x166>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d102      	bne.n	8006062 <HAL_SPI_Receive+0x16c>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006066:	e04a      	b.n	80060fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1cb      	bne.n	800600a <HAL_SPI_Receive+0x114>
 8006072:	e031      	b.n	80060d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d113      	bne.n	80060aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	b292      	uxth	r2, r2
 800608e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060a8:	e011      	b.n	80060ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060aa:	f7fc ffd7 	bl	800305c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d803      	bhi.n	80060c2 <HAL_SPI_Receive+0x1cc>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d102      	bne.n	80060c8 <HAL_SPI_Receive+0x1d2>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060cc:	e017      	b.n	80060fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1cd      	bne.n	8006074 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fa45 	bl	800656c <SPI_EndRxTransaction>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
 80060fa:	e000      	b.n	80060fe <HAL_SPI_Receive+0x208>
  }

error :
 80060fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08c      	sub	sp, #48	; 0x30
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006126:	2301      	movs	r3, #1
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_SPI_TransmitReceive+0x26>
 800613a:	2302      	movs	r3, #2
 800613c:	e18a      	b.n	8006454 <HAL_SPI_TransmitReceive+0x33c>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006146:	f7fc ff89 	bl	800305c <HAL_GetTick>
 800614a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800615c:	887b      	ldrh	r3, [r7, #2]
 800615e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006164:	2b01      	cmp	r3, #1
 8006166:	d00f      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x70>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800616e:	d107      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x68>
 8006178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800617c:	2b04      	cmp	r3, #4
 800617e:	d003      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006180:	2302      	movs	r3, #2
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006186:	e15b      	b.n	8006440 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_SPI_TransmitReceive+0x82>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <HAL_SPI_TransmitReceive+0x82>
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061a0:	e14e      	b.n	8006440 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d003      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2205      	movs	r2, #5
 80061b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	887a      	ldrh	r2, [r7, #2]
 80061c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	887a      	ldrh	r2, [r7, #2]
 80061cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	887a      	ldrh	r2, [r7, #2]
 80061de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d007      	beq.n	800620a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006212:	d178      	bne.n	8006306 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_SPI_TransmitReceive+0x10a>
 800621c:	8b7b      	ldrh	r3, [r7, #26]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d166      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	881a      	ldrh	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	1c9a      	adds	r2, r3, #2
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006246:	e053      	b.n	80062f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d11b      	bne.n	800628e <HAL_SPI_TransmitReceive+0x176>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d016      	beq.n	800628e <HAL_SPI_TransmitReceive+0x176>
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d113      	bne.n	800628e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	881a      	ldrh	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d119      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x1b8>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d014      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	b292      	uxth	r2, r2
 80062b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	1c9a      	adds	r2, r3, #2
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062cc:	2301      	movs	r3, #1
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062d0:	f7fc fec4 	bl	800305c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062dc:	429a      	cmp	r2, r3
 80062de:	d807      	bhi.n	80062f0 <HAL_SPI_TransmitReceive+0x1d8>
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d003      	beq.n	80062f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062ee:	e0a7      	b.n	8006440 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1a6      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x130>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1a1      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x130>
 8006304:	e07c      	b.n	8006400 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_SPI_TransmitReceive+0x1fc>
 800630e:	8b7b      	ldrh	r3, [r7, #26]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d16b      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800633a:	e057      	b.n	80063ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d11c      	bne.n	8006384 <HAL_SPI_TransmitReceive+0x26c>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <HAL_SPI_TransmitReceive+0x26c>
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d114      	bne.n	8006384 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	7812      	ldrb	r2, [r2, #0]
 8006366:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b01      	cmp	r3, #1
 8006390:	d119      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x2ae>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d014      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063c2:	2301      	movs	r3, #1
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063c6:	f7fc fe49 	bl	800305c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d803      	bhi.n	80063de <HAL_SPI_TransmitReceive+0x2c6>
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d102      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x2cc>
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063ea:	e029      	b.n	8006440 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1a2      	bne.n	800633c <HAL_SPI_TransmitReceive+0x224>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d19d      	bne.n	800633c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f917 	bl	8006638 <SPI_EndRxTxTransaction>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800641c:	e010      	b.n	8006440 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	e000      	b.n	8006440 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800643e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006450:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006454:	4618      	mov	r0, r3
 8006456:	3730      	adds	r7, #48	; 0x30
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800646c:	f7fc fdf6 	bl	800305c <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	4413      	add	r3, r2
 800647a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800647c:	f7fc fdee 	bl	800305c <HAL_GetTick>
 8006480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006482:	4b39      	ldr	r3, [pc, #228]	; (8006568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	015b      	lsls	r3, r3, #5
 8006488:	0d1b      	lsrs	r3, r3, #20
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	fb02 f303 	mul.w	r3, r2, r3
 8006490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006492:	e054      	b.n	800653e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649a:	d050      	beq.n	800653e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800649c:	f7fc fdde 	bl	800305c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d902      	bls.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d13d      	bne.n	800652e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ca:	d111      	bne.n	80064f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d4:	d004      	beq.n	80064e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064de:	d107      	bne.n	80064f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f8:	d10f      	bne.n	800651a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e017      	b.n	800655e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	3b01      	subs	r3, #1
 800653c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	429a      	cmp	r2, r3
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d19b      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000010 	.word	0x20000010

0800656c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006580:	d111      	bne.n	80065a6 <SPI_EndRxTransaction+0x3a>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658a:	d004      	beq.n	8006596 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006594:	d107      	bne.n	80065a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ae:	d12a      	bne.n	8006606 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d012      	beq.n	80065e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2200      	movs	r2, #0
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f7ff ff49 	bl	800645c <SPI_WaitFlagStateUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d02d      	beq.n	800662c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	f043 0220 	orr.w	r2, r3, #32
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e026      	b.n	800662e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	2101      	movs	r1, #1
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff ff36 	bl	800645c <SPI_WaitFlagStateUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01a      	beq.n	800662c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e013      	b.n	800662e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	2101      	movs	r1, #1
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff ff23 	bl	800645c <SPI_WaitFlagStateUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e000      	b.n	800662e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006644:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <SPI_EndRxTxTransaction+0x7c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <SPI_EndRxTxTransaction+0x80>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	0d5b      	lsrs	r3, r3, #21
 8006650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006654:	fb02 f303 	mul.w	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006662:	d112      	bne.n	800668a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff fef4 	bl	800645c <SPI_WaitFlagStateUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d016      	beq.n	80066a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0220 	orr.w	r2, r3, #32
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e00f      	b.n	80066aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	3b01      	subs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	d0f2      	beq.n	800668a <SPI_EndRxTxTransaction+0x52>
 80066a4:	e000      	b.n	80066a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80066a6:	bf00      	nop
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000010 	.word	0x20000010
 80066b8:	165e9f81 	.word	0x165e9f81

080066bc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e034      	b.n	800673c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7fa ff3e 	bl	8001568 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3308      	adds	r3, #8
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f002 f828 	bl	800874c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	461a      	mov	r2, r3
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	f002 f872 	bl	80087f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6858      	ldr	r0, [r3, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	f002 f8a7 	bl	800886c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	6892      	ldr	r2, [r2, #8]
 8006726:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	6892      	ldr	r2, [r2, #8]
 8006732:	f041 0101 	orr.w	r1, r1, #1
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e041      	b.n	80067da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fc f996 	bl	8002a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f000 fc7a 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d001      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e04e      	b.n	800689a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a23      	ldr	r2, [pc, #140]	; (80068a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d022      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x80>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006826:	d01d      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x80>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <HAL_TIM_Base_Start_IT+0xc8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d018      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x80>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x80>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1c      	ldr	r2, [pc, #112]	; (80068b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00e      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x80>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1b      	ldr	r2, [pc, #108]	; (80068b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d009      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x80>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a19      	ldr	r2, [pc, #100]	; (80068bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <HAL_TIM_Base_Start_IT+0x80>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d111      	bne.n	8006888 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b06      	cmp	r3, #6
 8006874:	d010      	beq.n	8006898 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0201 	orr.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006886:	e007      	b.n	8006898 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40000c00 	.word	0x40000c00
 80068b8:	40010400 	.word	0x40010400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40001800 	.word	0x40001800

080068c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e041      	b.n	800695a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f839 	bl	8006962 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f000 fbba 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_TIM_PWM_Start+0x24>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e022      	b.n	80069e2 <HAL_TIM_PWM_Start+0x6a>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d109      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x3e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e015      	b.n	80069e2 <HAL_TIM_PWM_Start+0x6a>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_PWM_Start+0x58>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e008      	b.n	80069e2 <HAL_TIM_PWM_Start+0x6a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e07c      	b.n	8006ae4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Start+0x82>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f8:	e013      	b.n	8006a22 <HAL_TIM_PWM_Start+0xaa>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Start+0x92>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a08:	e00b      	b.n	8006a22 <HAL_TIM_PWM_Start+0xaa>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_PWM_Start+0xa2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a18:	e003      	b.n	8006a22 <HAL_TIM_PWM_Start+0xaa>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2201      	movs	r2, #1
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fe10 	bl	8007650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2d      	ldr	r2, [pc, #180]	; (8006aec <HAL_TIM_PWM_Start+0x174>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_PWM_Start+0xcc>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2c      	ldr	r2, [pc, #176]	; (8006af0 <HAL_TIM_PWM_Start+0x178>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_TIM_PWM_Start+0xd0>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_TIM_PWM_Start+0xd2>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a22      	ldr	r2, [pc, #136]	; (8006aec <HAL_TIM_PWM_Start+0x174>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d01d      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <HAL_TIM_PWM_Start+0x17c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <HAL_TIM_PWM_Start+0x180>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <HAL_TIM_PWM_Start+0x184>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <HAL_TIM_PWM_Start+0x178>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_TIM_PWM_Start+0x188>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_PWM_Start+0x136>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIM_PWM_Start+0x18c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d111      	bne.n	8006ad2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d010      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad0:	e007      	b.n	8006ae2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40010000 	.word	0x40010000
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40000c00 	.word	0x40000c00
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40001800 	.word	0x40001800

08006b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d122      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d11b      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0202 	mvn.w	r2, #2
 8006b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa77 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006b50:	e005      	b.n	8006b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa69 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa7a 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d122      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d11b      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f06f 0204 	mvn.w	r2, #4
 8006b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa4d 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006ba4:	e005      	b.n	8006bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa3f 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fa50 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d122      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d11b      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0208 	mvn.w	r2, #8
 8006bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2204      	movs	r2, #4
 8006be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa23 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006bf8:	e005      	b.n	8006c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa15 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fa26 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d122      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d11b      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0210 	mvn.w	r2, #16
 8006c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2208      	movs	r2, #8
 8006c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9f9 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006c4c:	e005      	b.n	8006c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9eb 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9fc 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10e      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d107      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0201 	mvn.w	r2, #1
 8006c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fb ffea 	bl	8002c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	d10e      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d107      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fd78 	bl	80077a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d10e      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d107      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f9c1 	bl	8007066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d10e      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d107      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0220 	mvn.w	r2, #32
 8006d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fd42 	bl	8007794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e0ae      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	f200 809f 	bhi.w	8006e84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d81 	.word	0x08006d81
 8006d50:	08006e85 	.word	0x08006e85
 8006d54:	08006e85 	.word	0x08006e85
 8006d58:	08006e85 	.word	0x08006e85
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006e85 	.word	0x08006e85
 8006d64:	08006e85 	.word	0x08006e85
 8006d68:	08006e85 	.word	0x08006e85
 8006d6c:	08006e03 	.word	0x08006e03
 8006d70:	08006e85 	.word	0x08006e85
 8006d74:	08006e85 	.word	0x08006e85
 8006d78:	08006e85 	.word	0x08006e85
 8006d7c:	08006e43 	.word	0x08006e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fa18 	bl	80071bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0204 	bic.w	r2, r2, #4
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	619a      	str	r2, [r3, #24]
      break;
 8006dbe:	e064      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fa68 	bl	800729c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6999      	ldr	r1, [r3, #24]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	619a      	str	r2, [r3, #24]
      break;
 8006e00:	e043      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fabd 	bl	8007388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0208 	orr.w	r2, r2, #8
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0204 	bic.w	r2, r2, #4
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	61da      	str	r2, [r3, #28]
      break;
 8006e40:	e023      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fb11 	bl	8007470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69d9      	ldr	r1, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	021a      	lsls	r2, r3, #8
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	61da      	str	r2, [r3, #28]
      break;
 8006e82:	e002      	b.n	8006e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e0b4      	b.n	8007022 <HAL_TIM_ConfigClockSource+0x186>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	d03e      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0xd4>
 8006ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef6:	f200 8087 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efe:	f000 8086 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x172>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f06:	d87f      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b70      	cmp	r3, #112	; 0x70
 8006f0a:	d01a      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0xa6>
 8006f0c:	2b70      	cmp	r3, #112	; 0x70
 8006f0e:	d87b      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b60      	cmp	r3, #96	; 0x60
 8006f12:	d050      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f14:	2b60      	cmp	r3, #96	; 0x60
 8006f16:	d877      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b50      	cmp	r3, #80	; 0x50
 8006f1a:	d03c      	beq.n	8006f96 <HAL_TIM_ConfigClockSource+0xfa>
 8006f1c:	2b50      	cmp	r3, #80	; 0x50
 8006f1e:	d873      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d058      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d86f      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d064      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d86b      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d060      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d867      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05c      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d05a      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f40:	e062      	b.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6899      	ldr	r1, [r3, #8]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f000 fb5d 	bl	8007610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	609a      	str	r2, [r3, #8]
      break;
 8006f6e:	e04f      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	6899      	ldr	r1, [r3, #8]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f000 fb46 	bl	8007610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f92:	609a      	str	r2, [r3, #8]
      break;
 8006f94:	e03c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f000 faba 	bl	800751c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2150      	movs	r1, #80	; 0x50
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fb13 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006fb4:	e02c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6859      	ldr	r1, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f000 fad9 	bl	800757a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2160      	movs	r1, #96	; 0x60
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fb03 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006fd4:	e01c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f000 fa9a 	bl	800751c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2140      	movs	r1, #64	; 0x40
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 faf3 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006ff4:	e00c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f000 faea 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8007006:	e003      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
      break;
 800700c:	e000      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800700e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a40      	ldr	r2, [pc, #256]	; (8007190 <TIM_Base_SetConfig+0x114>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709a:	d00f      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a3d      	ldr	r2, [pc, #244]	; (8007194 <TIM_Base_SetConfig+0x118>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00b      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a3c      	ldr	r2, [pc, #240]	; (8007198 <TIM_Base_SetConfig+0x11c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d007      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a3b      	ldr	r2, [pc, #236]	; (800719c <TIM_Base_SetConfig+0x120>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a3a      	ldr	r2, [pc, #232]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2f      	ldr	r2, [pc, #188]	; (8007190 <TIM_Base_SetConfig+0x114>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d027      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <TIM_Base_SetConfig+0x118>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d023      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2b      	ldr	r2, [pc, #172]	; (8007198 <TIM_Base_SetConfig+0x11c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01f      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2a      	ldr	r2, [pc, #168]	; (800719c <TIM_Base_SetConfig+0x120>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a29      	ldr	r2, [pc, #164]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d017      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a28      	ldr	r2, [pc, #160]	; (80071a4 <TIM_Base_SetConfig+0x128>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a27      	ldr	r2, [pc, #156]	; (80071a8 <TIM_Base_SetConfig+0x12c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d00f      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a26      	ldr	r2, [pc, #152]	; (80071ac <TIM_Base_SetConfig+0x130>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <TIM_Base_SetConfig+0x134>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d007      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a24      	ldr	r2, [pc, #144]	; (80071b4 <TIM_Base_SetConfig+0x138>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d003      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <TIM_Base_SetConfig+0x13c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d108      	bne.n	8007140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <TIM_Base_SetConfig+0x114>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_Base_SetConfig+0xf8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d103      	bne.n	800717c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	615a      	str	r2, [r3, #20]
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40010000 	.word	0x40010000
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40010400 	.word	0x40010400
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40014400 	.word	0x40014400
 80071ac:	40014800 	.word	0x40014800
 80071b0:	40001800 	.word	0x40001800
 80071b4:	40001c00 	.word	0x40001c00
 80071b8:	40002000 	.word	0x40002000

080071bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0303 	bic.w	r3, r3, #3
 80071f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 0302 	bic.w	r3, r3, #2
 8007204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a20      	ldr	r2, [pc, #128]	; (8007294 <TIM_OC1_SetConfig+0xd8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC1_SetConfig+0x64>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <TIM_OC1_SetConfig+0xdc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10c      	bne.n	800723a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f023 0308 	bic.w	r3, r3, #8
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <TIM_OC1_SetConfig+0xd8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_OC1_SetConfig+0x8e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a14      	ldr	r2, [pc, #80]	; (8007298 <TIM_OC1_SetConfig+0xdc>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d111      	bne.n	800726e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	621a      	str	r2, [r3, #32]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40010000 	.word	0x40010000
 8007298:	40010400 	.word	0x40010400

0800729c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0210 	bic.w	r2, r3, #16
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0320 	bic.w	r3, r3, #32
 80072e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <TIM_OC2_SetConfig+0xe4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_OC2_SetConfig+0x68>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a21      	ldr	r2, [pc, #132]	; (8007384 <TIM_OC2_SetConfig+0xe8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10d      	bne.n	8007320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800730a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a17      	ldr	r2, [pc, #92]	; (8007380 <TIM_OC2_SetConfig+0xe4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC2_SetConfig+0x94>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <TIM_OC2_SetConfig+0xe8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d113      	bne.n	8007358 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800733e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40010000 	.word	0x40010000
 8007384:	40010400 	.word	0x40010400

08007388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a21      	ldr	r2, [pc, #132]	; (8007468 <TIM_OC3_SetConfig+0xe0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_OC3_SetConfig+0x66>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a20      	ldr	r2, [pc, #128]	; (800746c <TIM_OC3_SetConfig+0xe4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10d      	bne.n	800740a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a16      	ldr	r2, [pc, #88]	; (8007468 <TIM_OC3_SetConfig+0xe0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_OC3_SetConfig+0x92>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a15      	ldr	r2, [pc, #84]	; (800746c <TIM_OC3_SetConfig+0xe4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d113      	bne.n	8007442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	621a      	str	r2, [r3, #32]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	40010000 	.word	0x40010000
 800746c:	40010400 	.word	0x40010400

08007470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	031b      	lsls	r3, r3, #12
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a12      	ldr	r2, [pc, #72]	; (8007514 <TIM_OC4_SetConfig+0xa4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d003      	beq.n	80074d8 <TIM_OC4_SetConfig+0x68>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a11      	ldr	r2, [pc, #68]	; (8007518 <TIM_OC4_SetConfig+0xa8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d109      	bne.n	80074ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	019b      	lsls	r3, r3, #6
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	40010000 	.word	0x40010000
 8007518:	40010400 	.word	0x40010400

0800751c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0201 	bic.w	r2, r3, #1
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 030a 	bic.w	r3, r3, #10
 8007558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f023 0210 	bic.w	r2, r3, #16
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	031b      	lsls	r3, r3, #12
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f043 0307 	orr.w	r3, r3, #7
 80075fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	609a      	str	r2, [r3, #8]
}
 8007604:	bf00      	nop
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	021a      	lsls	r2, r3, #8
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	431a      	orrs	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4313      	orrs	r3, r2
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	2201      	movs	r2, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	43db      	mvns	r3, r3
 8007672:	401a      	ands	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	fa01 f303 	lsl.w	r3, r1, r3
 8007688:	431a      	orrs	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	621a      	str	r2, [r3, #32]
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e05a      	b.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a21      	ldr	r2, [pc, #132]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d022      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007700:	d01d      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1d      	ldr	r2, [pc, #116]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d018      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1b      	ldr	r2, [pc, #108]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1a      	ldr	r2, [pc, #104]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a18      	ldr	r2, [pc, #96]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a17      	ldr	r2, [pc, #92]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a15      	ldr	r2, [pc, #84]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d10c      	bne.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4313      	orrs	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	40000400 	.word	0x40000400
 8007780:	40000800 	.word	0x40000800
 8007784:	40000c00 	.word	0x40000c00
 8007788:	40010400 	.word	0x40010400
 800778c:	40014000 	.word	0x40014000
 8007790:	40001800 	.word	0x40001800

08007794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e03f      	b.n	800784e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fb fb40 	bl	8002e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2224      	movs	r2, #36	; 0x24
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fddb 	bl	80083bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695a      	ldr	r2, [r3, #20]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b08a      	sub	sp, #40	; 0x28
 800785a:	af02      	add	r7, sp, #8
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b20      	cmp	r3, #32
 8007874:	d17c      	bne.n	8007970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_UART_Transmit+0x2c>
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e075      	b.n	8007972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_UART_Transmit+0x3e>
 8007890:	2302      	movs	r3, #2
 8007892:	e06e      	b.n	8007972 <HAL_UART_Transmit+0x11c>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2221      	movs	r2, #33	; 0x21
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078aa:	f7fb fbd7 	bl	800305c <HAL_GetTick>
 80078ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	88fa      	ldrh	r2, [r7, #6]
 80078ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c4:	d108      	bne.n	80078d8 <HAL_UART_Transmit+0x82>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e003      	b.n	80078e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078e8:	e02a      	b.n	8007940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2200      	movs	r2, #0
 80078f2:	2180      	movs	r1, #128	; 0x80
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fb1f 	bl	8007f38 <UART_WaitOnFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e036      	b.n	8007972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	3302      	adds	r3, #2
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	e007      	b.n	8007932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	3301      	adds	r3, #1
 8007930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1cf      	bne.n	80078ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2200      	movs	r2, #0
 8007952:	2140      	movs	r1, #64	; 0x40
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 faef 	bl	8007f38 <UART_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e006      	b.n	8007972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	e000      	b.n	8007972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007970:	2302      	movs	r3, #2
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	4613      	mov	r3, r2
 8007986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b20      	cmp	r3, #32
 8007992:	d11d      	bne.n	80079d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_UART_Receive_IT+0x26>
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e016      	b.n	80079d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Receive_IT+0x38>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e00f      	b.n	80079d2 <HAL_UART_Receive_IT+0x58>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fb24 	bl	8008014 <UART_Start_Receive_IT>
 80079cc:	4603      	mov	r3, r0
 80079ce:	e000      	b.n	80079d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b0ba      	sub	sp, #232	; 0xe8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10f      	bne.n	8007a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <HAL_UART_IRQHandler+0x66>
 8007a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc03 	bl	8008246 <UART_Receive_IT>
      return;
 8007a40:	e256      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80de 	beq.w	8007c08 <HAL_UART_IRQHandler+0x22c>
 8007a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80d1 	beq.w	8007c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <HAL_UART_IRQHandler+0xae>
 8007a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f043 0201 	orr.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_UART_IRQHandler+0xd2>
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f043 0202 	orr.w	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xf6>
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f043 0204 	orr.w	r2, r3, #4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d011      	beq.n	8007b02 <HAL_UART_IRQHandler+0x126>
 8007ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f043 0208 	orr.w	r2, r3, #8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 81ed 	beq.w	8007ee6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <HAL_UART_IRQHandler+0x14e>
 8007b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fb8e 	bl	8008246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <HAL_UART_IRQHandler+0x17a>
 8007b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d04f      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa96 	bl	8008088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d141      	bne.n	8007bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3314      	adds	r3, #20
 8007b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1d9      	bne.n	8007b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d013      	beq.n	8007be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	4a7d      	ldr	r2, [pc, #500]	; (8007db8 <HAL_UART_IRQHandler+0x3dc>)
 8007bc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fc f910 	bl	8003df0 <HAL_DMA_Abort_IT>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d016      	beq.n	8007c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be4:	e00e      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f990 	bl	8007f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	e00a      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f98c 	bl	8007f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e006      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f988 	bl	8007f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c02:	e170      	b.n	8007ee6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	bf00      	nop
    return;
 8007c06:	e16e      	b.n	8007ee6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	f040 814a 	bne.w	8007ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8143 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 813c 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	f040 80b4 	bne.w	8007dbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8140 	beq.w	8007eea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c72:	429a      	cmp	r2, r3
 8007c74:	f080 8139 	bcs.w	8007eea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8a:	f000 8088 	beq.w	8007d9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1d9      	bne.n	8007c8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e1      	bne.n	8007cda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3314      	adds	r3, #20
 8007d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e3      	bne.n	8007d16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d80:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e3      	bne.n	8007d5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fb ffb9 	bl	8003d10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f8b6 	bl	8007f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007db4:	e099      	b.n	8007eea <HAL_UART_IRQHandler+0x50e>
 8007db6:	bf00      	nop
 8007db8:	0800814f 	.word	0x0800814f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 808b 	beq.w	8007eee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8086 	beq.w	8007eee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	330c      	adds	r3, #12
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	330c      	adds	r3, #12
 8007e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e06:	647a      	str	r2, [r7, #68]	; 0x44
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e3      	bne.n	8007de2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3314      	adds	r3, #20
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f023 0301 	bic.w	r3, r3, #1
 8007e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3314      	adds	r3, #20
 8007e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e3      	bne.n	8007e1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0310 	bic.w	r3, r3, #16
 8007e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	330c      	adds	r3, #12
 8007e80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e84:	61fa      	str	r2, [r7, #28]
 8007e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	69b9      	ldr	r1, [r7, #24]
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	617b      	str	r3, [r7, #20]
   return(result);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e3      	bne.n	8007e60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f83e 	bl	8007f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ea4:	e023      	b.n	8007eee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x4ea>
 8007eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f959 	bl	8008176 <UART_Transmit_IT>
    return;
 8007ec4:	e014      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x514>
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f999 	bl	8008216 <UART_EndTransmit_IT>
    return;
 8007ee4:	e004      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ee6:	bf00      	nop
 8007ee8:	e002      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8007eea:	bf00      	nop
 8007eec:	e000      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8007eee:	bf00      	nop
  }
}
 8007ef0:	37e8      	adds	r7, #232	; 0xe8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop

08007ef8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b090      	sub	sp, #64	; 0x40
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	603b      	str	r3, [r7, #0]
 8007f44:	4613      	mov	r3, r2
 8007f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f48:	e050      	b.n	8007fec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d04c      	beq.n	8007fec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f58:	f7fb f880 	bl	800305c <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d241      	bcs.n	8007fec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f88:	637a      	str	r2, [r7, #52]	; 0x34
 8007f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e5      	bne.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	613b      	str	r3, [r7, #16]
   return(result);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f023 0301 	bic.w	r3, r3, #1
 8007fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3314      	adds	r3, #20
 8007fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fbc:	623a      	str	r2, [r7, #32]
 8007fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	69f9      	ldr	r1, [r7, #28]
 8007fc2:	6a3a      	ldr	r2, [r7, #32]
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e00f      	b.n	800800c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	bf0c      	ite	eq
 8007ffc:	2301      	moveq	r3, #1
 8007ffe:	2300      	movne	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	461a      	mov	r2, r3
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	429a      	cmp	r2, r3
 8008008:	d09f      	beq.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3740      	adds	r7, #64	; 0x40
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	88fa      	ldrh	r2, [r7, #6]
 800802c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	88fa      	ldrh	r2, [r7, #6]
 8008032:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2222      	movs	r2, #34	; 0x22
 800803e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008058:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695a      	ldr	r2, [r3, #20]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f042 0220 	orr.w	r2, r2, #32
 8008078:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b095      	sub	sp, #84	; 0x54
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	330c      	adds	r3, #12
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809a:	e853 3f00 	ldrex	r3, [r3]
 800809e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	330c      	adds	r3, #12
 80080ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080b0:	643a      	str	r2, [r7, #64]	; 0x40
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e5      	bne.n	8008090 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3314      	adds	r3, #20
 80080ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f023 0301 	bic.w	r3, r3, #1
 80080da:	64bb      	str	r3, [r7, #72]	; 0x48
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3314      	adds	r3, #20
 80080e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e5      	bne.n	80080c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d119      	bne.n	8008134 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f023 0310 	bic.w	r3, r3, #16
 8008116:	647b      	str	r3, [r7, #68]	; 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008120:	61ba      	str	r2, [r7, #24]
 8008122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6979      	ldr	r1, [r7, #20]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	613b      	str	r3, [r7, #16]
   return(result);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e5      	bne.n	8008100 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008142:	bf00      	nop
 8008144:	3754      	adds	r7, #84	; 0x54
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fecf 	bl	8007f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b21      	cmp	r3, #33	; 0x21
 8008188:	d13e      	bne.n	8008208 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	d114      	bne.n	80081be <UART_Transmit_IT+0x48>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d110      	bne.n	80081be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	1c9a      	adds	r2, r3, #2
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	621a      	str	r2, [r3, #32]
 80081bc:	e008      	b.n	80081d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6211      	str	r1, [r2, #32]
 80081c8:	781a      	ldrb	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29b      	uxth	r3, r3
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	4619      	mov	r1, r3
 80081de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10f      	bne.n	8008204 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008202:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	e000      	b.n	800820a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008208:	2302      	movs	r3, #2
  }
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800822c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff fe5e 	bl	8007ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b08c      	sub	sp, #48	; 0x30
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b22      	cmp	r3, #34	; 0x22
 8008258:	f040 80ab 	bne.w	80083b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008264:	d117      	bne.n	8008296 <UART_Receive_IT+0x50>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d113      	bne.n	8008296 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008284:	b29a      	uxth	r2, r3
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828e:	1c9a      	adds	r2, r3, #2
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	629a      	str	r2, [r3, #40]	; 0x28
 8008294:	e026      	b.n	80082e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800829c:	2300      	movs	r3, #0
 800829e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a8:	d007      	beq.n	80082ba <UART_Receive_IT+0x74>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <UART_Receive_IT+0x82>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	e008      	b.n	80082da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	3b01      	subs	r3, #1
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	4619      	mov	r1, r3
 80082f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d15a      	bne.n	80083ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0220 	bic.w	r2, r2, #32
 8008306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	695a      	ldr	r2, [r3, #20]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0201 	bic.w	r2, r2, #1
 8008326:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	2b01      	cmp	r3, #1
 8008336:	d135      	bne.n	80083a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	330c      	adds	r3, #12
 8008344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	613b      	str	r3, [r7, #16]
   return(result);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f023 0310 	bic.w	r3, r3, #16
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	330c      	adds	r3, #12
 800835c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835e:	623a      	str	r2, [r7, #32]
 8008360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	69f9      	ldr	r1, [r7, #28]
 8008364:	6a3a      	ldr	r2, [r7, #32]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	61bb      	str	r3, [r7, #24]
   return(result);
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e5      	bne.n	800833e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b10      	cmp	r3, #16
 800837e:	d10a      	bne.n	8008396 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fdbf 	bl	8007f20 <HAL_UARTEx_RxEventCallback>
 80083a2:	e002      	b.n	80083aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fa fd17 	bl	8002dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e002      	b.n	80083b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e000      	b.n	80083b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80083b2:	2302      	movs	r3, #2
  }
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3730      	adds	r7, #48	; 0x30
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c0:	b09f      	sub	sp, #124	; 0x7c
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d2:	68d9      	ldr	r1, [r3, #12]
 80083d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	ea40 0301 	orr.w	r3, r0, r1
 80083dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	431a      	orrs	r2, r3
 80083ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80083f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008400:	f021 010c 	bic.w	r1, r1, #12
 8008404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800840a:	430b      	orrs	r3, r1
 800840c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800840e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841a:	6999      	ldr	r1, [r3, #24]
 800841c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	ea40 0301 	orr.w	r3, r0, r1
 8008424:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4bc5      	ldr	r3, [pc, #788]	; (8008740 <UART_SetConfig+0x384>)
 800842c:	429a      	cmp	r2, r3
 800842e:	d004      	beq.n	800843a <UART_SetConfig+0x7e>
 8008430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	4bc3      	ldr	r3, [pc, #780]	; (8008744 <UART_SetConfig+0x388>)
 8008436:	429a      	cmp	r2, r3
 8008438:	d103      	bne.n	8008442 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800843a:	f7fd fb83 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 800843e:	6778      	str	r0, [r7, #116]	; 0x74
 8008440:	e002      	b.n	8008448 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008442:	f7fd fb6b 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8008446:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008450:	f040 80b6 	bne.w	80085c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008456:	461c      	mov	r4, r3
 8008458:	f04f 0500 	mov.w	r5, #0
 800845c:	4622      	mov	r2, r4
 800845e:	462b      	mov	r3, r5
 8008460:	1891      	adds	r1, r2, r2
 8008462:	6439      	str	r1, [r7, #64]	; 0x40
 8008464:	415b      	adcs	r3, r3
 8008466:	647b      	str	r3, [r7, #68]	; 0x44
 8008468:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800846c:	1912      	adds	r2, r2, r4
 800846e:	eb45 0303 	adc.w	r3, r5, r3
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f04f 0100 	mov.w	r1, #0
 800847a:	00d9      	lsls	r1, r3, #3
 800847c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008480:	00d0      	lsls	r0, r2, #3
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	1911      	adds	r1, r2, r4
 8008488:	6639      	str	r1, [r7, #96]	; 0x60
 800848a:	416b      	adcs	r3, r5
 800848c:	667b      	str	r3, [r7, #100]	; 0x64
 800848e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	461a      	mov	r2, r3
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	1891      	adds	r1, r2, r2
 800849a:	63b9      	str	r1, [r7, #56]	; 0x38
 800849c:	415b      	adcs	r3, r3
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80084a8:	f7f8 fb20 	bl	8000aec <__aeabi_uldivmod>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4ba5      	ldr	r3, [pc, #660]	; (8008748 <UART_SetConfig+0x38c>)
 80084b2:	fba3 2302 	umull	r2, r3, r3, r2
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	011e      	lsls	r6, r3, #4
 80084ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084bc:	461c      	mov	r4, r3
 80084be:	f04f 0500 	mov.w	r5, #0
 80084c2:	4622      	mov	r2, r4
 80084c4:	462b      	mov	r3, r5
 80084c6:	1891      	adds	r1, r2, r2
 80084c8:	6339      	str	r1, [r7, #48]	; 0x30
 80084ca:	415b      	adcs	r3, r3
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
 80084ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80084d2:	1912      	adds	r2, r2, r4
 80084d4:	eb45 0303 	adc.w	r3, r5, r3
 80084d8:	f04f 0000 	mov.w	r0, #0
 80084dc:	f04f 0100 	mov.w	r1, #0
 80084e0:	00d9      	lsls	r1, r3, #3
 80084e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084e6:	00d0      	lsls	r0, r2, #3
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	1911      	adds	r1, r2, r4
 80084ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80084f0:	416b      	adcs	r3, r5
 80084f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	461a      	mov	r2, r3
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	1891      	adds	r1, r2, r2
 8008500:	62b9      	str	r1, [r7, #40]	; 0x28
 8008502:	415b      	adcs	r3, r3
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800850a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800850e:	f7f8 faed 	bl	8000aec <__aeabi_uldivmod>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4b8c      	ldr	r3, [pc, #560]	; (8008748 <UART_SetConfig+0x38c>)
 8008518:	fba3 1302 	umull	r1, r3, r3, r2
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	2164      	movs	r1, #100	; 0x64
 8008520:	fb01 f303 	mul.w	r3, r1, r3
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	3332      	adds	r3, #50	; 0x32
 800852a:	4a87      	ldr	r2, [pc, #540]	; (8008748 <UART_SetConfig+0x38c>)
 800852c:	fba2 2303 	umull	r2, r3, r2, r3
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008538:	441e      	add	r6, r3
 800853a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800853c:	4618      	mov	r0, r3
 800853e:	f04f 0100 	mov.w	r1, #0
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	1894      	adds	r4, r2, r2
 8008548:	623c      	str	r4, [r7, #32]
 800854a:	415b      	adcs	r3, r3
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
 800854e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008552:	1812      	adds	r2, r2, r0
 8008554:	eb41 0303 	adc.w	r3, r1, r3
 8008558:	f04f 0400 	mov.w	r4, #0
 800855c:	f04f 0500 	mov.w	r5, #0
 8008560:	00dd      	lsls	r5, r3, #3
 8008562:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008566:	00d4      	lsls	r4, r2, #3
 8008568:	4622      	mov	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	1814      	adds	r4, r2, r0
 800856e:	653c      	str	r4, [r7, #80]	; 0x50
 8008570:	414b      	adcs	r3, r1
 8008572:	657b      	str	r3, [r7, #84]	; 0x54
 8008574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	461a      	mov	r2, r3
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	1891      	adds	r1, r2, r2
 8008580:	61b9      	str	r1, [r7, #24]
 8008582:	415b      	adcs	r3, r3
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800858a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800858e:	f7f8 faad 	bl	8000aec <__aeabi_uldivmod>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4b6c      	ldr	r3, [pc, #432]	; (8008748 <UART_SetConfig+0x38c>)
 8008598:	fba3 1302 	umull	r1, r3, r3, r2
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	2164      	movs	r1, #100	; 0x64
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	3332      	adds	r3, #50	; 0x32
 80085aa:	4a67      	ldr	r2, [pc, #412]	; (8008748 <UART_SetConfig+0x38c>)
 80085ac:	fba2 2303 	umull	r2, r3, r2, r3
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	f003 0207 	and.w	r2, r3, #7
 80085b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4432      	add	r2, r6
 80085bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085be:	e0b9      	b.n	8008734 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c2:	461c      	mov	r4, r3
 80085c4:	f04f 0500 	mov.w	r5, #0
 80085c8:	4622      	mov	r2, r4
 80085ca:	462b      	mov	r3, r5
 80085cc:	1891      	adds	r1, r2, r2
 80085ce:	6139      	str	r1, [r7, #16]
 80085d0:	415b      	adcs	r3, r3
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085d8:	1912      	adds	r2, r2, r4
 80085da:	eb45 0303 	adc.w	r3, r5, r3
 80085de:	f04f 0000 	mov.w	r0, #0
 80085e2:	f04f 0100 	mov.w	r1, #0
 80085e6:	00d9      	lsls	r1, r3, #3
 80085e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085ec:	00d0      	lsls	r0, r2, #3
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	eb12 0804 	adds.w	r8, r2, r4
 80085f6:	eb43 0905 	adc.w	r9, r3, r5
 80085fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	f04f 0100 	mov.w	r1, #0
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	008b      	lsls	r3, r1, #2
 800860e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008612:	0082      	lsls	r2, r0, #2
 8008614:	4640      	mov	r0, r8
 8008616:	4649      	mov	r1, r9
 8008618:	f7f8 fa68 	bl	8000aec <__aeabi_uldivmod>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4b49      	ldr	r3, [pc, #292]	; (8008748 <UART_SetConfig+0x38c>)
 8008622:	fba3 2302 	umull	r2, r3, r3, r2
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	011e      	lsls	r6, r3, #4
 800862a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800862c:	4618      	mov	r0, r3
 800862e:	f04f 0100 	mov.w	r1, #0
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	1894      	adds	r4, r2, r2
 8008638:	60bc      	str	r4, [r7, #8]
 800863a:	415b      	adcs	r3, r3
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008642:	1812      	adds	r2, r2, r0
 8008644:	eb41 0303 	adc.w	r3, r1, r3
 8008648:	f04f 0400 	mov.w	r4, #0
 800864c:	f04f 0500 	mov.w	r5, #0
 8008650:	00dd      	lsls	r5, r3, #3
 8008652:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008656:	00d4      	lsls	r4, r2, #3
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	1814      	adds	r4, r2, r0
 800865e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008660:	414b      	adcs	r3, r1
 8008662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4618      	mov	r0, r3
 800866a:	f04f 0100 	mov.w	r1, #0
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	008b      	lsls	r3, r1, #2
 8008678:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800867c:	0082      	lsls	r2, r0, #2
 800867e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008682:	f7f8 fa33 	bl	8000aec <__aeabi_uldivmod>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <UART_SetConfig+0x38c>)
 800868c:	fba3 1302 	umull	r1, r3, r3, r2
 8008690:	095b      	lsrs	r3, r3, #5
 8008692:	2164      	movs	r1, #100	; 0x64
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	3332      	adds	r3, #50	; 0x32
 800869e:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <UART_SetConfig+0x38c>)
 80086a0:	fba2 2303 	umull	r2, r3, r2, r3
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086aa:	441e      	add	r6, r3
 80086ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ae:	4618      	mov	r0, r3
 80086b0:	f04f 0100 	mov.w	r1, #0
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	1894      	adds	r4, r2, r2
 80086ba:	603c      	str	r4, [r7, #0]
 80086bc:	415b      	adcs	r3, r3
 80086be:	607b      	str	r3, [r7, #4]
 80086c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c4:	1812      	adds	r2, r2, r0
 80086c6:	eb41 0303 	adc.w	r3, r1, r3
 80086ca:	f04f 0400 	mov.w	r4, #0
 80086ce:	f04f 0500 	mov.w	r5, #0
 80086d2:	00dd      	lsls	r5, r3, #3
 80086d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086d8:	00d4      	lsls	r4, r2, #3
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	eb12 0a00 	adds.w	sl, r2, r0
 80086e2:	eb43 0b01 	adc.w	fp, r3, r1
 80086e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f04f 0100 	mov.w	r1, #0
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	f04f 0300 	mov.w	r3, #0
 80086f8:	008b      	lsls	r3, r1, #2
 80086fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086fe:	0082      	lsls	r2, r0, #2
 8008700:	4650      	mov	r0, sl
 8008702:	4659      	mov	r1, fp
 8008704:	f7f8 f9f2 	bl	8000aec <__aeabi_uldivmod>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <UART_SetConfig+0x38c>)
 800870e:	fba3 1302 	umull	r1, r3, r3, r2
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	2164      	movs	r1, #100	; 0x64
 8008716:	fb01 f303 	mul.w	r3, r1, r3
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	3332      	adds	r3, #50	; 0x32
 8008720:	4a09      	ldr	r2, [pc, #36]	; (8008748 <UART_SetConfig+0x38c>)
 8008722:	fba2 2303 	umull	r2, r3, r2, r3
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	f003 020f 	and.w	r2, r3, #15
 800872c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4432      	add	r2, r6
 8008732:	609a      	str	r2, [r3, #8]
}
 8008734:	bf00      	nop
 8008736:	377c      	adds	r7, #124	; 0x7c
 8008738:	46bd      	mov	sp, r7
 800873a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873e:	bf00      	nop
 8008740:	40011000 	.word	0x40011000
 8008744:	40011400 	.word	0x40011400
 8008748:	51eb851f 	.word	0x51eb851f

0800874c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008764:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4b20      	ldr	r3, [pc, #128]	; (80087ec <FSMC_NORSRAM_Init+0xa0>)
 800876a:	4013      	ands	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008776:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800877c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008782:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008788:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800878e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008794:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800879a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80087a0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80087a6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80087ac:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80087b2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80087b8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d103      	bne.n	80087d0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ce:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	fff00080 	.word	0xfff00080

080087f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008812:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800881e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008826:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800882e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	3b01      	subs	r3, #1
 8008836:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008838:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	3b02      	subs	r3, #2
 8008840:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008842:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008848:	4313      	orrs	r3, r2
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4313      	orrs	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6979      	ldr	r1, [r7, #20]
 8008858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	371c      	adds	r7, #28
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
	...

0800886c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008884:	d122      	bne.n	80088cc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4b15      	ldr	r3, [pc, #84]	; (80088e8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008894:	4013      	ands	r3, r2
 8008896:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80088a2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80088aa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80088b2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80088b8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6979      	ldr	r1, [r7, #20]
 80088c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088ca:	e005      	b.n	80088d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80088d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	cff00000 	.word	0xcff00000

080088ec <__errno>:
 80088ec:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <__errno+0x8>)
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	2000001c 	.word	0x2000001c

080088f8 <__libc_init_array>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4d0d      	ldr	r5, [pc, #52]	; (8008930 <__libc_init_array+0x38>)
 80088fc:	4c0d      	ldr	r4, [pc, #52]	; (8008934 <__libc_init_array+0x3c>)
 80088fe:	1b64      	subs	r4, r4, r5
 8008900:	10a4      	asrs	r4, r4, #2
 8008902:	2600      	movs	r6, #0
 8008904:	42a6      	cmp	r6, r4
 8008906:	d109      	bne.n	800891c <__libc_init_array+0x24>
 8008908:	4d0b      	ldr	r5, [pc, #44]	; (8008938 <__libc_init_array+0x40>)
 800890a:	4c0c      	ldr	r4, [pc, #48]	; (800893c <__libc_init_array+0x44>)
 800890c:	f000 fc4e 	bl	80091ac <_init>
 8008910:	1b64      	subs	r4, r4, r5
 8008912:	10a4      	asrs	r4, r4, #2
 8008914:	2600      	movs	r6, #0
 8008916:	42a6      	cmp	r6, r4
 8008918:	d105      	bne.n	8008926 <__libc_init_array+0x2e>
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008920:	4798      	blx	r3
 8008922:	3601      	adds	r6, #1
 8008924:	e7ee      	b.n	8008904 <__libc_init_array+0xc>
 8008926:	f855 3b04 	ldr.w	r3, [r5], #4
 800892a:	4798      	blx	r3
 800892c:	3601      	adds	r6, #1
 800892e:	e7f2      	b.n	8008916 <__libc_init_array+0x1e>
 8008930:	08009270 	.word	0x08009270
 8008934:	08009270 	.word	0x08009270
 8008938:	08009270 	.word	0x08009270
 800893c:	08009274 	.word	0x08009274

08008940 <memset>:
 8008940:	4402      	add	r2, r0
 8008942:	4603      	mov	r3, r0
 8008944:	4293      	cmp	r3, r2
 8008946:	d100      	bne.n	800894a <memset+0xa>
 8008948:	4770      	bx	lr
 800894a:	f803 1b01 	strb.w	r1, [r3], #1
 800894e:	e7f9      	b.n	8008944 <memset+0x4>

08008950 <siprintf>:
 8008950:	b40e      	push	{r1, r2, r3}
 8008952:	b500      	push	{lr}
 8008954:	b09c      	sub	sp, #112	; 0x70
 8008956:	ab1d      	add	r3, sp, #116	; 0x74
 8008958:	9002      	str	r0, [sp, #8]
 800895a:	9006      	str	r0, [sp, #24]
 800895c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008960:	4809      	ldr	r0, [pc, #36]	; (8008988 <siprintf+0x38>)
 8008962:	9107      	str	r1, [sp, #28]
 8008964:	9104      	str	r1, [sp, #16]
 8008966:	4909      	ldr	r1, [pc, #36]	; (800898c <siprintf+0x3c>)
 8008968:	f853 2b04 	ldr.w	r2, [r3], #4
 800896c:	9105      	str	r1, [sp, #20]
 800896e:	6800      	ldr	r0, [r0, #0]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	a902      	add	r1, sp, #8
 8008974:	f000 f868 	bl	8008a48 <_svfiprintf_r>
 8008978:	9b02      	ldr	r3, [sp, #8]
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	b01c      	add	sp, #112	; 0x70
 8008980:	f85d eb04 	ldr.w	lr, [sp], #4
 8008984:	b003      	add	sp, #12
 8008986:	4770      	bx	lr
 8008988:	2000001c 	.word	0x2000001c
 800898c:	ffff0208 	.word	0xffff0208

08008990 <__ssputs_r>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	688e      	ldr	r6, [r1, #8]
 8008996:	429e      	cmp	r6, r3
 8008998:	4682      	mov	sl, r0
 800899a:	460c      	mov	r4, r1
 800899c:	4690      	mov	r8, r2
 800899e:	461f      	mov	r7, r3
 80089a0:	d838      	bhi.n	8008a14 <__ssputs_r+0x84>
 80089a2:	898a      	ldrh	r2, [r1, #12]
 80089a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a8:	d032      	beq.n	8008a10 <__ssputs_r+0x80>
 80089aa:	6825      	ldr	r5, [r4, #0]
 80089ac:	6909      	ldr	r1, [r1, #16]
 80089ae:	eba5 0901 	sub.w	r9, r5, r1
 80089b2:	6965      	ldr	r5, [r4, #20]
 80089b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089bc:	3301      	adds	r3, #1
 80089be:	444b      	add	r3, r9
 80089c0:	106d      	asrs	r5, r5, #1
 80089c2:	429d      	cmp	r5, r3
 80089c4:	bf38      	it	cc
 80089c6:	461d      	movcc	r5, r3
 80089c8:	0553      	lsls	r3, r2, #21
 80089ca:	d531      	bpl.n	8008a30 <__ssputs_r+0xa0>
 80089cc:	4629      	mov	r1, r5
 80089ce:	f000 fb47 	bl	8009060 <_malloc_r>
 80089d2:	4606      	mov	r6, r0
 80089d4:	b950      	cbnz	r0, 80089ec <__ssputs_r+0x5c>
 80089d6:	230c      	movs	r3, #12
 80089d8:	f8ca 3000 	str.w	r3, [sl]
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ec:	6921      	ldr	r1, [r4, #16]
 80089ee:	464a      	mov	r2, r9
 80089f0:	f000 fabe 	bl	8008f70 <memcpy>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	6126      	str	r6, [r4, #16]
 8008a02:	6165      	str	r5, [r4, #20]
 8008a04:	444e      	add	r6, r9
 8008a06:	eba5 0509 	sub.w	r5, r5, r9
 8008a0a:	6026      	str	r6, [r4, #0]
 8008a0c:	60a5      	str	r5, [r4, #8]
 8008a0e:	463e      	mov	r6, r7
 8008a10:	42be      	cmp	r6, r7
 8008a12:	d900      	bls.n	8008a16 <__ssputs_r+0x86>
 8008a14:	463e      	mov	r6, r7
 8008a16:	4632      	mov	r2, r6
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	4641      	mov	r1, r8
 8008a1c:	f000 fab6 	bl	8008f8c <memmove>
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	1b9b      	subs	r3, r3, r6
 8008a26:	4432      	add	r2, r6
 8008a28:	60a3      	str	r3, [r4, #8]
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e7db      	b.n	80089e8 <__ssputs_r+0x58>
 8008a30:	462a      	mov	r2, r5
 8008a32:	f000 fb6f 	bl	8009114 <_realloc_r>
 8008a36:	4606      	mov	r6, r0
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1e1      	bne.n	8008a00 <__ssputs_r+0x70>
 8008a3c:	6921      	ldr	r1, [r4, #16]
 8008a3e:	4650      	mov	r0, sl
 8008a40:	f000 fabe 	bl	8008fc0 <_free_r>
 8008a44:	e7c7      	b.n	80089d6 <__ssputs_r+0x46>
	...

08008a48 <_svfiprintf_r>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	4698      	mov	r8, r3
 8008a4e:	898b      	ldrh	r3, [r1, #12]
 8008a50:	061b      	lsls	r3, r3, #24
 8008a52:	b09d      	sub	sp, #116	; 0x74
 8008a54:	4607      	mov	r7, r0
 8008a56:	460d      	mov	r5, r1
 8008a58:	4614      	mov	r4, r2
 8008a5a:	d50e      	bpl.n	8008a7a <_svfiprintf_r+0x32>
 8008a5c:	690b      	ldr	r3, [r1, #16]
 8008a5e:	b963      	cbnz	r3, 8008a7a <_svfiprintf_r+0x32>
 8008a60:	2140      	movs	r1, #64	; 0x40
 8008a62:	f000 fafd 	bl	8009060 <_malloc_r>
 8008a66:	6028      	str	r0, [r5, #0]
 8008a68:	6128      	str	r0, [r5, #16]
 8008a6a:	b920      	cbnz	r0, 8008a76 <_svfiprintf_r+0x2e>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	e0d1      	b.n	8008c1a <_svfiprintf_r+0x1d2>
 8008a76:	2340      	movs	r3, #64	; 0x40
 8008a78:	616b      	str	r3, [r5, #20]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7e:	2320      	movs	r3, #32
 8008a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a88:	2330      	movs	r3, #48	; 0x30
 8008a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c34 <_svfiprintf_r+0x1ec>
 8008a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a92:	f04f 0901 	mov.w	r9, #1
 8008a96:	4623      	mov	r3, r4
 8008a98:	469a      	mov	sl, r3
 8008a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9e:	b10a      	cbz	r2, 8008aa4 <_svfiprintf_r+0x5c>
 8008aa0:	2a25      	cmp	r2, #37	; 0x25
 8008aa2:	d1f9      	bne.n	8008a98 <_svfiprintf_r+0x50>
 8008aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa8:	d00b      	beq.n	8008ac2 <_svfiprintf_r+0x7a>
 8008aaa:	465b      	mov	r3, fp
 8008aac:	4622      	mov	r2, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff ff6d 	bl	8008990 <__ssputs_r>
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f000 80aa 	beq.w	8008c10 <_svfiprintf_r+0x1c8>
 8008abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008abe:	445a      	add	r2, fp
 8008ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 80a2 	beq.w	8008c10 <_svfiprintf_r+0x1c8>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad6:	f10a 0a01 	add.w	sl, sl, #1
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	9307      	str	r3, [sp, #28]
 8008ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ae4:	4654      	mov	r4, sl
 8008ae6:	2205      	movs	r2, #5
 8008ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aec:	4851      	ldr	r0, [pc, #324]	; (8008c34 <_svfiprintf_r+0x1ec>)
 8008aee:	f7f7 fb6f 	bl	80001d0 <memchr>
 8008af2:	9a04      	ldr	r2, [sp, #16]
 8008af4:	b9d8      	cbnz	r0, 8008b2e <_svfiprintf_r+0xe6>
 8008af6:	06d0      	lsls	r0, r2, #27
 8008af8:	bf44      	itt	mi
 8008afa:	2320      	movmi	r3, #32
 8008afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b00:	0711      	lsls	r1, r2, #28
 8008b02:	bf44      	itt	mi
 8008b04:	232b      	movmi	r3, #43	; 0x2b
 8008b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b10:	d015      	beq.n	8008b3e <_svfiprintf_r+0xf6>
 8008b12:	9a07      	ldr	r2, [sp, #28]
 8008b14:	4654      	mov	r4, sl
 8008b16:	2000      	movs	r0, #0
 8008b18:	f04f 0c0a 	mov.w	ip, #10
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b22:	3b30      	subs	r3, #48	; 0x30
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d94e      	bls.n	8008bc6 <_svfiprintf_r+0x17e>
 8008b28:	b1b0      	cbz	r0, 8008b58 <_svfiprintf_r+0x110>
 8008b2a:	9207      	str	r2, [sp, #28]
 8008b2c:	e014      	b.n	8008b58 <_svfiprintf_r+0x110>
 8008b2e:	eba0 0308 	sub.w	r3, r0, r8
 8008b32:	fa09 f303 	lsl.w	r3, r9, r3
 8008b36:	4313      	orrs	r3, r2
 8008b38:	9304      	str	r3, [sp, #16]
 8008b3a:	46a2      	mov	sl, r4
 8008b3c:	e7d2      	b.n	8008ae4 <_svfiprintf_r+0x9c>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d19      	adds	r1, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9103      	str	r1, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfbb      	ittet	lt
 8008b4a:	425b      	neglt	r3, r3
 8008b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b50:	9307      	strge	r3, [sp, #28]
 8008b52:	9307      	strlt	r3, [sp, #28]
 8008b54:	bfb8      	it	lt
 8008b56:	9204      	strlt	r2, [sp, #16]
 8008b58:	7823      	ldrb	r3, [r4, #0]
 8008b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5c:	d10c      	bne.n	8008b78 <_svfiprintf_r+0x130>
 8008b5e:	7863      	ldrb	r3, [r4, #1]
 8008b60:	2b2a      	cmp	r3, #42	; 0x2a
 8008b62:	d135      	bne.n	8008bd0 <_svfiprintf_r+0x188>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	9203      	str	r2, [sp, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfb8      	it	lt
 8008b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b74:	3402      	adds	r4, #2
 8008b76:	9305      	str	r3, [sp, #20]
 8008b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c44 <_svfiprintf_r+0x1fc>
 8008b7c:	7821      	ldrb	r1, [r4, #0]
 8008b7e:	2203      	movs	r2, #3
 8008b80:	4650      	mov	r0, sl
 8008b82:	f7f7 fb25 	bl	80001d0 <memchr>
 8008b86:	b140      	cbz	r0, 8008b9a <_svfiprintf_r+0x152>
 8008b88:	2340      	movs	r3, #64	; 0x40
 8008b8a:	eba0 000a 	sub.w	r0, r0, sl
 8008b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	4303      	orrs	r3, r0
 8008b96:	3401      	adds	r4, #1
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9e:	4826      	ldr	r0, [pc, #152]	; (8008c38 <_svfiprintf_r+0x1f0>)
 8008ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ba4:	2206      	movs	r2, #6
 8008ba6:	f7f7 fb13 	bl	80001d0 <memchr>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d038      	beq.n	8008c20 <_svfiprintf_r+0x1d8>
 8008bae:	4b23      	ldr	r3, [pc, #140]	; (8008c3c <_svfiprintf_r+0x1f4>)
 8008bb0:	bb1b      	cbnz	r3, 8008bfa <_svfiprintf_r+0x1b2>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	3307      	adds	r3, #7
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	3308      	adds	r3, #8
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc0:	4433      	add	r3, r6
 8008bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc4:	e767      	b.n	8008a96 <_svfiprintf_r+0x4e>
 8008bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bca:	460c      	mov	r4, r1
 8008bcc:	2001      	movs	r0, #1
 8008bce:	e7a5      	b.n	8008b1c <_svfiprintf_r+0xd4>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	3401      	adds	r4, #1
 8008bd4:	9305      	str	r3, [sp, #20]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	f04f 0c0a 	mov.w	ip, #10
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be2:	3a30      	subs	r2, #48	; 0x30
 8008be4:	2a09      	cmp	r2, #9
 8008be6:	d903      	bls.n	8008bf0 <_svfiprintf_r+0x1a8>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0c5      	beq.n	8008b78 <_svfiprintf_r+0x130>
 8008bec:	9105      	str	r1, [sp, #20]
 8008bee:	e7c3      	b.n	8008b78 <_svfiprintf_r+0x130>
 8008bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e7f0      	b.n	8008bdc <_svfiprintf_r+0x194>
 8008bfa:	ab03      	add	r3, sp, #12
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <_svfiprintf_r+0x1f8>)
 8008c02:	a904      	add	r1, sp, #16
 8008c04:	4638      	mov	r0, r7
 8008c06:	f3af 8000 	nop.w
 8008c0a:	1c42      	adds	r2, r0, #1
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	d1d6      	bne.n	8008bbe <_svfiprintf_r+0x176>
 8008c10:	89ab      	ldrh	r3, [r5, #12]
 8008c12:	065b      	lsls	r3, r3, #25
 8008c14:	f53f af2c 	bmi.w	8008a70 <_svfiprintf_r+0x28>
 8008c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c1a:	b01d      	add	sp, #116	; 0x74
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	ab03      	add	r3, sp, #12
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	462a      	mov	r2, r5
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <_svfiprintf_r+0x1f8>)
 8008c28:	a904      	add	r1, sp, #16
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f000 f87a 	bl	8008d24 <_printf_i>
 8008c30:	e7eb      	b.n	8008c0a <_svfiprintf_r+0x1c2>
 8008c32:	bf00      	nop
 8008c34:	08009234 	.word	0x08009234
 8008c38:	0800923e 	.word	0x0800923e
 8008c3c:	00000000 	.word	0x00000000
 8008c40:	08008991 	.word	0x08008991
 8008c44:	0800923a 	.word	0x0800923a

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	4699      	mov	r9, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	690b      	ldr	r3, [r1, #16]
 8008c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bfb8      	it	lt
 8008c5c:	4613      	movlt	r3, r2
 8008c5e:	6033      	str	r3, [r6, #0]
 8008c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c64:	4607      	mov	r7, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	b10a      	cbz	r2, 8008c6e <_printf_common+0x26>
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	6833      	ldrmi	r3, [r6, #0]
 8008c76:	3302      	addmi	r3, #2
 8008c78:	6033      	strmi	r3, [r6, #0]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d106      	bne.n	8008c90 <_printf_common+0x48>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	6832      	ldr	r2, [r6, #0]
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dc26      	bgt.n	8008cde <_printf_common+0x96>
 8008c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c94:	1e13      	subs	r3, r2, #0
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	0692      	lsls	r2, r2, #26
 8008c9e:	d42b      	bmi.n	8008cf8 <_printf_common+0xb0>
 8008ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d01e      	beq.n	8008cec <_printf_common+0xa4>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	68e5      	ldr	r5, [r4, #12]
 8008cb2:	6832      	ldr	r2, [r6, #0]
 8008cb4:	f003 0306 	and.w	r3, r3, #6
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	bf08      	it	eq
 8008cbc:	1aad      	subeq	r5, r5, r2
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	6922      	ldr	r2, [r4, #16]
 8008cc2:	bf0c      	ite	eq
 8008cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cc8:	2500      	movne	r5, #0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	bfc4      	itt	gt
 8008cce:	1a9b      	subgt	r3, r3, r2
 8008cd0:	18ed      	addgt	r5, r5, r3
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	341a      	adds	r4, #26
 8008cd6:	42b5      	cmp	r5, r6
 8008cd8:	d11a      	bne.n	8008d10 <_printf_common+0xc8>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e008      	b.n	8008cf0 <_printf_common+0xa8>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	47c0      	blx	r8
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d103      	bne.n	8008cf4 <_printf_common+0xac>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	e7c6      	b.n	8008c86 <_printf_common+0x3e>
 8008cf8:	18e1      	adds	r1, r4, r3
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	2030      	movs	r0, #48	; 0x30
 8008cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d02:	4422      	add	r2, r4
 8008d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	e7c7      	b.n	8008ca0 <_printf_common+0x58>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4622      	mov	r2, r4
 8008d14:	4649      	mov	r1, r9
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d0e6      	beq.n	8008cec <_printf_common+0xa4>
 8008d1e:	3601      	adds	r6, #1
 8008d20:	e7d9      	b.n	8008cd6 <_printf_common+0x8e>
	...

08008d24 <_printf_i>:
 8008d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	460c      	mov	r4, r1
 8008d2a:	4691      	mov	r9, r2
 8008d2c:	7e27      	ldrb	r7, [r4, #24]
 8008d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d30:	2f78      	cmp	r7, #120	; 0x78
 8008d32:	4680      	mov	r8, r0
 8008d34:	469a      	mov	sl, r3
 8008d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d3a:	d807      	bhi.n	8008d4c <_printf_i+0x28>
 8008d3c:	2f62      	cmp	r7, #98	; 0x62
 8008d3e:	d80a      	bhi.n	8008d56 <_printf_i+0x32>
 8008d40:	2f00      	cmp	r7, #0
 8008d42:	f000 80d8 	beq.w	8008ef6 <_printf_i+0x1d2>
 8008d46:	2f58      	cmp	r7, #88	; 0x58
 8008d48:	f000 80a3 	beq.w	8008e92 <_printf_i+0x16e>
 8008d4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d54:	e03a      	b.n	8008dcc <_printf_i+0xa8>
 8008d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d5a:	2b15      	cmp	r3, #21
 8008d5c:	d8f6      	bhi.n	8008d4c <_printf_i+0x28>
 8008d5e:	a001      	add	r0, pc, #4	; (adr r0, 8008d64 <_printf_i+0x40>)
 8008d60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d64:	08008dbd 	.word	0x08008dbd
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008d4d 	.word	0x08008d4d
 8008d70:	08008d4d 	.word	0x08008d4d
 8008d74:	08008d4d 	.word	0x08008d4d
 8008d78:	08008d4d 	.word	0x08008d4d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d4d 	.word	0x08008d4d
 8008d84:	08008d4d 	.word	0x08008d4d
 8008d88:	08008d4d 	.word	0x08008d4d
 8008d8c:	08008d4d 	.word	0x08008d4d
 8008d90:	08008edd 	.word	0x08008edd
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008ebf 	.word	0x08008ebf
 8008d9c:	08008d4d 	.word	0x08008d4d
 8008da0:	08008d4d 	.word	0x08008d4d
 8008da4:	08008eff 	.word	0x08008eff
 8008da8:	08008d4d 	.word	0x08008d4d
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008d4d 	.word	0x08008d4d
 8008db4:	08008d4d 	.word	0x08008d4d
 8008db8:	08008ec7 	.word	0x08008ec7
 8008dbc:	680b      	ldr	r3, [r1, #0]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	600a      	str	r2, [r1, #0]
 8008dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0a3      	b.n	8008f18 <_printf_i+0x1f4>
 8008dd0:	6825      	ldr	r5, [r4, #0]
 8008dd2:	6808      	ldr	r0, [r1, #0]
 8008dd4:	062e      	lsls	r6, r5, #24
 8008dd6:	f100 0304 	add.w	r3, r0, #4
 8008dda:	d50a      	bpl.n	8008df2 <_printf_i+0xce>
 8008ddc:	6805      	ldr	r5, [r0, #0]
 8008dde:	600b      	str	r3, [r1, #0]
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	da03      	bge.n	8008dec <_printf_i+0xc8>
 8008de4:	232d      	movs	r3, #45	; 0x2d
 8008de6:	426d      	negs	r5, r5
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	485e      	ldr	r0, [pc, #376]	; (8008f68 <_printf_i+0x244>)
 8008dee:	230a      	movs	r3, #10
 8008df0:	e019      	b.n	8008e26 <_printf_i+0x102>
 8008df2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008df6:	6805      	ldr	r5, [r0, #0]
 8008df8:	600b      	str	r3, [r1, #0]
 8008dfa:	bf18      	it	ne
 8008dfc:	b22d      	sxthne	r5, r5
 8008dfe:	e7ef      	b.n	8008de0 <_printf_i+0xbc>
 8008e00:	680b      	ldr	r3, [r1, #0]
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	1d18      	adds	r0, r3, #4
 8008e06:	6008      	str	r0, [r1, #0]
 8008e08:	0628      	lsls	r0, r5, #24
 8008e0a:	d501      	bpl.n	8008e10 <_printf_i+0xec>
 8008e0c:	681d      	ldr	r5, [r3, #0]
 8008e0e:	e002      	b.n	8008e16 <_printf_i+0xf2>
 8008e10:	0669      	lsls	r1, r5, #25
 8008e12:	d5fb      	bpl.n	8008e0c <_printf_i+0xe8>
 8008e14:	881d      	ldrh	r5, [r3, #0]
 8008e16:	4854      	ldr	r0, [pc, #336]	; (8008f68 <_printf_i+0x244>)
 8008e18:	2f6f      	cmp	r7, #111	; 0x6f
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2308      	moveq	r3, #8
 8008e1e:	230a      	movne	r3, #10
 8008e20:	2100      	movs	r1, #0
 8008e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e26:	6866      	ldr	r6, [r4, #4]
 8008e28:	60a6      	str	r6, [r4, #8]
 8008e2a:	2e00      	cmp	r6, #0
 8008e2c:	bfa2      	ittt	ge
 8008e2e:	6821      	ldrge	r1, [r4, #0]
 8008e30:	f021 0104 	bicge.w	r1, r1, #4
 8008e34:	6021      	strge	r1, [r4, #0]
 8008e36:	b90d      	cbnz	r5, 8008e3c <_printf_i+0x118>
 8008e38:	2e00      	cmp	r6, #0
 8008e3a:	d04d      	beq.n	8008ed8 <_printf_i+0x1b4>
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e42:	fb03 5711 	mls	r7, r3, r1, r5
 8008e46:	5dc7      	ldrb	r7, [r0, r7]
 8008e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e4c:	462f      	mov	r7, r5
 8008e4e:	42bb      	cmp	r3, r7
 8008e50:	460d      	mov	r5, r1
 8008e52:	d9f4      	bls.n	8008e3e <_printf_i+0x11a>
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d10b      	bne.n	8008e70 <_printf_i+0x14c>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	07df      	lsls	r7, r3, #31
 8008e5c:	d508      	bpl.n	8008e70 <_printf_i+0x14c>
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	6861      	ldr	r1, [r4, #4]
 8008e62:	4299      	cmp	r1, r3
 8008e64:	bfde      	ittt	le
 8008e66:	2330      	movle	r3, #48	; 0x30
 8008e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e70:	1b92      	subs	r2, r2, r6
 8008e72:	6122      	str	r2, [r4, #16]
 8008e74:	f8cd a000 	str.w	sl, [sp]
 8008e78:	464b      	mov	r3, r9
 8008e7a:	aa03      	add	r2, sp, #12
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f7ff fee2 	bl	8008c48 <_printf_common>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d14c      	bne.n	8008f22 <_printf_i+0x1fe>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	b004      	add	sp, #16
 8008e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e92:	4835      	ldr	r0, [pc, #212]	; (8008f68 <_printf_i+0x244>)
 8008e94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	680e      	ldr	r6, [r1, #0]
 8008e9c:	061f      	lsls	r7, r3, #24
 8008e9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ea2:	600e      	str	r6, [r1, #0]
 8008ea4:	d514      	bpl.n	8008ed0 <_printf_i+0x1ac>
 8008ea6:	07d9      	lsls	r1, r3, #31
 8008ea8:	bf44      	itt	mi
 8008eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8008eae:	6023      	strmi	r3, [r4, #0]
 8008eb0:	b91d      	cbnz	r5, 8008eba <_printf_i+0x196>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f023 0320 	bic.w	r3, r3, #32
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	2310      	movs	r3, #16
 8008ebc:	e7b0      	b.n	8008e20 <_printf_i+0xfc>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	f043 0320 	orr.w	r3, r3, #32
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	2378      	movs	r3, #120	; 0x78
 8008ec8:	4828      	ldr	r0, [pc, #160]	; (8008f6c <_printf_i+0x248>)
 8008eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ece:	e7e3      	b.n	8008e98 <_printf_i+0x174>
 8008ed0:	065e      	lsls	r6, r3, #25
 8008ed2:	bf48      	it	mi
 8008ed4:	b2ad      	uxthmi	r5, r5
 8008ed6:	e7e6      	b.n	8008ea6 <_printf_i+0x182>
 8008ed8:	4616      	mov	r6, r2
 8008eda:	e7bb      	b.n	8008e54 <_printf_i+0x130>
 8008edc:	680b      	ldr	r3, [r1, #0]
 8008ede:	6826      	ldr	r6, [r4, #0]
 8008ee0:	6960      	ldr	r0, [r4, #20]
 8008ee2:	1d1d      	adds	r5, r3, #4
 8008ee4:	600d      	str	r5, [r1, #0]
 8008ee6:	0635      	lsls	r5, r6, #24
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	d501      	bpl.n	8008ef0 <_printf_i+0x1cc>
 8008eec:	6018      	str	r0, [r3, #0]
 8008eee:	e002      	b.n	8008ef6 <_printf_i+0x1d2>
 8008ef0:	0671      	lsls	r1, r6, #25
 8008ef2:	d5fb      	bpl.n	8008eec <_printf_i+0x1c8>
 8008ef4:	8018      	strh	r0, [r3, #0]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	4616      	mov	r6, r2
 8008efc:	e7ba      	b.n	8008e74 <_printf_i+0x150>
 8008efe:	680b      	ldr	r3, [r1, #0]
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	600a      	str	r2, [r1, #0]
 8008f04:	681e      	ldr	r6, [r3, #0]
 8008f06:	6862      	ldr	r2, [r4, #4]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7f7 f960 	bl	80001d0 <memchr>
 8008f10:	b108      	cbz	r0, 8008f16 <_printf_i+0x1f2>
 8008f12:	1b80      	subs	r0, r0, r6
 8008f14:	6060      	str	r0, [r4, #4]
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f20:	e7a8      	b.n	8008e74 <_printf_i+0x150>
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	4632      	mov	r2, r6
 8008f26:	4649      	mov	r1, r9
 8008f28:	4640      	mov	r0, r8
 8008f2a:	47d0      	blx	sl
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d0ab      	beq.n	8008e88 <_printf_i+0x164>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	079b      	lsls	r3, r3, #30
 8008f34:	d413      	bmi.n	8008f5e <_printf_i+0x23a>
 8008f36:	68e0      	ldr	r0, [r4, #12]
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	4298      	cmp	r0, r3
 8008f3c:	bfb8      	it	lt
 8008f3e:	4618      	movlt	r0, r3
 8008f40:	e7a4      	b.n	8008e8c <_printf_i+0x168>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4632      	mov	r2, r6
 8008f46:	4649      	mov	r1, r9
 8008f48:	4640      	mov	r0, r8
 8008f4a:	47d0      	blx	sl
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d09b      	beq.n	8008e88 <_printf_i+0x164>
 8008f50:	3501      	adds	r5, #1
 8008f52:	68e3      	ldr	r3, [r4, #12]
 8008f54:	9903      	ldr	r1, [sp, #12]
 8008f56:	1a5b      	subs	r3, r3, r1
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	dcf2      	bgt.n	8008f42 <_printf_i+0x21e>
 8008f5c:	e7eb      	b.n	8008f36 <_printf_i+0x212>
 8008f5e:	2500      	movs	r5, #0
 8008f60:	f104 0619 	add.w	r6, r4, #25
 8008f64:	e7f5      	b.n	8008f52 <_printf_i+0x22e>
 8008f66:	bf00      	nop
 8008f68:	08009245 	.word	0x08009245
 8008f6c:	08009256 	.word	0x08009256

08008f70 <memcpy>:
 8008f70:	440a      	add	r2, r1
 8008f72:	4291      	cmp	r1, r2
 8008f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f78:	d100      	bne.n	8008f7c <memcpy+0xc>
 8008f7a:	4770      	bx	lr
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f86:	4291      	cmp	r1, r2
 8008f88:	d1f9      	bne.n	8008f7e <memcpy+0xe>
 8008f8a:	bd10      	pop	{r4, pc}

08008f8c <memmove>:
 8008f8c:	4288      	cmp	r0, r1
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	eb01 0402 	add.w	r4, r1, r2
 8008f94:	d902      	bls.n	8008f9c <memmove+0x10>
 8008f96:	4284      	cmp	r4, r0
 8008f98:	4623      	mov	r3, r4
 8008f9a:	d807      	bhi.n	8008fac <memmove+0x20>
 8008f9c:	1e43      	subs	r3, r0, #1
 8008f9e:	42a1      	cmp	r1, r4
 8008fa0:	d008      	beq.n	8008fb4 <memmove+0x28>
 8008fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008faa:	e7f8      	b.n	8008f9e <memmove+0x12>
 8008fac:	4402      	add	r2, r0
 8008fae:	4601      	mov	r1, r0
 8008fb0:	428a      	cmp	r2, r1
 8008fb2:	d100      	bne.n	8008fb6 <memmove+0x2a>
 8008fb4:	bd10      	pop	{r4, pc}
 8008fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fbe:	e7f7      	b.n	8008fb0 <memmove+0x24>

08008fc0 <_free_r>:
 8008fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d048      	beq.n	8009058 <_free_r+0x98>
 8008fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fca:	9001      	str	r0, [sp, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f1a1 0404 	sub.w	r4, r1, #4
 8008fd2:	bfb8      	it	lt
 8008fd4:	18e4      	addlt	r4, r4, r3
 8008fd6:	f000 f8d3 	bl	8009180 <__malloc_lock>
 8008fda:	4a20      	ldr	r2, [pc, #128]	; (800905c <_free_r+0x9c>)
 8008fdc:	9801      	ldr	r0, [sp, #4]
 8008fde:	6813      	ldr	r3, [r2, #0]
 8008fe0:	4615      	mov	r5, r2
 8008fe2:	b933      	cbnz	r3, 8008ff2 <_free_r+0x32>
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	6014      	str	r4, [r2, #0]
 8008fe8:	b003      	add	sp, #12
 8008fea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fee:	f000 b8cd 	b.w	800918c <__malloc_unlock>
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	d90b      	bls.n	800900e <_free_r+0x4e>
 8008ff6:	6821      	ldr	r1, [r4, #0]
 8008ff8:	1862      	adds	r2, r4, r1
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	bf04      	itt	eq
 8008ffe:	681a      	ldreq	r2, [r3, #0]
 8009000:	685b      	ldreq	r3, [r3, #4]
 8009002:	6063      	str	r3, [r4, #4]
 8009004:	bf04      	itt	eq
 8009006:	1852      	addeq	r2, r2, r1
 8009008:	6022      	streq	r2, [r4, #0]
 800900a:	602c      	str	r4, [r5, #0]
 800900c:	e7ec      	b.n	8008fe8 <_free_r+0x28>
 800900e:	461a      	mov	r2, r3
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	b10b      	cbz	r3, 8009018 <_free_r+0x58>
 8009014:	42a3      	cmp	r3, r4
 8009016:	d9fa      	bls.n	800900e <_free_r+0x4e>
 8009018:	6811      	ldr	r1, [r2, #0]
 800901a:	1855      	adds	r5, r2, r1
 800901c:	42a5      	cmp	r5, r4
 800901e:	d10b      	bne.n	8009038 <_free_r+0x78>
 8009020:	6824      	ldr	r4, [r4, #0]
 8009022:	4421      	add	r1, r4
 8009024:	1854      	adds	r4, r2, r1
 8009026:	42a3      	cmp	r3, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	d1dd      	bne.n	8008fe8 <_free_r+0x28>
 800902c:	681c      	ldr	r4, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	6053      	str	r3, [r2, #4]
 8009032:	4421      	add	r1, r4
 8009034:	6011      	str	r1, [r2, #0]
 8009036:	e7d7      	b.n	8008fe8 <_free_r+0x28>
 8009038:	d902      	bls.n	8009040 <_free_r+0x80>
 800903a:	230c      	movs	r3, #12
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	e7d3      	b.n	8008fe8 <_free_r+0x28>
 8009040:	6825      	ldr	r5, [r4, #0]
 8009042:	1961      	adds	r1, r4, r5
 8009044:	428b      	cmp	r3, r1
 8009046:	bf04      	itt	eq
 8009048:	6819      	ldreq	r1, [r3, #0]
 800904a:	685b      	ldreq	r3, [r3, #4]
 800904c:	6063      	str	r3, [r4, #4]
 800904e:	bf04      	itt	eq
 8009050:	1949      	addeq	r1, r1, r5
 8009052:	6021      	streq	r1, [r4, #0]
 8009054:	6054      	str	r4, [r2, #4]
 8009056:	e7c7      	b.n	8008fe8 <_free_r+0x28>
 8009058:	b003      	add	sp, #12
 800905a:	bd30      	pop	{r4, r5, pc}
 800905c:	200000e8 	.word	0x200000e8

08009060 <_malloc_r>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	1ccd      	adds	r5, r1, #3
 8009064:	f025 0503 	bic.w	r5, r5, #3
 8009068:	3508      	adds	r5, #8
 800906a:	2d0c      	cmp	r5, #12
 800906c:	bf38      	it	cc
 800906e:	250c      	movcc	r5, #12
 8009070:	2d00      	cmp	r5, #0
 8009072:	4606      	mov	r6, r0
 8009074:	db01      	blt.n	800907a <_malloc_r+0x1a>
 8009076:	42a9      	cmp	r1, r5
 8009078:	d903      	bls.n	8009082 <_malloc_r+0x22>
 800907a:	230c      	movs	r3, #12
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	2000      	movs	r0, #0
 8009080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009082:	f000 f87d 	bl	8009180 <__malloc_lock>
 8009086:	4921      	ldr	r1, [pc, #132]	; (800910c <_malloc_r+0xac>)
 8009088:	680a      	ldr	r2, [r1, #0]
 800908a:	4614      	mov	r4, r2
 800908c:	b99c      	cbnz	r4, 80090b6 <_malloc_r+0x56>
 800908e:	4f20      	ldr	r7, [pc, #128]	; (8009110 <_malloc_r+0xb0>)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	b923      	cbnz	r3, 800909e <_malloc_r+0x3e>
 8009094:	4621      	mov	r1, r4
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f862 	bl	8009160 <_sbrk_r>
 800909c:	6038      	str	r0, [r7, #0]
 800909e:	4629      	mov	r1, r5
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 f85d 	bl	8009160 <_sbrk_r>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d123      	bne.n	80090f2 <_malloc_r+0x92>
 80090aa:	230c      	movs	r3, #12
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 f86c 	bl	800918c <__malloc_unlock>
 80090b4:	e7e3      	b.n	800907e <_malloc_r+0x1e>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	1b5b      	subs	r3, r3, r5
 80090ba:	d417      	bmi.n	80090ec <_malloc_r+0x8c>
 80090bc:	2b0b      	cmp	r3, #11
 80090be:	d903      	bls.n	80090c8 <_malloc_r+0x68>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	441c      	add	r4, r3
 80090c4:	6025      	str	r5, [r4, #0]
 80090c6:	e004      	b.n	80090d2 <_malloc_r+0x72>
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	42a2      	cmp	r2, r4
 80090cc:	bf0c      	ite	eq
 80090ce:	600b      	streq	r3, [r1, #0]
 80090d0:	6053      	strne	r3, [r2, #4]
 80090d2:	4630      	mov	r0, r6
 80090d4:	f000 f85a 	bl	800918c <__malloc_unlock>
 80090d8:	f104 000b 	add.w	r0, r4, #11
 80090dc:	1d23      	adds	r3, r4, #4
 80090de:	f020 0007 	bic.w	r0, r0, #7
 80090e2:	1ac2      	subs	r2, r0, r3
 80090e4:	d0cc      	beq.n	8009080 <_malloc_r+0x20>
 80090e6:	1a1b      	subs	r3, r3, r0
 80090e8:	50a3      	str	r3, [r4, r2]
 80090ea:	e7c9      	b.n	8009080 <_malloc_r+0x20>
 80090ec:	4622      	mov	r2, r4
 80090ee:	6864      	ldr	r4, [r4, #4]
 80090f0:	e7cc      	b.n	800908c <_malloc_r+0x2c>
 80090f2:	1cc4      	adds	r4, r0, #3
 80090f4:	f024 0403 	bic.w	r4, r4, #3
 80090f8:	42a0      	cmp	r0, r4
 80090fa:	d0e3      	beq.n	80090c4 <_malloc_r+0x64>
 80090fc:	1a21      	subs	r1, r4, r0
 80090fe:	4630      	mov	r0, r6
 8009100:	f000 f82e 	bl	8009160 <_sbrk_r>
 8009104:	3001      	adds	r0, #1
 8009106:	d1dd      	bne.n	80090c4 <_malloc_r+0x64>
 8009108:	e7cf      	b.n	80090aa <_malloc_r+0x4a>
 800910a:	bf00      	nop
 800910c:	200000e8 	.word	0x200000e8
 8009110:	200000ec 	.word	0x200000ec

08009114 <_realloc_r>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	4607      	mov	r7, r0
 8009118:	4614      	mov	r4, r2
 800911a:	460e      	mov	r6, r1
 800911c:	b921      	cbnz	r1, 8009128 <_realloc_r+0x14>
 800911e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009122:	4611      	mov	r1, r2
 8009124:	f7ff bf9c 	b.w	8009060 <_malloc_r>
 8009128:	b922      	cbnz	r2, 8009134 <_realloc_r+0x20>
 800912a:	f7ff ff49 	bl	8008fc0 <_free_r>
 800912e:	4625      	mov	r5, r4
 8009130:	4628      	mov	r0, r5
 8009132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009134:	f000 f830 	bl	8009198 <_malloc_usable_size_r>
 8009138:	42a0      	cmp	r0, r4
 800913a:	d20f      	bcs.n	800915c <_realloc_r+0x48>
 800913c:	4621      	mov	r1, r4
 800913e:	4638      	mov	r0, r7
 8009140:	f7ff ff8e 	bl	8009060 <_malloc_r>
 8009144:	4605      	mov	r5, r0
 8009146:	2800      	cmp	r0, #0
 8009148:	d0f2      	beq.n	8009130 <_realloc_r+0x1c>
 800914a:	4631      	mov	r1, r6
 800914c:	4622      	mov	r2, r4
 800914e:	f7ff ff0f 	bl	8008f70 <memcpy>
 8009152:	4631      	mov	r1, r6
 8009154:	4638      	mov	r0, r7
 8009156:	f7ff ff33 	bl	8008fc0 <_free_r>
 800915a:	e7e9      	b.n	8009130 <_realloc_r+0x1c>
 800915c:	4635      	mov	r5, r6
 800915e:	e7e7      	b.n	8009130 <_realloc_r+0x1c>

08009160 <_sbrk_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4d06      	ldr	r5, [pc, #24]	; (800917c <_sbrk_r+0x1c>)
 8009164:	2300      	movs	r3, #0
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	602b      	str	r3, [r5, #0]
 800916c:	f7f9 fbb4 	bl	80028d8 <_sbrk>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_sbrk_r+0x1a>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_sbrk_r+0x1a>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	20000478 	.word	0x20000478

08009180 <__malloc_lock>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__malloc_lock+0x8>)
 8009182:	f000 b811 	b.w	80091a8 <__retarget_lock_acquire_recursive>
 8009186:	bf00      	nop
 8009188:	20000480 	.word	0x20000480

0800918c <__malloc_unlock>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__malloc_unlock+0x8>)
 800918e:	f000 b80c 	b.w	80091aa <__retarget_lock_release_recursive>
 8009192:	bf00      	nop
 8009194:	20000480 	.word	0x20000480

08009198 <_malloc_usable_size_r>:
 8009198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800919c:	1f18      	subs	r0, r3, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bfbc      	itt	lt
 80091a2:	580b      	ldrlt	r3, [r1, r0]
 80091a4:	18c0      	addlt	r0, r0, r3
 80091a6:	4770      	bx	lr

080091a8 <__retarget_lock_acquire_recursive>:
 80091a8:	4770      	bx	lr

080091aa <__retarget_lock_release_recursive>:
 80091aa:	4770      	bx	lr

080091ac <_init>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr

080091b8 <_fini>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr
