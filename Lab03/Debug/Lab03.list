
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fa8  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          000001a0  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013581  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c81  00000000  00000000  000335e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00036268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d60  00000000  00000000  00037130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022972  00000000  00000000  00037e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012572  00000000  00000000  0005a802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd28d  00000000  00000000  0006cd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013a001  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bcc  00000000  00000000  0013a054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004818 	.word	0x08004818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08004818 	.word	0x08004818

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fafb 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 faee 	bl	8002ad4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fae9 	bl	8002ad4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f002 ffe0 	bl	80034ce <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000050 	.word	0x20000050
 80005b8:	20000108 	.word	0x20000108
 80005bc:	2000005c 	.word	0x2000005c

080005c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	; 0x38
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]
 80005ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <MX_FSMC_Init+0xec>)
 80005ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <MX_FSMC_Init+0xec>)
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <MX_FSMC_Init+0xf0>)
 80005f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_FSMC_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_FSMC_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_FSMC_Init+0xec>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_FSMC_Init+0xec>)
 800060e:	2210      	movs	r2, #16
 8000610:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_FSMC_Init+0xec>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <MX_FSMC_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_FSMC_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_FSMC_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_FSMC_Init+0xec>)
 800062c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_FSMC_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_FSMC_Init+0xec>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_FSMC_Init+0xec>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_FSMC_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_FSMC_Init+0xec>)
 800064e:	2200      	movs	r2, #0
 8000650:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000652:	230f      	movs	r3, #15
 8000654:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000656:	230f      	movs	r3, #15
 8000658:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800065a:	233c      	movs	r3, #60	; 0x3c
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000662:	2310      	movs	r3, #16
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000666:	2311      	movs	r3, #17
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800066a:	2300      	movs	r3, #0
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800066e:	2308      	movs	r3, #8
 8000670:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000676:	2309      	movs	r3, #9
 8000678:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800067e:	2310      	movs	r3, #16
 8000680:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000682:	2311      	movs	r3, #17
 8000684:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800068a:	463a      	mov	r2, r7
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_FSMC_Init+0xec>)
 8000694:	f003 fafe 	bl	8003c94 <HAL_SRAM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800069e:	f000 ff73 	bl	8001588 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a2:	bf00      	nop
 80006a4:	3738      	adds	r7, #56	; 0x38
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	a0000104 	.word	0xa0000104

080006b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d131      	bne.n	8000734 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000704:	230c      	movs	r3, #12
 8000706:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <HAL_FSMC_MspInit+0x90>)
 800070e:	f002 f845 	bl	800279c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000712:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000716:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000724:	230c      	movs	r3, #12
 8000726:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <HAL_FSMC_MspInit+0x94>)
 800072e:	f002 f835 	bl	800279c <HAL_GPIO_Init>
 8000732:	e000      	b.n	8000736 <HAL_FSMC_MspInit+0x82>
    return;
 8000734:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000054 	.word	0x20000054
 8000740:	40023800 	.word	0x40023800
 8000744:	40021000 	.word	0x40021000
 8000748:	40020c00 	.word	0x40020c00

0800074c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000754:	f7ff ffae 	bl	80006b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b6f      	ldr	r3, [pc, #444]	; (8000938 <MX_GPIO_Init+0x1d8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a6e      	ldr	r2, [pc, #440]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b68      	ldr	r3, [pc, #416]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a67      	ldr	r2, [pc, #412]	; (8000938 <MX_GPIO_Init+0x1d8>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b65      	ldr	r3, [pc, #404]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b61      	ldr	r3, [pc, #388]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a60      	ldr	r2, [pc, #384]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b5e      	ldr	r3, [pc, #376]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b5a      	ldr	r3, [pc, #360]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a59      	ldr	r2, [pc, #356]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b57      	ldr	r3, [pc, #348]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b53      	ldr	r3, [pc, #332]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a52      	ldr	r2, [pc, #328]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b50      	ldr	r3, [pc, #320]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <MX_GPIO_Init+0x1d8>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b49      	ldr	r3, [pc, #292]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b45      	ldr	r3, [pc, #276]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a44      	ldr	r2, [pc, #272]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b42      	ldr	r3, [pc, #264]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	483f      	ldr	r0, [pc, #252]	; (800093c <MX_GPIO_Init+0x1dc>)
 8000840:	f002 f948 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	483d      	ldr	r0, [pc, #244]	; (8000940 <MX_GPIO_Init+0x1e0>)
 800084c:	f002 f942 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	483b      	ldr	r0, [pc, #236]	; (8000944 <MX_GPIO_Init+0x1e4>)
 8000856:	f002 f93d 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	4839      	ldr	r0, [pc, #228]	; (8000948 <MX_GPIO_Init+0x1e8>)
 8000862:	f002 f937 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	4838      	ldr	r0, [pc, #224]	; (800094c <MX_GPIO_Init+0x1ec>)
 800086c:	f002 f932 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000870:	2370      	movs	r3, #112	; 0x70
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	482d      	ldr	r0, [pc, #180]	; (800093c <MX_GPIO_Init+0x1dc>)
 8000888:	f001 ff88 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4826      	ldr	r0, [pc, #152]	; (8000940 <MX_GPIO_Init+0x1e0>)
 80008a6:	f001 ff79 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80008aa:	23c0      	movs	r3, #192	; 0xc0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4822      	ldr	r0, [pc, #136]	; (8000948 <MX_GPIO_Init+0x1e8>)
 80008be:	f001 ff6d 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008c2:	2330      	movs	r3, #48	; 0x30
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	481a      	ldr	r0, [pc, #104]	; (8000940 <MX_GPIO_Init+0x1e0>)
 80008d6:	f001 ff61 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4814      	ldr	r0, [pc, #80]	; (8000944 <MX_GPIO_Init+0x1e4>)
 80008f2:	f001 ff53 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_GPIO_Init+0x1e8>)
 8000910:	f001 ff44 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000914:	2308      	movs	r3, #8
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <MX_GPIO_Init+0x1ec>)
 800092c:	f001 ff36 	bl	800279c <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020800 	.word	0x40020800
 8000944:	40021800 	.word	0x40021800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020c00 	.word	0x40020c00

08000950 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <LCD_WR_REG+0x1c>)
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	8013      	strh	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	600ffffe 	.word	0x600ffffe

08000970 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <LCD_WR_DATA+0x1c>)
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	8053      	strh	r3, [r2, #2]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	600ffffe 	.word	0x600ffffe

08000990 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <LCD_RD_DATA+0x20>)
 8000998:	885b      	ldrh	r3, [r3, #2]
 800099a:	b29b      	uxth	r3, r3
 800099c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	b29b      	uxth	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	600ffffe 	.word	0x600ffffe

080009b4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4604      	mov	r4, r0
 80009bc:	4608      	mov	r0, r1
 80009be:	4611      	mov	r1, r2
 80009c0:	461a      	mov	r2, r3
 80009c2:	4623      	mov	r3, r4
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	4603      	mov	r3, r0
 80009c8:	80bb      	strh	r3, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	807b      	strh	r3, [r7, #2]
 80009ce:	4613      	mov	r3, r2
 80009d0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80009d2:	202a      	movs	r0, #42	; 0x2a
 80009d4:	f7ff ffbc 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	0a1b      	lsrs	r3, r3, #8
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffc6 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ffc0 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009f0:	887b      	ldrh	r3, [r7, #2]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffba 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ffb4 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000a08:	202b      	movs	r0, #43	; 0x2b
 8000a0a:	f7ff ffa1 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ffab 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffa5 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000a26:	883b      	ldrh	r3, [r7, #0]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff9f 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a32:	883b      	ldrh	r3, [r7, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff99 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a3e:	202c      	movs	r0, #44	; 0x2c
 8000a40:	f7ff ff86 	bl	8000950 <LCD_WR_REG>
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd90      	pop	{r4, r7, pc}

08000a4c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <lcd_Clear+0x60>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <lcd_Clear+0x60>)
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ffa3 	bl	80009b4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	81fb      	strh	r3, [r7, #14]
 8000a72:	e011      	b.n	8000a98 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	81bb      	strh	r3, [r7, #12]
 8000a78:	e006      	b.n	8000a88 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff77 	bl	8000970 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a82:	89bb      	ldrh	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	81bb      	strh	r3, [r7, #12]
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <lcd_Clear+0x60>)
 8000a8a:	885b      	ldrh	r3, [r3, #2]
 8000a8c:	89ba      	ldrh	r2, [r7, #12]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3f3      	bcc.n	8000a7a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	3301      	adds	r3, #1
 8000a96:	81fb      	strh	r3, [r7, #14]
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <lcd_Clear+0x60>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	89fa      	ldrh	r2, [r7, #14]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3e8      	bcc.n	8000a74 <lcd_Clear+0x28>
		}
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000cc 	.word	0x200000cc

08000ab0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	883b      	ldrh	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	88f8      	ldrh	r0, [r7, #6]
 8000ade:	f7ff ff69 	bl	80009b4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	81fb      	strh	r3, [r7, #14]
 8000ae6:	e010      	b.n	8000b0a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	81bb      	strh	r3, [r7, #12]
 8000aec:	e006      	b.n	8000afc <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000aee:	8c3b      	ldrh	r3, [r7, #32]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff3d 	bl	8000970 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	81bb      	strh	r3, [r7, #12]
 8000afc:	89ba      	ldrh	r2, [r7, #12]
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d3f4      	bcc.n	8000aee <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	3301      	adds	r3, #1
 8000b08:	81fb      	strh	r3, [r7, #14]
 8000b0a:	89fa      	ldrh	r2, [r7, #14]
 8000b0c:	883b      	ldrh	r3, [r7, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d3ea      	bcc.n	8000ae8 <lcd_Fill+0x38>
		}
	}
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}

08000b1c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	88b9      	ldrh	r1, [r7, #4]
 8000b34:	88f8      	ldrh	r0, [r7, #6]
 8000b36:	f7ff ff3d 	bl	80009b4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff17 	bl	8000970 <LCD_WR_DATA>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	4608      	mov	r0, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	80fb      	strh	r3, [r7, #6]
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80bb      	strh	r3, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	70fb      	strb	r3, [r7, #3]
 8000b66:	4613      	mov	r3, r2
 8000b68:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000b72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf14      	ite	ne
 8000b8e:	2301      	movne	r3, #1
 8000b90:	2300      	moveq	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	fb12 f303 	smulbb	r3, r2, r3
 8000ba2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	3b20      	subs	r3, #32
 8000ba8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29c      	uxth	r4, r3
 8000bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	88b9      	ldrh	r1, [r7, #4]
 8000bca:	88f8      	ldrh	r0, [r7, #6]
 8000bcc:	4622      	mov	r2, r4
 8000bce:	f7ff fef1 	bl	80009b4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	827b      	strh	r3, [r7, #18]
 8000bd6:	e07a      	b.n	8000cce <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000bd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bdc:	2b0c      	cmp	r3, #12
 8000bde:	d028      	beq.n	8000c32 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000be4:	2b10      	cmp	r3, #16
 8000be6:	d108      	bne.n	8000bfa <lcd_ShowChar+0xae>
 8000be8:	78fa      	ldrb	r2, [r7, #3]
 8000bea:	8a7b      	ldrh	r3, [r7, #18]
 8000bec:	493c      	ldr	r1, [pc, #240]	; (8000ce0 <lcd_ShowChar+0x194>)
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	440a      	add	r2, r1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	75fb      	strb	r3, [r7, #23]
 8000bf8:	e01b      	b.n	8000c32 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bfe:	2b18      	cmp	r3, #24
 8000c00:	d10b      	bne.n	8000c1a <lcd_ShowChar+0xce>
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	8a79      	ldrh	r1, [r7, #18]
 8000c06:	4837      	ldr	r0, [pc, #220]	; (8000ce4 <lcd_ShowChar+0x198>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	4403      	add	r3, r0
 8000c12:	440b      	add	r3, r1
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	75fb      	strb	r3, [r7, #23]
 8000c18:	e00b      	b.n	8000c32 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c1e:	2b20      	cmp	r3, #32
 8000c20:	d15a      	bne.n	8000cd8 <lcd_ShowChar+0x18c>
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	8a7b      	ldrh	r3, [r7, #18]
 8000c26:	4930      	ldr	r1, [pc, #192]	; (8000ce8 <lcd_ShowChar+0x19c>)
 8000c28:	0192      	lsls	r2, r2, #6
 8000c2a:	440a      	add	r2, r1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	75bb      	strb	r3, [r7, #22]
 8000c36:	e044      	b.n	8000cc2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000c38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d120      	bne.n	8000c82 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000c40:	7dfa      	ldrb	r2, [r7, #23]
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	fa42 f303 	asr.w	r3, r2, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <lcd_ShowChar+0x10e>
 8000c50:	883b      	ldrh	r3, [r7, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe8c 	bl	8000970 <LCD_WR_DATA>
 8000c58:	e003      	b.n	8000c62 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000c5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe87 	bl	8000970 <LCD_WR_DATA>
				m++;
 8000c62:	7d7b      	ldrb	r3, [r7, #21]
 8000c64:	3301      	adds	r3, #1
 8000c66:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000c68:	7d7b      	ldrb	r3, [r7, #21]
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c70:	fb02 f201 	mul.w	r2, r2, r1
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11f      	bne.n	8000cbc <lcd_ShowChar+0x170>
				{
					m=0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	757b      	strb	r3, [r7, #21]
					break;
 8000c80:	e022      	b.n	8000cc8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000c82:	7dfa      	ldrb	r2, [r7, #23]
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	fa42 f303 	asr.w	r3, r2, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <lcd_ShowChar+0x152>
 8000c92:	883a      	ldrh	r2, [r7, #0]
 8000c94:	88b9      	ldrh	r1, [r7, #4]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff3f 	bl	8000b1c <lcd_DrawPoint>
				x++;
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ca4:	88fa      	ldrh	r2, [r7, #6]
 8000ca6:	8a3b      	ldrh	r3, [r7, #16]
 8000ca8:	1ad2      	subs	r2, r2, r3
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d105      	bne.n	8000cbc <lcd_ShowChar+0x170>
				{
					x=x0;
 8000cb0:	8a3b      	ldrh	r3, [r7, #16]
 8000cb2:	80fb      	strh	r3, [r7, #6]
					y++;
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	80bb      	strh	r3, [r7, #4]
					break;
 8000cba:	e005      	b.n	8000cc8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000cbc:	7dbb      	ldrb	r3, [r7, #22]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	75bb      	strb	r3, [r7, #22]
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	d9b7      	bls.n	8000c38 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000cc8:	8a7b      	ldrh	r3, [r7, #18]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	827b      	strh	r3, [r7, #18]
 8000cce:	8a7a      	ldrh	r2, [r7, #18]
 8000cd0:	89bb      	ldrh	r3, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d380      	bcc.n	8000bd8 <lcd_ShowChar+0x8c>
 8000cd6:	e000      	b.n	8000cda <lcd_ShowChar+0x18e>
		else return;
 8000cd8:	bf00      	nop
				}
			}
		}
	}
}
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	08004848 	.word	0x08004848
 8000ce4:	08004e38 	.word	0x08004e38
 8000ce8:	08006008 	.word	0x08006008

08000cec <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000d00:	e004      	b.n	8000d0c <mypow+0x20>
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	71ba      	strb	r2, [r7, #6]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f5      	bne.n	8000d02 <mypow+0x16>
	return result;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	4623      	mov	r3, r4
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	4603      	mov	r3, r0
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d4a:	085b      	lsrs	r3, r3, #1
 8000d4c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e059      	b.n	8000e08 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000d54:	887c      	ldrh	r4, [r7, #2]
 8000d56:	787a      	ldrb	r2, [r7, #1]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4619      	mov	r1, r3
 8000d64:	200a      	movs	r0, #10
 8000d66:	f7ff ffc1 	bl	8000cec <mypow>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	fbb4 f1f3 	udiv	r1, r4, r3
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <lcd_ShowIntNum+0xf8>)
 8000d72:	fba3 2301 	umull	r2, r3, r3, r1
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1aca      	subs	r2, r1, r3
 8000d82:	4613      	mov	r3, r2
 8000d84:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d121      	bne.n	8000dd0 <lcd_ShowIntNum+0xac>
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	787b      	ldrb	r3, [r7, #1]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	da1c      	bge.n	8000dd0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000d96:	7b3b      	ldrb	r3, [r7, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d117      	bne.n	8000dcc <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	fb12 f303 	smulbb	r3, r2, r3
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4413      	add	r3, r2
 8000dae:	b298      	uxth	r0, r3
 8000db0:	8c3a      	ldrh	r2, [r7, #32]
 8000db2:	88b9      	ldrh	r1, [r7, #4]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	f7ff fec1 	bl	8000b4c <lcd_ShowChar>
				continue;
 8000dca:	e01a      	b.n	8000e02 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	7b7b      	ldrb	r3, [r7, #13]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	fb12 f303 	smulbb	r3, r2, r3
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4413      	add	r3, r2
 8000de2:	b298      	uxth	r0, r3
 8000de4:	7b3b      	ldrb	r3, [r7, #12]
 8000de6:	3330      	adds	r3, #48	; 0x30
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	8c3c      	ldrh	r4, [r7, #32]
 8000dec:	88b9      	ldrh	r1, [r7, #4]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9302      	str	r3, [sp, #8]
 8000df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	f7ff fea5 	bl	8000b4c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	787b      	ldrb	r3, [r7, #1]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d3a1      	bcc.n	8000d54 <lcd_ShowIntNum+0x30>
	}
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	cccccccd 	.word	0xcccccccd

08000e20 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <lcd_SetDir+0x44>)
 8000e3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e40:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <lcd_SetDir+0x44>)
 8000e44:	22f0      	movs	r2, #240	; 0xf0
 8000e46:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000e48:	e006      	b.n	8000e58 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <lcd_SetDir+0x44>)
 8000e4c:	22f0      	movs	r2, #240	; 0xf0
 8000e4e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <lcd_SetDir+0x44>)
 8000e52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e56:	805a      	strh	r2, [r3, #2]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	200000cc 	.word	0x200000cc

08000e68 <lcd_init>:


void lcd_init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e72:	48aa      	ldr	r0, [pc, #680]	; (800111c <lcd_init+0x2b4>)
 8000e74:	f001 fe2e 	bl	8002ad4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7c:	f001 fb58 	bl	8002530 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	48a5      	ldr	r0, [pc, #660]	; (800111c <lcd_init+0x2b4>)
 8000e88:	f001 fe24 	bl	8002ad4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e90:	f001 fb4e 	bl	8002530 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff ffc3 	bl	8000e20 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000e9a:	20d3      	movs	r0, #211	; 0xd3
 8000e9c:	f7ff fd58 	bl	8000950 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000ea0:	f7ff fd76 	bl	8000990 <LCD_RD_DATA>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b9d      	ldr	r3, [pc, #628]	; (8001120 <lcd_init+0x2b8>)
 8000eaa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000eac:	f7ff fd70 	bl	8000990 <LCD_RD_DATA>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b9a      	ldr	r3, [pc, #616]	; (8001120 <lcd_init+0x2b8>)
 8000eb6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000eb8:	f7ff fd6a 	bl	8000990 <LCD_RD_DATA>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b97      	ldr	r3, [pc, #604]	; (8001120 <lcd_init+0x2b8>)
 8000ec2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000ec4:	4b96      	ldr	r3, [pc, #600]	; (8001120 <lcd_init+0x2b8>)
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b94      	ldr	r3, [pc, #592]	; (8001120 <lcd_init+0x2b8>)
 8000ece:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000ed0:	f7ff fd5e 	bl	8000990 <LCD_RD_DATA>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b91      	ldr	r3, [pc, #580]	; (8001120 <lcd_init+0x2b8>)
 8000eda:	889b      	ldrh	r3, [r3, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b8f      	ldr	r3, [pc, #572]	; (8001120 <lcd_init+0x2b8>)
 8000ee2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000ee4:	20cf      	movs	r0, #207	; 0xcf
 8000ee6:	f7ff fd33 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fd40 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000ef0:	20c1      	movs	r0, #193	; 0xc1
 8000ef2:	f7ff fd3d 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000ef6:	2030      	movs	r0, #48	; 0x30
 8000ef8:	f7ff fd3a 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000efc:	20ed      	movs	r0, #237	; 0xed
 8000efe:	f7ff fd27 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000f02:	2064      	movs	r0, #100	; 0x64
 8000f04:	f7ff fd34 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff fd31 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000f0e:	2012      	movs	r0, #18
 8000f10:	f7ff fd2e 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000f14:	2081      	movs	r0, #129	; 0x81
 8000f16:	f7ff fd2b 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000f1a:	20e8      	movs	r0, #232	; 0xe8
 8000f1c:	f7ff fd18 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000f20:	2085      	movs	r0, #133	; 0x85
 8000f22:	f7ff fd25 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000f26:	2010      	movs	r0, #16
 8000f28:	f7ff fd22 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000f2c:	207a      	movs	r0, #122	; 0x7a
 8000f2e:	f7ff fd1f 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000f32:	20cb      	movs	r0, #203	; 0xcb
 8000f34:	f7ff fd0c 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000f38:	2039      	movs	r0, #57	; 0x39
 8000f3a:	f7ff fd19 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000f3e:	202c      	movs	r0, #44	; 0x2c
 8000f40:	f7ff fd16 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fd13 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000f4a:	2034      	movs	r0, #52	; 0x34
 8000f4c:	f7ff fd10 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff fd0d 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000f56:	20f7      	movs	r0, #247	; 0xf7
 8000f58:	f7ff fcfa 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000f5c:	2020      	movs	r0, #32
 8000f5e:	f7ff fd07 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000f62:	20ea      	movs	r0, #234	; 0xea
 8000f64:	f7ff fcf4 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fd01 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fcfe 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000f74:	20c0      	movs	r0, #192	; 0xc0
 8000f76:	f7ff fceb 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000f7a:	201b      	movs	r0, #27
 8000f7c:	f7ff fcf8 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000f80:	20c1      	movs	r0, #193	; 0xc1
 8000f82:	f7ff fce5 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fcf2 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000f8c:	20c5      	movs	r0, #197	; 0xc5
 8000f8e:	f7ff fcdf 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000f92:	2030      	movs	r0, #48	; 0x30
 8000f94:	f7ff fcec 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000f98:	2030      	movs	r0, #48	; 0x30
 8000f9a:	f7ff fce9 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000f9e:	20c7      	movs	r0, #199	; 0xc7
 8000fa0:	f7ff fcd6 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000fa4:	20b7      	movs	r0, #183	; 0xb7
 8000fa6:	f7ff fce3 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000faa:	2036      	movs	r0, #54	; 0x36
 8000fac:	f7ff fcd0 	bl	8000950 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f7ff fcdd 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000fb6:	203a      	movs	r0, #58	; 0x3a
 8000fb8:	f7ff fcca 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000fbc:	2055      	movs	r0, #85	; 0x55
 8000fbe:	f7ff fcd7 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000fc2:	20b1      	movs	r0, #177	; 0xb1
 8000fc4:	f7ff fcc4 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fcd1 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000fce:	201a      	movs	r0, #26
 8000fd0:	f7ff fcce 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000fd4:	20b6      	movs	r0, #182	; 0xb6
 8000fd6:	f7ff fcbb 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f7ff fcc8 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000fe0:	20a2      	movs	r0, #162	; 0xa2
 8000fe2:	f7ff fcc5 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000fe6:	20f2      	movs	r0, #242	; 0xf2
 8000fe8:	f7ff fcb2 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fcbf 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000ff2:	2026      	movs	r0, #38	; 0x26
 8000ff4:	f7ff fcac 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fcb9 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000ffe:	20e0      	movs	r0, #224	; 0xe0
 8001000:	f7ff fca6 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001004:	200f      	movs	r0, #15
 8001006:	f7ff fcb3 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800100a:	202a      	movs	r0, #42	; 0x2a
 800100c:	f7ff fcb0 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f7ff fcad 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001016:	2008      	movs	r0, #8
 8001018:	f7ff fcaa 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800101c:	200e      	movs	r0, #14
 800101e:	f7ff fca7 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001022:	2008      	movs	r0, #8
 8001024:	f7ff fca4 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001028:	2054      	movs	r0, #84	; 0x54
 800102a:	f7ff fca1 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800102e:	20a9      	movs	r0, #169	; 0xa9
 8001030:	f7ff fc9e 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001034:	2043      	movs	r0, #67	; 0x43
 8001036:	f7ff fc9b 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800103a:	200a      	movs	r0, #10
 800103c:	f7ff fc98 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001040:	200f      	movs	r0, #15
 8001042:	f7ff fc95 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fc92 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc8f 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fc8c 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fc89 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800105e:	20e1      	movs	r0, #225	; 0xe1
 8001060:	f7ff fc76 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fc83 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800106a:	2015      	movs	r0, #21
 800106c:	f7ff fc80 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001070:	2017      	movs	r0, #23
 8001072:	f7ff fc7d 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff fc7a 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800107c:	2011      	movs	r0, #17
 800107e:	f7ff fc77 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001082:	2006      	movs	r0, #6
 8001084:	f7ff fc74 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001088:	202b      	movs	r0, #43	; 0x2b
 800108a:	f7ff fc71 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800108e:	2056      	movs	r0, #86	; 0x56
 8001090:	f7ff fc6e 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001094:	203c      	movs	r0, #60	; 0x3c
 8001096:	f7ff fc6b 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800109a:	2005      	movs	r0, #5
 800109c:	f7ff fc68 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80010a0:	2010      	movs	r0, #16
 80010a2:	f7ff fc65 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f7ff fc62 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80010ac:	203f      	movs	r0, #63	; 0x3f
 80010ae:	f7ff fc5f 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80010b2:	203f      	movs	r0, #63	; 0x3f
 80010b4:	f7ff fc5c 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010b8:	200f      	movs	r0, #15
 80010ba:	f7ff fc59 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80010be:	202b      	movs	r0, #43	; 0x2b
 80010c0:	f7ff fc46 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff fc53 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fc50 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff fc4d 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80010d6:	203f      	movs	r0, #63	; 0x3f
 80010d8:	f7ff fc4a 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80010dc:	202a      	movs	r0, #42	; 0x2a
 80010de:	f7ff fc37 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fc44 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fc41 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fc3e 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80010f4:	20ef      	movs	r0, #239	; 0xef
 80010f6:	f7ff fc3b 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80010fa:	2011      	movs	r0, #17
 80010fc:	f7ff fc28 	bl	8000950 <LCD_WR_REG>
	HAL_Delay(120);
 8001100:	2078      	movs	r0, #120	; 0x78
 8001102:	f001 fa15 	bl	8002530 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001106:	2029      	movs	r0, #41	; 0x29
 8001108:	f7ff fc22 	bl	8000950 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <lcd_init+0x2bc>)
 8001114:	f001 fcde 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020800 	.word	0x40020800
 8001120:	200000cc 	.word	0x200000cc
 8001124:	40020000 	.word	0x40020000

08001128 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b298      	uxth	r0, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	b29a      	uxth	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	8b3a      	ldrh	r2, [r7, #24]
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fce3 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	b298      	uxth	r0, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	b29a      	uxth	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	8b3a      	ldrh	r2, [r7, #24]
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fcd3 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b298      	uxth	r0, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	b29a      	uxth	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	b29b      	uxth	r3, r3
 800118e:	8b3a      	ldrh	r2, [r7, #24]
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fcc3 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	b29b      	uxth	r3, r3
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b298      	uxth	r0, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	8b3a      	ldrh	r2, [r7, #24]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fcb3 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4413      	add	r3, r2
 80011c0:	b298      	uxth	r0, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	8b3a      	ldrh	r2, [r7, #24]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fca3 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	b298      	uxth	r0, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	8b3a      	ldrh	r2, [r7, #24]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fc93 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4413      	add	r3, r2
 8001200:	b298      	uxth	r0, r3
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	b29b      	uxth	r3, r3
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	8b3a      	ldrh	r2, [r7, #24]
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc83 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	b29a      	uxth	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b29b      	uxth	r3, r3
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	b298      	uxth	r0, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	b29b      	uxth	r3, r3
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	8b3a      	ldrh	r2, [r7, #24]
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc73 	bl	8000b1c <lcd_DrawPoint>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b08a      	sub	sp, #40	; 0x28
 8001242:	af02      	add	r7, sp, #8
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4613      	mov	r3, r2
 800124c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	f1c3 0303 	rsb	r3, r3, #3
 800125e:	613b      	str	r3, [r7, #16]


	if (fill)
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	2b00      	cmp	r3, #0
 8001264:	d04f      	beq.n	8001306 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001266:	e029      	b.n	80012bc <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00a      	b.n	8001284 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ff55 	bl	8001128 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	429a      	cmp	r2, r3
 800128a:	ddf0      	ble.n	800126e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da06      	bge.n	80012a0 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4413      	add	r3, r2
 800129a:	3306      	adds	r3, #6
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	e00a      	b.n	80012b6 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	009a      	lsls	r2, r3, #2
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4413      	add	r3, r2
 80012ac:	330a      	adds	r3, #10
 80012ae:	613b      	str	r3, [r7, #16]
				y--;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	ddd1      	ble.n	8001268 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80012c4:	e023      	b.n	800130e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff ff29 	bl	8001128 <_draw_circle_8>
			if (d < 0) {
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da06      	bge.n	80012ea <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	009a      	lsls	r2, r3, #2
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4413      	add	r3, r2
 80012e4:	3306      	adds	r3, #6
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	e00a      	b.n	8001300 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	009a      	lsls	r2, r3, #2
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	330a      	adds	r3, #10
 80012f8:	613b      	str	r3, [r7, #16]
				y--;
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
			x++;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	3301      	adds	r3, #1
 8001304:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	429a      	cmp	r2, r3
 800130c:	dddb      	ble.n	80012c6 <lcd_DrawCircle+0x88>
}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af04      	add	r7, sp, #16
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	461a      	mov	r2, r3
 8001322:	4603      	mov	r3, r0
 8001324:	81fb      	strh	r3, [r7, #14]
 8001326:	460b      	mov	r3, r1
 8001328:	81bb      	strh	r3, [r7, #12]
 800132a:	4613      	mov	r3, r2
 800132c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800132e:	89fb      	ldrh	r3, [r7, #14]
 8001330:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001336:	e048      	b.n	80013ca <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d145      	bne.n	80013ca <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800133e:	89fa      	ldrh	r2, [r7, #14]
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <lcd_ShowStr+0xc4>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	1acb      	subs	r3, r1, r3
 8001350:	429a      	cmp	r2, r3
 8001352:	dc3f      	bgt.n	80013d4 <lcd_ShowStr+0xbc>
 8001354:	89ba      	ldrh	r2, [r7, #12]
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <lcd_ShowStr+0xc4>)
 8001358:	885b      	ldrh	r3, [r3, #2]
 800135a:	4619      	mov	r1, r3
 800135c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001360:	1acb      	subs	r3, r1, r3
 8001362:	429a      	cmp	r2, r3
 8001364:	dc36      	bgt.n	80013d4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b80      	cmp	r3, #128	; 0x80
 800136c:	d902      	bls.n	8001374 <lcd_ShowStr+0x5c>
 800136e:	2301      	movs	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
 8001372:	e02a      	b.n	80013ca <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b0d      	cmp	r3, #13
 800137a:	d10b      	bne.n	8001394 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800137c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001380:	b29a      	uxth	r2, r3
 8001382:	89bb      	ldrh	r3, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001388:	8abb      	ldrh	r3, [r7, #20]
 800138a:	81fb      	strh	r3, [r7, #14]
					str++;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3301      	adds	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	e017      	b.n	80013c4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	88fc      	ldrh	r4, [r7, #6]
 800139a:	89b9      	ldrh	r1, [r7, #12]
 800139c:	89f8      	ldrh	r0, [r7, #14]
 800139e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	4623      	mov	r3, r4
 80013b0:	f7ff fbcc 	bl	8000b4c <lcd_ShowChar>
					x+=sizey/2;
 80013b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	b29a      	uxth	r2, r3
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	4413      	add	r3, r2
 80013c2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1b2      	bne.n	8001338 <lcd_ShowStr+0x20>
 80013d2:	e000      	b.n	80013d6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013d4:	bf00      	nop
			}
		}
	}
}
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	200000cc 	.word	0x200000cc

080013e0 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	60ba      	str	r2, [r7, #8]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	81fb      	strh	r3, [r7, #14]
 80013ee:	460b      	mov	r3, r1
 80013f0:	81bb      	strh	r3, [r7, #12]
 80013f2:	4613      	mov	r3, r2
 80013f4:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f7fe fee6 	bl	80001c8 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <lcd_StrCenter+0x60>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	8afb      	ldrh	r3, [r7, #22]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	0fda      	lsrs	r2, r3, #31
 800140e:	4413      	add	r3, r2
 8001410:	105b      	asrs	r3, r3, #1
 8001412:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001414:	89fa      	ldrh	r2, [r7, #14]
 8001416:	8abb      	ldrh	r3, [r7, #20]
 8001418:	4413      	add	r3, r2
 800141a:	b298      	uxth	r0, r3
 800141c:	88fa      	ldrh	r2, [r7, #6]
 800141e:	89b9      	ldrh	r1, [r7, #12]
 8001420:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	8c3b      	ldrh	r3, [r7, #32]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f7ff ff70 	bl	8001318 <lcd_ShowStr>
}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200000cc 	.word	0x200000cc

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f001 f800 	bl	800244c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f828 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f7ff f986 	bl	8000760 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001454:	f7ff f8b4 	bl	80005c0 <MX_FSMC_Init>
  MX_TIM2_Init();
 8001458:	f000 f988 	bl	800176c <MX_TIM2_Init>
  MX_SPI1_Init();
 800145c:	f000 f89a 	bl	8001594 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001460:	f000 f888 	bl	8001574 <system_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (timer_flag[3] == 1) {
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <main+0x54>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <main+0x3a>
	  setTimer(3, DEBUG_LED_TIME);
 800146c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001470:	2003      	movs	r0, #3
 8001472:	f000 fa09 	bl	8001888 <setTimer>
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001476:	2110      	movs	r1, #16
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <main+0x58>)
 800147a:	f001 fb44 	bl	8002b06 <HAL_GPIO_TogglePin>
	}

	if (timer_flag[2] == 1) {
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <main+0x54>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d105      	bne.n	8001492 <main+0x4e>
	  setTimer(2, BUTTON_READING_TIME);
 8001486:	2132      	movs	r1, #50	; 0x32
 8001488:	2002      	movs	r0, #2
 800148a:	f000 f9fd 	bl	8001888 <setTimer>
	  button_Scan();
 800148e:	f7ff f82b 	bl	80004e8 <button_Scan>
	}
    controlTrafficLight();
 8001492:	f000 fa4f 	bl	8001934 <controlTrafficLight>
  {
 8001496:	e7e5      	b.n	8001464 <main+0x20>
 8001498:	200001b8 	.word	0x200001b8
 800149c:	40021000 	.word	0x40021000

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	; 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f9aa 	bl	8004808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemClock_Config+0xcc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <SystemClock_Config+0xcc>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <SystemClock_Config+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <SystemClock_Config+0xd0>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2310      	movs	r3, #16
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150c:	2300      	movs	r3, #0
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001510:	2308      	movs	r3, #8
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001514:	23a8      	movs	r3, #168	; 0xa8
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fb09 	bl	8002b3c <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001530:	f000 f82a 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001546:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2105      	movs	r1, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fd6a 	bl	800302c <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155e:	f000 f813 	bl	8001588 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	initTimer();
 8001578:	f000 f96a 	bl	8001850 <initTimer>
	button_init();
 800157c:	f7fe ffa8 	bl	80004d0 <button_init>
	lcd_init();
 8001580:	f7ff fc72 	bl	8000e68 <lcd_init>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_SPI1_Init+0x64>)
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <MX_SPI1_Init+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015e0:	220a      	movs	r2, #10
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_SPI1_Init+0x64>)
 80015e6:	f001 fee9 	bl	80033bc <HAL_SPI_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015f0:	f7ff ffca 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000108 	.word	0x20000108
 80015fc:	40013000 	.word	0x40013000

08001600 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_SPI_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_SPI_MspInit+0x88>)
 800162c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800165a:	2338      	movs	r3, #56	; 0x38
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_SPI_MspInit+0x8c>)
 8001676:	f001 f891 	bl	800279c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40013000 	.word	0x40013000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020400 	.word	0x40020400

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_MspInit+0x4c>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_MspInit+0x4c>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 fee0 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f002 fbaf 	bl	8003e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000160 	.word	0x20000160

08001748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	463b      	mov	r3, r7
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_TIM2_Init+0x94>)
 800178a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_TIM2_Init+0x94>)
 8001792:	f240 3247 	movw	r2, #839	; 0x347
 8001796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_TIM2_Init+0x94>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_TIM2_Init+0x94>)
 80017a0:	2263      	movs	r2, #99	; 0x63
 80017a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_TIM2_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_TIM2_Init+0x94>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <MX_TIM2_Init+0x94>)
 80017b2:	f002 fab3 	bl	8003d1c <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017bc:	f7ff fee4 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_TIM2_Init+0x94>)
 80017ce:	f002 fc6d 	bl	80040ac <HAL_TIM_ConfigClockSource>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017d8:	f7ff fed6 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_TIM2_Init+0x94>)
 80017ea:	f002 fe89 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017f4:	f7ff fec8 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000160 	.word	0x20000160

08001804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d115      	bne.n	8001842 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	201c      	movs	r0, #28
 8001838:	f000 ff79 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800183c:	201c      	movs	r0, #28
 800183e:	f000 ff92 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <initTimer>:
 * timer2: read button
 */
int timer_counter[TIMER_NUMBER];
int timer_flag[TIMER_NUMBER];

void initTimer() {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <initTimer+0x34>)
 8001856:	f002 fab1 	bl	8003dbc <HAL_TIM_Base_Start_IT>
	setTimer(0, LED_BLINK_TIME);
 800185a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f812 	bl	8001888 <setTimer>
	setTimer(1, TRAFFIC_LIGHT_TIME);
 8001864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001868:	2001      	movs	r0, #1
 800186a:	f000 f80d 	bl	8001888 <setTimer>
	setTimer(2, BUTTON_READING_TIME);
 800186e:	2132      	movs	r1, #50	; 0x32
 8001870:	2002      	movs	r0, #2
 8001872:	f000 f809 	bl	8001888 <setTimer>
	setTimer(3, DEBUG_LED_TIME);
 8001876:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800187a:	2003      	movs	r0, #3
 800187c:	f000 f804 	bl	8001888 <setTimer>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000160 	.word	0x20000160

08001888 <setTimer>:

void setTimer(int index, int duration){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  timer_counter[index] = duration / TIME_CYCLE;
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <setTimer+0x2c>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  timer_flag[index] = 0;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <setTimer+0x30>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2100      	movs	r1, #0
 80018a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200001a8 	.word	0x200001a8
 80018b8:	200001b8 	.word	0x200001b8

080018bc <runTimer>:
void runTimer(){
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
  for(int i = 0; i < TIMER_NUMBER; ++i){
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	e01c      	b.n	8001902 <runTimer+0x46>
    if(timer_counter[i] > 0){
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <runTimer+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	dd13      	ble.n	80018fc <runTimer+0x40>
      --timer_counter[i];
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <runTimer+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <runTimer+0x5c>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(timer_counter[i] == 0)
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <runTimer+0x5c>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <runTimer+0x40>
	    timer_flag[i] = 1;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <runTimer+0x60>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2101      	movs	r1, #1
 80018f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < TIMER_NUMBER; ++i){
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3301      	adds	r3, #1
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b03      	cmp	r3, #3
 8001906:	dddf      	ble.n	80018c8 <runTimer+0xc>
    }
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200001a8 	.word	0x200001a8
 800191c:	200001b8 	.word	0x200001b8

08001920 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  runTimer();
 8001928:	f7ff ffc8 	bl	80018bc <runTimer>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <controlTrafficLight>:
int traffic_light_time_buffer_next[3] = {RED_TIME_DEFAULT, AMBER_TIME_DEFAULT, GREEN_TIME_DEFAULT};
int traffic_light_time_buffer_temp[3] = {RED_TIME_DEFAULT, AMBER_TIME_DEFAULT, GREEN_TIME_DEFAULT};

int time_counter_x, time_counter_y;

void controlTrafficLight(){
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af04      	add	r7, sp, #16
  switch (traffic_light_state) {
 800193a:	4ba9      	ldr	r3, [pc, #676]	; (8001be0 <controlTrafficLight+0x2ac>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b08      	cmp	r3, #8
 8001940:	f200 83d5 	bhi.w	80020ee <controlTrafficLight+0x7ba>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <controlTrafficLight+0x18>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	08001971 	.word	0x08001971
 8001950:	080019e3 	.word	0x080019e3
 8001954:	08001ab1 	.word	0x08001ab1
 8001958:	08001b87 	.word	0x08001b87
 800195c:	08001c79 	.word	0x08001c79
 8001960:	08001d4f 	.word	0x08001d4f
 8001964:	08001e31 	.word	0x08001e31
 8001968:	08001f41 	.word	0x08001f41
 800196c:	08002023 	.word	0x08002023
    case INIT:
      lcd_Clear(BROWN);
 8001970:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8001974:	f7ff f86a 	bl	8000a4c <lcd_Clear>
      lcd_Fill(0, 0, 240, 40, WHITE);
 8001978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2328      	movs	r3, #40	; 0x28
 8001980:	22f0      	movs	r2, #240	; 0xf0
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff f893 	bl	8000ab0 <lcd_Fill>
      lcd_StrCenter(0, 8, "NORMAL", RED, WHITE, 24, 1);
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2318      	movs	r3, #24
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800199c:	4a91      	ldr	r2, [pc, #580]	; (8001be4 <controlTrafficLight+0x2b0>)
 800199e:	2108      	movs	r1, #8
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fd1d 	bl	80013e0 <lcd_StrCenter>
      traffic_light_state = NORMAL_RED_GREEN;
 80019a6:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <controlTrafficLight+0x2ac>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
      traffic_light_display_state = XRED_YGREEN;
 80019ac:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <controlTrafficLight+0x2b4>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
      time_counter_x = traffic_light_time_buffer[0];
 80019b2:	4b8e      	ldr	r3, [pc, #568]	; (8001bec <controlTrafficLight+0x2b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a8e      	ldr	r2, [pc, #568]	; (8001bf0 <controlTrafficLight+0x2bc>)
 80019b8:	6013      	str	r3, [r2, #0]
      time_counter_y = traffic_light_time_buffer[2];
 80019ba:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <controlTrafficLight+0x2b8>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4a8d      	ldr	r2, [pc, #564]	; (8001bf4 <controlTrafficLight+0x2c0>)
 80019c0:	6013      	str	r3, [r2, #0]
      --time_counter_x;
 80019c2:	4b8b      	ldr	r3, [pc, #556]	; (8001bf0 <controlTrafficLight+0x2bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	4a89      	ldr	r2, [pc, #548]	; (8001bf0 <controlTrafficLight+0x2bc>)
 80019ca:	6013      	str	r3, [r2, #0]
	  --time_counter_y;
 80019cc:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <controlTrafficLight+0x2c0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	4a88      	ldr	r2, [pc, #544]	; (8001bf4 <controlTrafficLight+0x2c0>)
 80019d4:	6013      	str	r3, [r2, #0]
      setTimer(1, TRAFFIC_LIGHT_TIME);
 80019d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff ff54 	bl	8001888 <setTimer>
      break;
 80019e0:	e38e      	b.n	8002100 <controlTrafficLight+0x7cc>
    case NORMAL_RED_GREEN:
      if(button_count[0] == 1){
 80019e2:	4b85      	ldr	r3, [pc, #532]	; (8001bf8 <controlTrafficLight+0x2c4>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d128      	bne.n	8001a3c <controlTrafficLight+0x108>
    	++button_count[0];
 80019ea:	4b83      	ldr	r3, [pc, #524]	; (8001bf8 <controlTrafficLight+0x2c4>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <controlTrafficLight+0x2c4>)
 80019f4:	801a      	strh	r2, [r3, #0]
    	lcd_Fill(0, 0, 240, 40, WHITE);
 80019f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2328      	movs	r3, #40	; 0x28
 80019fe:	22f0      	movs	r2, #240	; 0xf0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff f854 	bl	8000ab0 <lcd_Fill>
    	lcd_StrCenter(0, 8, "MODIFICATION", RED, WHITE, 24, 1);
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2318      	movs	r3, #24
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a1a:	4a78      	ldr	r2, [pc, #480]	; (8001bfc <controlTrafficLight+0x2c8>)
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fcde 	bl	80013e0 <lcd_StrCenter>
    	traffic_light_state = MODIFY_RED;
 8001a24:	4b6e      	ldr	r3, [pc, #440]	; (8001be0 <controlTrafficLight+0x2ac>)
 8001a26:	2205      	movs	r2, #5
 8001a28:	701a      	strb	r2, [r3, #0]
    	traffic_light_display_state = XRED;
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <controlTrafficLight+0x2b4>)
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	701a      	strb	r2, [r3, #0]
	    setTimer(0, LED_BLINK_TIME);
 8001a30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff ff27 	bl	8001888 <setTimer>
		  }
		  --time_counter_x;
		  --time_counter_y;
		}
      }
      break;
 8001a3a:	e35a      	b.n	80020f2 <controlTrafficLight+0x7be>
		if(timer_flag[1] == 1){
 8001a3c:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <controlTrafficLight+0x2cc>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	f040 8356 	bne.w	80020f2 <controlTrafficLight+0x7be>
		  setTimer(1, TRAFFIC_LIGHT_TIME);
 8001a46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff ff1c 	bl	8001888 <setTimer>
		  if(time_counter_y <= 0){
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	dc20      	bgt.n	8001a9a <controlTrafficLight+0x166>
			  lcd_Fill(0, 0, 240, 40, WHITE);
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2328      	movs	r3, #40	; 0x28
 8001a60:	22f0      	movs	r2, #240	; 0xf0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff f823 	bl	8000ab0 <lcd_Fill>
			  lcd_StrCenter(0, 8, "NORMAL", RED, WHITE, 24, 1);
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2318      	movs	r3, #24
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a7c:	4a59      	ldr	r2, [pc, #356]	; (8001be4 <controlTrafficLight+0x2b0>)
 8001a7e:	2108      	movs	r1, #8
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fcad 	bl	80013e0 <lcd_StrCenter>
			traffic_light_state = NORMAL_RED_AMBER;
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <controlTrafficLight+0x2ac>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	701a      	strb	r2, [r3, #0]
			traffic_light_display_state = XRED_YAMBER;
 8001a8c:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <controlTrafficLight+0x2b4>)
 8001a8e:	2202      	movs	r2, #2
 8001a90:	701a      	strb	r2, [r3, #0]
			time_counter_y = traffic_light_time_buffer[1];
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <controlTrafficLight+0x2b8>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a57      	ldr	r2, [pc, #348]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001a98:	6013      	str	r3, [r2, #0]
		  --time_counter_x;
 8001a9a:	4b55      	ldr	r3, [pc, #340]	; (8001bf0 <controlTrafficLight+0x2bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	4a53      	ldr	r2, [pc, #332]	; (8001bf0 <controlTrafficLight+0x2bc>)
 8001aa2:	6013      	str	r3, [r2, #0]
		  --time_counter_y;
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001aac:	6013      	str	r3, [r2, #0]
      break;
 8001aae:	e320      	b.n	80020f2 <controlTrafficLight+0x7be>
    case NORMAL_RED_AMBER:
      if(button_count[0] == 1){
 8001ab0:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <controlTrafficLight+0x2c4>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d128      	bne.n	8001b0a <controlTrafficLight+0x1d6>
    	  ++button_count[0];
 8001ab8:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <controlTrafficLight+0x2c4>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <controlTrafficLight+0x2c4>)
 8001ac2:	801a      	strh	r2, [r3, #0]
    	lcd_Fill(0, 0, 240, 40, WHITE);
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2328      	movs	r3, #40	; 0x28
 8001acc:	22f0      	movs	r2, #240	; 0xf0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7fe ffed 	bl	8000ab0 <lcd_Fill>
    	lcd_StrCenter(0, 8, "MODIFICATION", RED, WHITE, 24, 1);
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	2318      	movs	r3, #24
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ae8:	4a44      	ldr	r2, [pc, #272]	; (8001bfc <controlTrafficLight+0x2c8>)
 8001aea:	2108      	movs	r1, #8
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fc77 	bl	80013e0 <lcd_StrCenter>
      	traffic_light_state = MODIFY_RED;
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <controlTrafficLight+0x2ac>)
 8001af4:	2205      	movs	r2, #5
 8001af6:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = XRED;
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <controlTrafficLight+0x2b4>)
 8001afa:	2205      	movs	r2, #5
 8001afc:	701a      	strb	r2, [r3, #0]
		setTimer(0, LED_BLINK_TIME);
 8001afe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fec0 	bl	8001888 <setTimer>
		  }
		  --time_counter_x;
		  --time_counter_y;
		}
      }
      break;
 8001b08:	e2f5      	b.n	80020f6 <controlTrafficLight+0x7c2>
		if(timer_flag[1] == 1){
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <controlTrafficLight+0x2cc>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	f040 82f1 	bne.w	80020f6 <controlTrafficLight+0x7c2>
		  setTimer(1, TRAFFIC_LIGHT_TIME);
 8001b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff feb5 	bl	8001888 <setTimer>
		  if(time_counter_y <= 0){
 8001b1e:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	dc24      	bgt.n	8001b70 <controlTrafficLight+0x23c>
			  lcd_Fill(0, 0, 240, 40, WHITE);
 8001b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2328      	movs	r3, #40	; 0x28
 8001b2e:	22f0      	movs	r2, #240	; 0xf0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7fe ffbc 	bl	8000ab0 <lcd_Fill>
			  lcd_StrCenter(0, 8, "NORMAL", RED, WHITE, 24, 1);
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2318      	movs	r3, #24
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b4a:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <controlTrafficLight+0x2b0>)
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fc46 	bl	80013e0 <lcd_StrCenter>
			traffic_light_state = NORMAL_GREEN_RED;
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <controlTrafficLight+0x2ac>)
 8001b56:	2203      	movs	r2, #3
 8001b58:	701a      	strb	r2, [r3, #0]
			traffic_light_display_state = XGREEN_YRED;
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <controlTrafficLight+0x2b4>)
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	701a      	strb	r2, [r3, #0]
			time_counter_x = traffic_light_time_buffer[2];
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <controlTrafficLight+0x2b8>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <controlTrafficLight+0x2bc>)
 8001b66:	6013      	str	r3, [r2, #0]
			time_counter_y = traffic_light_time_buffer[0];
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <controlTrafficLight+0x2b8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001b6e:	6013      	str	r3, [r2, #0]
		  --time_counter_x;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <controlTrafficLight+0x2bc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <controlTrafficLight+0x2bc>)
 8001b78:	6013      	str	r3, [r2, #0]
		  --time_counter_y;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <controlTrafficLight+0x2c0>)
 8001b82:	6013      	str	r3, [r2, #0]
      break;
 8001b84:	e2b7      	b.n	80020f6 <controlTrafficLight+0x7c2>
    case NORMAL_GREEN_RED:
      if(button_count[0] == 1){
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <controlTrafficLight+0x2c4>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d13a      	bne.n	8001c04 <controlTrafficLight+0x2d0>
    	  ++button_count[0];
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <controlTrafficLight+0x2c4>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <controlTrafficLight+0x2c4>)
 8001b98:	801a      	strh	r2, [r3, #0]
    	lcd_Fill(0, 0, 240, 40, WHITE);
 8001b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2328      	movs	r3, #40	; 0x28
 8001ba2:	22f0      	movs	r2, #240	; 0xf0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7fe ff82 	bl	8000ab0 <lcd_Fill>
    	lcd_StrCenter(0, 8, "MODIFICATION", RED, WHITE, 24, 1);
 8001bac:	2301      	movs	r3, #1
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	2318      	movs	r3, #24
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <controlTrafficLight+0x2c8>)
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fc0c 	bl	80013e0 <lcd_StrCenter>
      	traffic_light_state = MODIFY_RED;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <controlTrafficLight+0x2ac>)
 8001bca:	2205      	movs	r2, #5
 8001bcc:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = XRED;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <controlTrafficLight+0x2b4>)
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	701a      	strb	r2, [r3, #0]
		setTimer(0, LED_BLINK_TIME);
 8001bd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fe55 	bl	8001888 <setTimer>
		  }
		  --time_counter_x;
		  --time_counter_y;
		}
      }
      break;
 8001bde:	e28c      	b.n	80020fa <controlTrafficLight+0x7c6>
 8001be0:	20000058 	.word	0x20000058
 8001be4:	08004830 	.word	0x08004830
 8001be8:	20000059 	.word	0x20000059
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	200001cc 	.word	0x200001cc
 8001bf4:	200001c8 	.word	0x200001c8
 8001bf8:	2000005c 	.word	0x2000005c
 8001bfc:	08004838 	.word	0x08004838
 8001c00:	200001b8 	.word	0x200001b8
		if(timer_flag[1] == 1){
 8001c04:	4ba7      	ldr	r3, [pc, #668]	; (8001ea4 <controlTrafficLight+0x570>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	f040 8276 	bne.w	80020fa <controlTrafficLight+0x7c6>
		  setTimer(1, TRAFFIC_LIGHT_TIME);
 8001c0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fe38 	bl	8001888 <setTimer>
		  if(time_counter_x <= 0){
 8001c18:	4ba3      	ldr	r3, [pc, #652]	; (8001ea8 <controlTrafficLight+0x574>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dc20      	bgt.n	8001c62 <controlTrafficLight+0x32e>
			  lcd_Fill(0, 0, 240, 40, WHITE);
 8001c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2328      	movs	r3, #40	; 0x28
 8001c28:	22f0      	movs	r2, #240	; 0xf0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7fe ff3f 	bl	8000ab0 <lcd_Fill>
			  lcd_StrCenter(0, 8, "NORMAL", RED, WHITE, 24, 1);
 8001c32:	2301      	movs	r3, #1
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	2318      	movs	r3, #24
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c44:	4a99      	ldr	r2, [pc, #612]	; (8001eac <controlTrafficLight+0x578>)
 8001c46:	2108      	movs	r1, #8
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fbc9 	bl	80013e0 <lcd_StrCenter>
			traffic_light_state = NORMAL_AMBER_RED;
 8001c4e:	4b98      	ldr	r3, [pc, #608]	; (8001eb0 <controlTrafficLight+0x57c>)
 8001c50:	2204      	movs	r2, #4
 8001c52:	701a      	strb	r2, [r3, #0]
			traffic_light_display_state = XAMBER_YRED;
 8001c54:	4b97      	ldr	r3, [pc, #604]	; (8001eb4 <controlTrafficLight+0x580>)
 8001c56:	2204      	movs	r2, #4
 8001c58:	701a      	strb	r2, [r3, #0]
			time_counter_x = traffic_light_time_buffer[1];
 8001c5a:	4b97      	ldr	r3, [pc, #604]	; (8001eb8 <controlTrafficLight+0x584>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <controlTrafficLight+0x574>)
 8001c60:	6013      	str	r3, [r2, #0]
		  --time_counter_x;
 8001c62:	4b91      	ldr	r3, [pc, #580]	; (8001ea8 <controlTrafficLight+0x574>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	4a8f      	ldr	r2, [pc, #572]	; (8001ea8 <controlTrafficLight+0x574>)
 8001c6a:	6013      	str	r3, [r2, #0]
		  --time_counter_y;
 8001c6c:	4b93      	ldr	r3, [pc, #588]	; (8001ebc <controlTrafficLight+0x588>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	4a92      	ldr	r2, [pc, #584]	; (8001ebc <controlTrafficLight+0x588>)
 8001c74:	6013      	str	r3, [r2, #0]
      break;
 8001c76:	e240      	b.n	80020fa <controlTrafficLight+0x7c6>
    case NORMAL_AMBER_RED:
      if(button_count[0] == 1){
 8001c78:	4b91      	ldr	r3, [pc, #580]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d128      	bne.n	8001cd2 <controlTrafficLight+0x39e>
    	  ++button_count[0];
 8001c80:	4b8f      	ldr	r3, [pc, #572]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b8d      	ldr	r3, [pc, #564]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001c8a:	801a      	strh	r2, [r3, #0]
    	lcd_Fill(0, 0, 240, 40, WHITE);
 8001c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2328      	movs	r3, #40	; 0x28
 8001c94:	22f0      	movs	r2, #240	; 0xf0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7fe ff09 	bl	8000ab0 <lcd_Fill>
    	lcd_StrCenter(0, 8, "MODIFICATION", RED, WHITE, 24, 1);
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	2318      	movs	r3, #24
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cb0:	4a84      	ldr	r2, [pc, #528]	; (8001ec4 <controlTrafficLight+0x590>)
 8001cb2:	2108      	movs	r1, #8
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fb93 	bl	80013e0 <lcd_StrCenter>
      	traffic_light_state = MODIFY_RED;
 8001cba:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <controlTrafficLight+0x57c>)
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = XRED;
 8001cc0:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <controlTrafficLight+0x580>)
 8001cc2:	2205      	movs	r2, #5
 8001cc4:	701a      	strb	r2, [r3, #0]
      	setTimer(0, LED_BLINK_TIME);
 8001cc6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fddc 	bl	8001888 <setTimer>
		  }
		  --time_counter_x;
		  --time_counter_y;
		}
      }
      break;
 8001cd0:	e215      	b.n	80020fe <controlTrafficLight+0x7ca>
		if(timer_flag[1] == 1){
 8001cd2:	4b74      	ldr	r3, [pc, #464]	; (8001ea4 <controlTrafficLight+0x570>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	f040 8211 	bne.w	80020fe <controlTrafficLight+0x7ca>
		  setTimer(1, TRAFFIC_LIGHT_TIME);
 8001cdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff fdd1 	bl	8001888 <setTimer>
		  if(time_counter_x <= 0){
 8001ce6:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <controlTrafficLight+0x574>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	dc24      	bgt.n	8001d38 <controlTrafficLight+0x404>
			  lcd_Fill(0, 0, 240, 40, WHITE);
 8001cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2328      	movs	r3, #40	; 0x28
 8001cf6:	22f0      	movs	r2, #240	; 0xf0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7fe fed8 	bl	8000ab0 <lcd_Fill>
			  lcd_StrCenter(0, 8, "NORMAL", RED, WHITE, 24, 1);
 8001d00:	2301      	movs	r3, #1
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	2318      	movs	r3, #24
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d12:	4a66      	ldr	r2, [pc, #408]	; (8001eac <controlTrafficLight+0x578>)
 8001d14:	2108      	movs	r1, #8
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fb62 	bl	80013e0 <lcd_StrCenter>
			traffic_light_state = NORMAL_RED_GREEN;
 8001d1c:	4b64      	ldr	r3, [pc, #400]	; (8001eb0 <controlTrafficLight+0x57c>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
			traffic_light_display_state = XRED_YGREEN;
 8001d22:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <controlTrafficLight+0x580>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
			time_counter_x = traffic_light_time_buffer[0];
 8001d28:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <controlTrafficLight+0x584>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <controlTrafficLight+0x574>)
 8001d2e:	6013      	str	r3, [r2, #0]
			time_counter_y = traffic_light_time_buffer[2];
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <controlTrafficLight+0x584>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a61      	ldr	r2, [pc, #388]	; (8001ebc <controlTrafficLight+0x588>)
 8001d36:	6013      	str	r3, [r2, #0]
		  --time_counter_x;
 8001d38:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <controlTrafficLight+0x574>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <controlTrafficLight+0x574>)
 8001d40:	6013      	str	r3, [r2, #0]
		  --time_counter_y;
 8001d42:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <controlTrafficLight+0x588>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	4a5c      	ldr	r2, [pc, #368]	; (8001ebc <controlTrafficLight+0x588>)
 8001d4a:	6013      	str	r3, [r2, #0]
      break;
 8001d4c:	e1d7      	b.n	80020fe <controlTrafficLight+0x7ca>
    case MODIFY_RED:
      if(button_count[0] == 1){
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d123      	bne.n	8001d9e <controlTrafficLight+0x46a>
    	  ++button_count[0];
 8001d56:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001d60:	801a      	strh	r2, [r3, #0]
    	lcd_Fill(0, 0, 240, 40, WHITE);
 8001d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2328      	movs	r3, #40	; 0x28
 8001d6a:	22f0      	movs	r2, #240	; 0xf0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7fe fe9e 	bl	8000ab0 <lcd_Fill>
    	lcd_StrCenter(0, 8, "MODIFICATION", RED, WHITE, 24, 1);
 8001d74:	2301      	movs	r3, #1
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	2318      	movs	r3, #24
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d86:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <controlTrafficLight+0x590>)
 8001d88:	2108      	movs	r1, #8
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fb28 	bl	80013e0 <lcd_StrCenter>
      	traffic_light_state = MODIFY_GREEN;
 8001d90:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <controlTrafficLight+0x57c>)
 8001d92:	2206      	movs	r2, #6
 8001d94:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = XGREEN;
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <controlTrafficLight+0x580>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	701a      	strb	r2, [r3, #0]
		  traffic_light_time_buffer_next[0] = traffic_light_time_buffer_temp[0];
		}
//		lcd_Fill(0, 40, 240, 40, WHITE);
		lcd_ShowIntNum(100, 48, traffic_light_time_buffer_temp[0], 2, RED, WHITE, 24);
      }
      break;
 8001d9c:	e1b0      	b.n	8002100 <controlTrafficLight+0x7cc>
		if(timer_flag[0] == 1){
 8001d9e:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <controlTrafficLight+0x570>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10f      	bne.n	8001dc6 <controlTrafficLight+0x492>
		  setTimer(0, LED_BLINK_TIME);
 8001da6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff fd6c 	bl	8001888 <setTimer>
		  if (traffic_light_display_state == XRED)
 8001db0:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <controlTrafficLight+0x580>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d103      	bne.n	8001dc0 <controlTrafficLight+0x48c>
			traffic_light_display_state = YRED;
 8001db8:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <controlTrafficLight+0x580>)
 8001dba:	2208      	movs	r2, #8
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e002      	b.n	8001dc6 <controlTrafficLight+0x492>
			traffic_light_display_state = XRED;
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <controlTrafficLight+0x580>)
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	701a      	strb	r2, [r3, #0]
		if(button_count[1] == 1){
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001dc8:	885b      	ldrh	r3, [r3, #2]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d111      	bne.n	8001df2 <controlTrafficLight+0x4be>
			++button_count[1];
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001dd0:	885b      	ldrh	r3, [r3, #2]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001dd8:	805a      	strh	r2, [r3, #2]
		  ++traffic_light_time_buffer_temp[0];
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <controlTrafficLight+0x594>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	4a39      	ldr	r2, [pc, #228]	; (8001ec8 <controlTrafficLight+0x594>)
 8001de2:	6013      	str	r3, [r2, #0]
		  if(traffic_light_time_buffer_temp[0] > TIME_LIGHT_MAX)
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <controlTrafficLight+0x594>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b63      	cmp	r3, #99	; 0x63
 8001dea:	dd02      	ble.n	8001df2 <controlTrafficLight+0x4be>
			traffic_light_time_buffer_temp[0] = TIME_LIGHT_MIN;
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <controlTrafficLight+0x594>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
		if(button_count[2] == 1){
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001df4:	889b      	ldrh	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d109      	bne.n	8001e0e <controlTrafficLight+0x4da>
			++button_count[2];
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001dfc:	889b      	ldrh	r3, [r3, #4]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001e04:	809a      	strh	r2, [r3, #4]
		  traffic_light_time_buffer_next[0] = traffic_light_time_buffer_temp[0];
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <controlTrafficLight+0x594>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <controlTrafficLight+0x598>)
 8001e0c:	6013      	str	r3, [r2, #0]
		lcd_ShowIntNum(100, 48, traffic_light_time_buffer_temp[0], 2, RED, WHITE, 24);
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <controlTrafficLight+0x594>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2318      	movs	r3, #24
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2302      	movs	r3, #2
 8001e26:	2130      	movs	r1, #48	; 0x30
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	f7fe ff7b 	bl	8000d24 <lcd_ShowIntNum>
      break;
 8001e2e:	e167      	b.n	8002100 <controlTrafficLight+0x7cc>
    case MODIFY_GREEN:
      if(button_count[0] == 1){
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d123      	bne.n	8001e80 <controlTrafficLight+0x54c>
    	  ++button_count[0];
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <controlTrafficLight+0x58c>)
 8001e42:	801a      	strh	r2, [r3, #0]
    	lcd_Fill(0, 0, 240, 40, WHITE);
 8001e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2328      	movs	r3, #40	; 0x28
 8001e4c:	22f0      	movs	r2, #240	; 0xf0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7fe fe2d 	bl	8000ab0 <lcd_Fill>
    	lcd_StrCenter(0, 8, "MODIFICATION", RED, WHITE, 24, 1);
 8001e56:	2301      	movs	r3, #1
 8001e58:	9302      	str	r3, [sp, #8]
 8001e5a:	2318      	movs	r3, #24
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <controlTrafficLight+0x590>)
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fab7 	bl	80013e0 <lcd_StrCenter>
      	traffic_light_state = MODIFY_AMBER;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <controlTrafficLight+0x57c>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = XAMBER;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <controlTrafficLight+0x580>)
 8001e7a:	2206      	movs	r2, #6
 8001e7c:	701a      	strb	r2, [r3, #0]
		  traffic_light_time_buffer_next[2] = traffic_light_time_buffer_temp[2];
		}
//		lcd_Fill(0, 40, 240, 40, WHITE);
		lcd_ShowIntNum(100, 48, traffic_light_time_buffer_temp[2], 2, RED, WHITE, 24);
      }
      break;
 8001e7e:	e13f      	b.n	8002100 <controlTrafficLight+0x7cc>
		if(timer_flag[0] == 1){
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <controlTrafficLight+0x570>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d126      	bne.n	8001ed6 <controlTrafficLight+0x5a2>
		  setTimer(0, LED_BLINK_TIME);
 8001e88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fcfb 	bl	8001888 <setTimer>
		  if (traffic_light_display_state == XGREEN)
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <controlTrafficLight+0x580>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b07      	cmp	r3, #7
 8001e98:	d11a      	bne.n	8001ed0 <controlTrafficLight+0x59c>
			traffic_light_display_state = YGREEN;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <controlTrafficLight+0x580>)
 8001e9c:	220a      	movs	r2, #10
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e019      	b.n	8001ed6 <controlTrafficLight+0x5a2>
 8001ea2:	bf00      	nop
 8001ea4:	200001b8 	.word	0x200001b8
 8001ea8:	200001cc 	.word	0x200001cc
 8001eac:	08004830 	.word	0x08004830
 8001eb0:	20000058 	.word	0x20000058
 8001eb4:	20000059 	.word	0x20000059
 8001eb8:	20000004 	.word	0x20000004
 8001ebc:	200001c8 	.word	0x200001c8
 8001ec0:	2000005c 	.word	0x2000005c
 8001ec4:	08004838 	.word	0x08004838
 8001ec8:	2000001c 	.word	0x2000001c
 8001ecc:	20000010 	.word	0x20000010
			traffic_light_display_state = XGREEN;
 8001ed0:	4b8e      	ldr	r3, [pc, #568]	; (800210c <controlTrafficLight+0x7d8>)
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
		if(button_count[1] == 1){
 8001ed6:	4b8e      	ldr	r3, [pc, #568]	; (8002110 <controlTrafficLight+0x7dc>)
 8001ed8:	885b      	ldrh	r3, [r3, #2]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d111      	bne.n	8001f02 <controlTrafficLight+0x5ce>
			++button_count[1];
 8001ede:	4b8c      	ldr	r3, [pc, #560]	; (8002110 <controlTrafficLight+0x7dc>)
 8001ee0:	885b      	ldrh	r3, [r3, #2]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b8a      	ldr	r3, [pc, #552]	; (8002110 <controlTrafficLight+0x7dc>)
 8001ee8:	805a      	strh	r2, [r3, #2]
		  ++traffic_light_time_buffer_temp[2];
 8001eea:	4b8a      	ldr	r3, [pc, #552]	; (8002114 <controlTrafficLight+0x7e0>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a88      	ldr	r2, [pc, #544]	; (8002114 <controlTrafficLight+0x7e0>)
 8001ef2:	6093      	str	r3, [r2, #8]
		  if(traffic_light_time_buffer_temp[2] > TIME_LIGHT_MAX)
 8001ef4:	4b87      	ldr	r3, [pc, #540]	; (8002114 <controlTrafficLight+0x7e0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b63      	cmp	r3, #99	; 0x63
 8001efa:	dd02      	ble.n	8001f02 <controlTrafficLight+0x5ce>
			traffic_light_time_buffer_temp[2] = TIME_LIGHT_MIN;
 8001efc:	4b85      	ldr	r3, [pc, #532]	; (8002114 <controlTrafficLight+0x7e0>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	609a      	str	r2, [r3, #8]
		if(button_count[2] == 1){
 8001f02:	4b83      	ldr	r3, [pc, #524]	; (8002110 <controlTrafficLight+0x7dc>)
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d109      	bne.n	8001f1e <controlTrafficLight+0x5ea>
			++button_count[2];
 8001f0a:	4b81      	ldr	r3, [pc, #516]	; (8002110 <controlTrafficLight+0x7dc>)
 8001f0c:	889b      	ldrh	r3, [r3, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <controlTrafficLight+0x7dc>)
 8001f14:	809a      	strh	r2, [r3, #4]
		  traffic_light_time_buffer_next[2] = traffic_light_time_buffer_temp[2];
 8001f16:	4b7f      	ldr	r3, [pc, #508]	; (8002114 <controlTrafficLight+0x7e0>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	4a7f      	ldr	r2, [pc, #508]	; (8002118 <controlTrafficLight+0x7e4>)
 8001f1c:	6093      	str	r3, [r2, #8]
		lcd_ShowIntNum(100, 48, traffic_light_time_buffer_temp[2], 2, RED, WHITE, 24);
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	; (8002114 <controlTrafficLight+0x7e0>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	2318      	movs	r3, #24
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2302      	movs	r3, #2
 8001f36:	2130      	movs	r1, #48	; 0x30
 8001f38:	2064      	movs	r0, #100	; 0x64
 8001f3a:	f7fe fef3 	bl	8000d24 <lcd_ShowIntNum>
      break;
 8001f3e:	e0df      	b.n	8002100 <controlTrafficLight+0x7cc>
    case MODIFY_AMBER:
	  if(button_count[0] == 1){
 8001f40:	4b73      	ldr	r3, [pc, #460]	; (8002110 <controlTrafficLight+0x7dc>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d123      	bne.n	8001f90 <controlTrafficLight+0x65c>
		  ++button_count[0];
 8001f48:	4b71      	ldr	r3, [pc, #452]	; (8002110 <controlTrafficLight+0x7dc>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <controlTrafficLight+0x7dc>)
 8001f52:	801a      	strh	r2, [r3, #0]
		lcd_Fill(0, 0, 240, 40, WHITE);
 8001f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2328      	movs	r3, #40	; 0x28
 8001f5c:	22f0      	movs	r2, #240	; 0xf0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7fe fda5 	bl	8000ab0 <lcd_Fill>
		lcd_StrCenter(0, 8, "MODIFICATION", RED, WHITE, 24, 1);
 8001f66:	2301      	movs	r3, #1
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	2318      	movs	r3, #24
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f78:	4a68      	ldr	r2, [pc, #416]	; (800211c <controlTrafficLight+0x7e8>)
 8001f7a:	2108      	movs	r1, #8
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fa2f 	bl	80013e0 <lcd_StrCenter>
		traffic_light_state = MODIFY_ERROR;
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <controlTrafficLight+0x7ec>)
 8001f84:	2208      	movs	r2, #8
 8001f86:	701a      	strb	r2, [r3, #0]
		traffic_light_display_state = NONE;
 8001f88:	4b60      	ldr	r3, [pc, #384]	; (800210c <controlTrafficLight+0x7d8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
		  traffic_light_time_buffer_next[1] = traffic_light_time_buffer_temp[1];
		}
//		lcd_Fill(0, 40, 240, 40, WHITE);
		lcd_ShowIntNum(100, 48, traffic_light_time_buffer_temp[1], 2, RED, WHITE, 24);
	  }
	  break;
 8001f8e:	e0b7      	b.n	8002100 <controlTrafficLight+0x7cc>
		if(timer_flag[0] == 1){
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <controlTrafficLight+0x7f0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10f      	bne.n	8001fb8 <controlTrafficLight+0x684>
		  setTimer(0, LED_BLINK_TIME);
 8001f98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fc73 	bl	8001888 <setTimer>
		  if (traffic_light_display_state == XAMBER)
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	; (800210c <controlTrafficLight+0x7d8>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d103      	bne.n	8001fb2 <controlTrafficLight+0x67e>
			traffic_light_display_state = YAMBER;
 8001faa:	4b58      	ldr	r3, [pc, #352]	; (800210c <controlTrafficLight+0x7d8>)
 8001fac:	2209      	movs	r2, #9
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	e002      	b.n	8001fb8 <controlTrafficLight+0x684>
			traffic_light_display_state = XAMBER;
 8001fb2:	4b56      	ldr	r3, [pc, #344]	; (800210c <controlTrafficLight+0x7d8>)
 8001fb4:	2206      	movs	r2, #6
 8001fb6:	701a      	strb	r2, [r3, #0]
		if(button_count[1] == 1){
 8001fb8:	4b55      	ldr	r3, [pc, #340]	; (8002110 <controlTrafficLight+0x7dc>)
 8001fba:	885b      	ldrh	r3, [r3, #2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d111      	bne.n	8001fe4 <controlTrafficLight+0x6b0>
			++button_count[1];
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <controlTrafficLight+0x7dc>)
 8001fc2:	885b      	ldrh	r3, [r3, #2]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b51      	ldr	r3, [pc, #324]	; (8002110 <controlTrafficLight+0x7dc>)
 8001fca:	805a      	strh	r2, [r3, #2]
		  ++traffic_light_time_buffer_temp[1];
 8001fcc:	4b51      	ldr	r3, [pc, #324]	; (8002114 <controlTrafficLight+0x7e0>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a50      	ldr	r2, [pc, #320]	; (8002114 <controlTrafficLight+0x7e0>)
 8001fd4:	6053      	str	r3, [r2, #4]
		  if(traffic_light_time_buffer_temp[1] > TIME_LIGHT_MAX)
 8001fd6:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <controlTrafficLight+0x7e0>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b63      	cmp	r3, #99	; 0x63
 8001fdc:	dd02      	ble.n	8001fe4 <controlTrafficLight+0x6b0>
			traffic_light_time_buffer_temp[1] = TIME_LIGHT_MIN;
 8001fde:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <controlTrafficLight+0x7e0>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	605a      	str	r2, [r3, #4]
		if(button_count[2] == 1){
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <controlTrafficLight+0x7dc>)
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d109      	bne.n	8002000 <controlTrafficLight+0x6cc>
			++button_count[2];
 8001fec:	4b48      	ldr	r3, [pc, #288]	; (8002110 <controlTrafficLight+0x7dc>)
 8001fee:	889b      	ldrh	r3, [r3, #4]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <controlTrafficLight+0x7dc>)
 8001ff6:	809a      	strh	r2, [r3, #4]
		  traffic_light_time_buffer_next[1] = traffic_light_time_buffer_temp[1];
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <controlTrafficLight+0x7e0>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a46      	ldr	r2, [pc, #280]	; (8002118 <controlTrafficLight+0x7e4>)
 8001ffe:	6053      	str	r3, [r2, #4]
		lcd_ShowIntNum(100, 48, traffic_light_time_buffer_temp[1], 2, RED, WHITE, 24);
 8002000:	4b44      	ldr	r3, [pc, #272]	; (8002114 <controlTrafficLight+0x7e0>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	b29a      	uxth	r2, r3
 8002006:	2318      	movs	r3, #24
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2302      	movs	r3, #2
 8002018:	2130      	movs	r1, #48	; 0x30
 800201a:	2064      	movs	r0, #100	; 0x64
 800201c:	f7fe fe82 	bl	8000d24 <lcd_ShowIntNum>
	  break;
 8002020:	e06e      	b.n	8002100 <controlTrafficLight+0x7cc>
    case MODIFY_ERROR:
      if(traffic_light_time_buffer_next[0] == traffic_light_time_buffer_next[1] + traffic_light_time_buffer_next[2]){
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <controlTrafficLight+0x7e4>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <controlTrafficLight+0x7e4>)
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <controlTrafficLight+0x7e4>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	440b      	add	r3, r1
 8002030:	429a      	cmp	r2, r3
 8002032:	d10b      	bne.n	800204c <controlTrafficLight+0x718>
		traffic_light_time_buffer[0] = traffic_light_time_buffer_next[0];
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <controlTrafficLight+0x7e4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <controlTrafficLight+0x7f4>)
 800203a:	6013      	str	r3, [r2, #0]
		traffic_light_time_buffer[1] = traffic_light_time_buffer_next[1];
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <controlTrafficLight+0x7e4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a39      	ldr	r2, [pc, #228]	; (8002128 <controlTrafficLight+0x7f4>)
 8002042:	6053      	str	r3, [r2, #4]
		traffic_light_time_buffer[2] = traffic_light_time_buffer_next[2];
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <controlTrafficLight+0x7e4>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a37      	ldr	r2, [pc, #220]	; (8002128 <controlTrafficLight+0x7f4>)
 800204a:	6093      	str	r3, [r2, #8]
      }
      traffic_light_time_buffer_temp[0] = traffic_light_time_buffer[0];
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <controlTrafficLight+0x7f4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a30      	ldr	r2, [pc, #192]	; (8002114 <controlTrafficLight+0x7e0>)
 8002052:	6013      	str	r3, [r2, #0]
      traffic_light_time_buffer_temp[1] = traffic_light_time_buffer[1];
 8002054:	4b34      	ldr	r3, [pc, #208]	; (8002128 <controlTrafficLight+0x7f4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <controlTrafficLight+0x7e0>)
 800205a:	6053      	str	r3, [r2, #4]
      traffic_light_time_buffer_temp[2] = traffic_light_time_buffer[2];
 800205c:	4b32      	ldr	r3, [pc, #200]	; (8002128 <controlTrafficLight+0x7f4>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <controlTrafficLight+0x7e0>)
 8002062:	6093      	str	r3, [r2, #8]

      traffic_light_time_buffer_next[0] = traffic_light_time_buffer[0];
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <controlTrafficLight+0x7f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <controlTrafficLight+0x7e4>)
 800206a:	6013      	str	r3, [r2, #0]
	  traffic_light_time_buffer_next[1] = traffic_light_time_buffer[1];
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <controlTrafficLight+0x7f4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <controlTrafficLight+0x7e4>)
 8002072:	6053      	str	r3, [r2, #4]
	  traffic_light_time_buffer_next[2] = traffic_light_time_buffer[2];
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <controlTrafficLight+0x7f4>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <controlTrafficLight+0x7e4>)
 800207a:	6093      	str	r3, [r2, #8]
      lcd_Clear(BROWN);
 800207c:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8002080:	f7fe fce4 	bl	8000a4c <lcd_Clear>
      lcd_Fill(0, 0, 240, 40, WHITE);
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2328      	movs	r3, #40	; 0x28
 800208c:	22f0      	movs	r2, #240	; 0xf0
 800208e:	2100      	movs	r1, #0
 8002090:	2000      	movs	r0, #0
 8002092:	f7fe fd0d 	bl	8000ab0 <lcd_Fill>
      lcd_StrCenter(0, 8, "NORMAL", RED, WHITE, 24, 1);
 8002096:	2301      	movs	r3, #1
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	2318      	movs	r3, #24
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <controlTrafficLight+0x7f8>)
 80020aa:	2108      	movs	r1, #8
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff f997 	bl	80013e0 <lcd_StrCenter>
      traffic_light_state = NORMAL_RED_GREEN;
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <controlTrafficLight+0x7ec>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
      traffic_light_display_state = XRED_YGREEN;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <controlTrafficLight+0x7d8>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
      time_counter_x = traffic_light_time_buffer[0];
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <controlTrafficLight+0x7f4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <controlTrafficLight+0x7fc>)
 80020c4:	6013      	str	r3, [r2, #0]
      time_counter_y = traffic_light_time_buffer[2];
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <controlTrafficLight+0x7f4>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <controlTrafficLight+0x800>)
 80020cc:	6013      	str	r3, [r2, #0]
      --time_counter_x;
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <controlTrafficLight+0x7fc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	4a16      	ldr	r2, [pc, #88]	; (8002130 <controlTrafficLight+0x7fc>)
 80020d6:	6013      	str	r3, [r2, #0]
      --time_counter_y;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <controlTrafficLight+0x800>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3b01      	subs	r3, #1
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <controlTrafficLight+0x800>)
 80020e0:	6013      	str	r3, [r2, #0]
      setTimer(1, TRAFFIC_LIGHT_TIME);
 80020e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff fbce 	bl	8001888 <setTimer>
      break;
 80020ec:	e008      	b.n	8002100 <controlTrafficLight+0x7cc>
    default:
      break;
 80020ee:	bf00      	nop
 80020f0:	e006      	b.n	8002100 <controlTrafficLight+0x7cc>
      break;
 80020f2:	bf00      	nop
 80020f4:	e004      	b.n	8002100 <controlTrafficLight+0x7cc>
      break;
 80020f6:	bf00      	nop
 80020f8:	e002      	b.n	8002100 <controlTrafficLight+0x7cc>
      break;
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <controlTrafficLight+0x7cc>
      break;
 80020fe:	bf00      	nop
  }
  displayTrafficLight();
 8002100:	f000 f8f6 	bl	80022f0 <displayTrafficLight>
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000059 	.word	0x20000059
 8002110:	2000005c 	.word	0x2000005c
 8002114:	2000001c 	.word	0x2000001c
 8002118:	20000010 	.word	0x20000010
 800211c:	08004838 	.word	0x08004838
 8002120:	20000058 	.word	0x20000058
 8002124:	200001b8 	.word	0x200001b8
 8002128:	20000004 	.word	0x20000004
 800212c:	08004830 	.word	0x08004830
 8002130:	200001cc 	.word	0x200001cc
 8002134:	200001c8 	.word	0x200001c8

08002138 <redXOn>:
#include "traffic_light_display.h"

TrafficLightDisplayState traffic_light_display_state = NONE;
TrafficLightDisplayState traffic_light_display_state_pre = YGREEN;

void redXOn() {
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af02      	add	r7, sp, #8
  lcd_DrawCircle(90, 110, RED, 20, 1);
 800213e:	2301      	movs	r3, #1
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2314      	movs	r3, #20
 8002144:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002148:	216e      	movs	r1, #110	; 0x6e
 800214a:	205a      	movs	r0, #90	; 0x5a
 800214c:	f7ff f877 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 170, WHITE, 20, 1);
 8002150:	2301      	movs	r3, #1
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2314      	movs	r3, #20
 8002156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215a:	21aa      	movs	r1, #170	; 0xaa
 800215c:	201e      	movs	r0, #30
 800215e:	f7ff f86e 	bl	800123e <lcd_DrawCircle>
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <amberXOn>:
void amberXOn() {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af02      	add	r7, sp, #8
  lcd_DrawCircle(150, 110, YELLOW, 20, 1);
 800216e:	2301      	movs	r3, #1
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2314      	movs	r3, #20
 8002174:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002178:	216e      	movs	r1, #110	; 0x6e
 800217a:	2096      	movs	r0, #150	; 0x96
 800217c:	f7ff f85f 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 230, WHITE, 20, 1);
 8002180:	2301      	movs	r3, #1
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2314      	movs	r3, #20
 8002186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218a:	21e6      	movs	r1, #230	; 0xe6
 800218c:	201e      	movs	r0, #30
 800218e:	f7ff f856 	bl	800123e <lcd_DrawCircle>
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <greenXOn>:
void greenXOn() {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af02      	add	r7, sp, #8
  lcd_DrawCircle(210, 110, GREEN, 20, 1);
 800219e:	2301      	movs	r3, #1
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2314      	movs	r3, #20
 80021a4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80021a8:	216e      	movs	r1, #110	; 0x6e
 80021aa:	20d2      	movs	r0, #210	; 0xd2
 80021ac:	f7ff f847 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 290, WHITE, 20, 1);
 80021b0:	2301      	movs	r3, #1
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2314      	movs	r3, #20
 80021b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ba:	f44f 7191 	mov.w	r1, #290	; 0x122
 80021be:	201e      	movs	r0, #30
 80021c0:	f7ff f83d 	bl	800123e <lcd_DrawCircle>
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <redYOn>:
void redYOn() {
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af02      	add	r7, sp, #8
  lcd_DrawCircle(90, 110, WHITE, 20, 1);
 80021d0:	2301      	movs	r3, #1
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2314      	movs	r3, #20
 80021d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021da:	216e      	movs	r1, #110	; 0x6e
 80021dc:	205a      	movs	r0, #90	; 0x5a
 80021de:	f7ff f82e 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 170, RED, 20, 1);
 80021e2:	2301      	movs	r3, #1
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2314      	movs	r3, #20
 80021e8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80021ec:	21aa      	movs	r1, #170	; 0xaa
 80021ee:	201e      	movs	r0, #30
 80021f0:	f7ff f825 	bl	800123e <lcd_DrawCircle>
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <amberYOn>:
void amberYOn() {
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af02      	add	r7, sp, #8
  lcd_DrawCircle(150, 110, WHITE, 20, 1);
 8002200:	2301      	movs	r3, #1
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2314      	movs	r3, #20
 8002206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220a:	216e      	movs	r1, #110	; 0x6e
 800220c:	2096      	movs	r0, #150	; 0x96
 800220e:	f7ff f816 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 230, YELLOW, 20, 1);
 8002212:	2301      	movs	r3, #1
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2314      	movs	r3, #20
 8002218:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800221c:	21e6      	movs	r1, #230	; 0xe6
 800221e:	201e      	movs	r0, #30
 8002220:	f7ff f80d 	bl	800123e <lcd_DrawCircle>
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <greenYOn>:
void greenYOn() {
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af02      	add	r7, sp, #8
  lcd_DrawCircle(210, 110, WHITE, 20, 1);
 8002230:	2301      	movs	r3, #1
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2314      	movs	r3, #20
 8002236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223a:	216e      	movs	r1, #110	; 0x6e
 800223c:	20d2      	movs	r0, #210	; 0xd2
 800223e:	f7fe fffe 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 290, GREEN, 20, 1);
 8002242:	2301      	movs	r3, #1
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2314      	movs	r3, #20
 8002248:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800224c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002250:	201e      	movs	r0, #30
 8002252:	f7fe fff4 	bl	800123e <lcd_DrawCircle>
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <redOff>:
void redOff() {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af02      	add	r7, sp, #8
  lcd_DrawCircle(90, 110, WHITE, 20, 1);
 8002262:	2301      	movs	r3, #1
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2314      	movs	r3, #20
 8002268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226c:	216e      	movs	r1, #110	; 0x6e
 800226e:	205a      	movs	r0, #90	; 0x5a
 8002270:	f7fe ffe5 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 170, WHITE, 20, 1);
 8002274:	2301      	movs	r3, #1
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2314      	movs	r3, #20
 800227a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227e:	21aa      	movs	r1, #170	; 0xaa
 8002280:	201e      	movs	r0, #30
 8002282:	f7fe ffdc 	bl	800123e <lcd_DrawCircle>
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <amberOff>:
void amberOff() {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af02      	add	r7, sp, #8
  lcd_DrawCircle(150, 110, WHITE, 20, 1);
 8002292:	2301      	movs	r3, #1
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2314      	movs	r3, #20
 8002298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229c:	216e      	movs	r1, #110	; 0x6e
 800229e:	2096      	movs	r0, #150	; 0x96
 80022a0:	f7fe ffcd 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 230, WHITE, 20, 1);
 80022a4:	2301      	movs	r3, #1
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2314      	movs	r3, #20
 80022aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ae:	21e6      	movs	r1, #230	; 0xe6
 80022b0:	201e      	movs	r0, #30
 80022b2:	f7fe ffc4 	bl	800123e <lcd_DrawCircle>
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <greenOff>:
void greenOff() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af02      	add	r7, sp, #8
  lcd_DrawCircle(210, 110, WHITE, 20, 1);
 80022c2:	2301      	movs	r3, #1
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2314      	movs	r3, #20
 80022c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022cc:	216e      	movs	r1, #110	; 0x6e
 80022ce:	20d2      	movs	r0, #210	; 0xd2
 80022d0:	f7fe ffb5 	bl	800123e <lcd_DrawCircle>
  lcd_DrawCircle(30, 290, WHITE, 20, 1);
 80022d4:	2301      	movs	r3, #1
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2314      	movs	r3, #20
 80022da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022de:	f44f 7191 	mov.w	r1, #290	; 0x122
 80022e2:	201e      	movs	r0, #30
 80022e4:	f7fe ffab 	bl	800123e <lcd_DrawCircle>
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <displayTrafficLight>:

void displayTrafficLight(){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  if (traffic_light_display_state == traffic_light_display_state_pre)
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <displayTrafficLight+0x100>)
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <displayTrafficLight+0x104>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d072      	beq.n	80023e6 <displayTrafficLight+0xf6>
	  return;
  traffic_light_display_state_pre = traffic_light_display_state;
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <displayTrafficLight+0x100>)
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <displayTrafficLight+0x104>)
 8002306:	701a      	strb	r2, [r3, #0]
  switch (traffic_light_display_state) {
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <displayTrafficLight+0x100>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d86c      	bhi.n	80023ea <displayTrafficLight+0xfa>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <displayTrafficLight+0x28>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002345 	.word	0x08002345
 800231c:	08002353 	.word	0x08002353
 8002320:	08002369 	.word	0x08002369
 8002324:	08002377 	.word	0x08002377
 8002328:	08002385 	.word	0x08002385
 800232c:	08002393 	.word	0x08002393
 8002330:	080023a1 	.word	0x080023a1
 8002334:	080023af 	.word	0x080023af
 8002338:	080023bd 	.word	0x080023bd
 800233c:	080023cb 	.word	0x080023cb
 8002340:	080023d9 	.word	0x080023d9
    case NONE:
      redOff();
 8002344:	f7ff ff8a 	bl	800225c <redOff>
      amberOff();
 8002348:	f7ff ffa0 	bl	800228c <amberOff>
      greenOff();
 800234c:	f7ff ffb6 	bl	80022bc <greenOff>
	  break;
 8002350:	e04c      	b.n	80023ec <displayTrafficLight+0xfc>
    case XRED_YGREEN:
	  lcd_Clear(WHITE);
 8002352:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002356:	f7fe fb79 	bl	8000a4c <lcd_Clear>
	  redXOn();
 800235a:	f7ff feed 	bl	8002138 <redXOn>
	  amberOff();
 800235e:	f7ff ff95 	bl	800228c <amberOff>
	  greenYOn();
 8002362:	f7ff ff62 	bl	800222a <greenYOn>
      break;
 8002366:	e041      	b.n	80023ec <displayTrafficLight+0xfc>
    case XRED_YAMBER:
      redXOn();
 8002368:	f7ff fee6 	bl	8002138 <redXOn>
      amberYOn();
 800236c:	f7ff ff45 	bl	80021fa <amberYOn>
      greenOff();
 8002370:	f7ff ffa4 	bl	80022bc <greenOff>
      break;
 8002374:	e03a      	b.n	80023ec <displayTrafficLight+0xfc>
    case XGREEN_YRED:
      greenXOn();
 8002376:	f7ff ff0f 	bl	8002198 <greenXOn>
      amberOff();
 800237a:	f7ff ff87 	bl	800228c <amberOff>
      redYOn();
 800237e:	f7ff ff24 	bl	80021ca <redYOn>
      break;
 8002382:	e033      	b.n	80023ec <displayTrafficLight+0xfc>
    case XAMBER_YRED:
      greenOff();
 8002384:	f7ff ff9a 	bl	80022bc <greenOff>
      amberXOn();
 8002388:	f7ff feee 	bl	8002168 <amberXOn>
      redYOn();
 800238c:	f7ff ff1d 	bl	80021ca <redYOn>
      break;
 8002390:	e02c      	b.n	80023ec <displayTrafficLight+0xfc>
    case XRED:
      redXOn();
 8002392:	f7ff fed1 	bl	8002138 <redXOn>
      amberOff();
 8002396:	f7ff ff79 	bl	800228c <amberOff>
      greenOff();
 800239a:	f7ff ff8f 	bl	80022bc <greenOff>
      break;
 800239e:	e025      	b.n	80023ec <displayTrafficLight+0xfc>
    case XAMBER:
      redOff();
 80023a0:	f7ff ff5c 	bl	800225c <redOff>
      amberXOn();
 80023a4:	f7ff fee0 	bl	8002168 <amberXOn>
      greenOff();
 80023a8:	f7ff ff88 	bl	80022bc <greenOff>
      break;
 80023ac:	e01e      	b.n	80023ec <displayTrafficLight+0xfc>
    case XGREEN:
      redOff();
 80023ae:	f7ff ff55 	bl	800225c <redOff>
      amberOff();
 80023b2:	f7ff ff6b 	bl	800228c <amberOff>
      greenXOn();
 80023b6:	f7ff feef 	bl	8002198 <greenXOn>
      break;
 80023ba:	e017      	b.n	80023ec <displayTrafficLight+0xfc>
    case YRED:
	  redYOn();
 80023bc:	f7ff ff05 	bl	80021ca <redYOn>
	  amberOff();
 80023c0:	f7ff ff64 	bl	800228c <amberOff>
	  greenOff();
 80023c4:	f7ff ff7a 	bl	80022bc <greenOff>
	  break;
 80023c8:	e010      	b.n	80023ec <displayTrafficLight+0xfc>
	case YAMBER:
	  redOff();
 80023ca:	f7ff ff47 	bl	800225c <redOff>
	  amberYOn();
 80023ce:	f7ff ff14 	bl	80021fa <amberYOn>
	  greenOff();
 80023d2:	f7ff ff73 	bl	80022bc <greenOff>
	  break;
 80023d6:	e009      	b.n	80023ec <displayTrafficLight+0xfc>
	case YGREEN:
	  redOff();
 80023d8:	f7ff ff40 	bl	800225c <redOff>
	  amberOff();
 80023dc:	f7ff ff56 	bl	800228c <amberOff>
	  greenYOn();
 80023e0:	f7ff ff23 	bl	800222a <greenYOn>
	  break;
 80023e4:	e002      	b.n	80023ec <displayTrafficLight+0xfc>
	  return;
 80023e6:	bf00      	nop
 80023e8:	e000      	b.n	80023ec <displayTrafficLight+0xfc>
    default:
      break;
 80023ea:	bf00      	nop
  }
}
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000059 	.word	0x20000059
 80023f4:	20000028 	.word	0x20000028

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fe:	490e      	ldr	r1, [pc, #56]	; (8002438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002414:	4c0b      	ldr	r4, [pc, #44]	; (8002444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002422:	f7ff f991 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f002 f9cb 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7ff f80b 	bl	8001444 <main>
  bx  lr    
 800242e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800243c:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 8002440:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002444:	200001d4 	.word	0x200001d4

08002448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC_IRQHandler>
	...

0800244c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_Init+0x40>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_Init+0x40>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_Init+0x40>)
 800246e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 f94f 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	200f      	movs	r0, #15
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff f906 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f967 	bl	8002782 <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 f92f 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000030 	.word	0x20000030
 80024ec:	2000002c 	.word	0x2000002c

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000030 	.word	0x20000030
 8002514:	200001d0 	.word	0x200001d0

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200001d0 	.word	0x200001d0

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffde 	bl	8002518 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000030 	.word	0x20000030

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <__NVIC_EnableIRQ+0x38>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	; (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff29 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff3e 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff8e 	bl	800266c <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5d 	bl	8002618 <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff31 	bl	80025dc <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	e16b      	b.n	8002a90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	f040 815a 	bne.w	8002a8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d005      	beq.n	80027ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d130      	bne.n	8002850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 0201 	and.w	r2, r3, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b03      	cmp	r3, #3
 800285a:	d017      	beq.n	800288c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d123      	bne.n	80028e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0203 	and.w	r2, r3, #3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80b4 	beq.w	8002a8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <HAL_GPIO_Init+0x30c>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <HAL_GPIO_Init+0x30c>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_GPIO_Init+0x30c>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293e:	4a5b      	ldr	r2, [pc, #364]	; (8002aac <HAL_GPIO_Init+0x310>)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_GPIO_Init+0x314>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d02b      	beq.n	80029c2 <HAL_GPIO_Init+0x226>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a51      	ldr	r2, [pc, #324]	; (8002ab4 <HAL_GPIO_Init+0x318>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d025      	beq.n	80029be <HAL_GPIO_Init+0x222>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a50      	ldr	r2, [pc, #320]	; (8002ab8 <HAL_GPIO_Init+0x31c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01f      	beq.n	80029ba <HAL_GPIO_Init+0x21e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4f      	ldr	r2, [pc, #316]	; (8002abc <HAL_GPIO_Init+0x320>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d019      	beq.n	80029b6 <HAL_GPIO_Init+0x21a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4e      	ldr	r2, [pc, #312]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0x216>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4d      	ldr	r2, [pc, #308]	; (8002ac4 <HAL_GPIO_Init+0x328>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_GPIO_Init+0x212>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4c      	ldr	r2, [pc, #304]	; (8002ac8 <HAL_GPIO_Init+0x32c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x20e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4b      	ldr	r2, [pc, #300]	; (8002acc <HAL_GPIO_Init+0x330>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_GPIO_Init+0x20a>
 80029a2:	2307      	movs	r3, #7
 80029a4:	e00e      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029a6:	2308      	movs	r3, #8
 80029a8:	e00c      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029aa:	2306      	movs	r3, #6
 80029ac:	e00a      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x228>
 80029c2:	2300      	movs	r3, #0
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d4:	4935      	ldr	r1, [pc, #212]	; (8002aac <HAL_GPIO_Init+0x310>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a30:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f67f ae90 	bls.w	80027b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40021400 	.word	0x40021400
 8002ac8:	40021800 	.word	0x40021800
 8002acc:	40021c00 	.word	0x40021c00
 8002ad0:	40013c00 	.word	0x40013c00

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af0:	e003      	b.n	8002afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	041a      	lsls	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b18:	887a      	ldrh	r2, [r7, #2]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	041a      	lsls	r2, r3, #16
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	400b      	ands	r3, r1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e264      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d075      	beq.n	8002c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	4ba3      	ldr	r3, [pc, #652]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d112      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b9d      	ldr	r3, [pc, #628]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x108>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d157      	bne.n	8002c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e23f      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x74>
 8002ba2:	4b91      	ldr	r3, [pc, #580]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a90      	ldr	r2, [pc, #576]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a8a      	ldr	r2, [pc, #552]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a87      	ldr	r2, [pc, #540]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7ff fc90 	bl	8002518 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7ff fc8c 	bl	8002518 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e204      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xc0>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7ff fc7c 	bl	8002518 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7ff fc78 	bl	8002518 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1f0      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0xe8>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1c4      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4952      	ldr	r1, [pc, #328]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e03a      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7ff fc31 	bl	8002518 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cba:	f7ff fc2d 	bl	8002518 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1a5      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fc10 	bl	8002518 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7ff fc0c 	bl	8002518 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e184      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d030      	beq.n	8002d88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7ff fbf0 	bl	8002518 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7ff fbec 	bl	8002518 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e164      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x200>
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7ff fbd9 	bl	8002518 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6a:	f7ff fbd5 	bl	8002518 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e14d      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a0 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7ff fb9b 	bl	8002518 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e011      	b.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470000 	.word	0x42470000
 8002df0:	42470e80 	.word	0x42470e80
 8002df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7ff fb8e 	bl	8002518 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e106      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x4e4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
 8002e1e:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a80      	ldr	r2, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	e01c      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x312>
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a77      	ldr	r2, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e4e:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a74      	ldr	r2, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a71      	ldr	r2, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7ff fb53 	bl	8002518 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7ff fb4f 	bl	8002518 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0c5      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCC_OscConfig+0x33a>
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7ff fb3d 	bl	8002518 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7ff fb39 	bl	8002518 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0af      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a55      	ldr	r2, [pc, #340]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 809b 	beq.w	8003016 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d05c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d141      	bne.n	8002f78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7ff fb0d 	bl	8002518 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7ff fb09 	bl	8002518 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e081      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	4937      	ldr	r1, [pc, #220]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7ff fae2 	bl	8002518 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7ff fade 	bl	8002518 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e056      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x41c>
 8002f76:	e04e      	b.n	8003016 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7ff facb 	bl	8002518 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7ff fac7 	bl	8002518 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e03f      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x44a>
 8002fa4:	e037      	b.n	8003016 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e032      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d028      	beq.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d121      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d11a      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d111      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d107      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40007000 	.word	0x40007000
 8003024:	40023800 	.word	0x40023800
 8003028:	42470060 	.word	0x42470060

0800302c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0cc      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d90c      	bls.n	8003068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d044      	beq.n	800314c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d119      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e067      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4934      	ldr	r1, [pc, #208]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800311c:	f7ff f9fc 	bl	8002518 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7ff f9f8 	bl	8002518 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d20c      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff f95c 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	080077c8 	.word	0x080077c8
 80031f0:	20000000 	.word	0x20000000
 80031f4:	2000002c 	.word	0x2000002c

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	2300      	movs	r3, #0
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003210:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 800321c:	2b08      	cmp	r3, #8
 800321e:	f200 80bd 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3a>
 800322a:	e0b7      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800322e:	60bb      	str	r3, [r7, #8]
       break;
 8003230:	e0b7      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003234:	60bb      	str	r3, [r7, #8]
      break;
 8003236:	e0b4      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04d      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	461a      	mov	r2, r3
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	ea02 0800 	and.w	r8, r2, r0
 8003266:	ea03 0901 	and.w	r9, r3, r1
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	014b      	lsls	r3, r1, #5
 8003278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800327c:	0142      	lsls	r2, r0, #5
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	ebb0 0008 	subs.w	r0, r0, r8
 8003286:	eb61 0109 	sbc.w	r1, r1, r9
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	018b      	lsls	r3, r1, #6
 8003294:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003298:	0182      	lsls	r2, r0, #6
 800329a:	1a12      	subs	r2, r2, r0
 800329c:	eb63 0301 	sbc.w	r3, r3, r1
 80032a0:	f04f 0000 	mov.w	r0, #0
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	00d9      	lsls	r1, r3, #3
 80032aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ae:	00d0      	lsls	r0, r2, #3
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	eb12 0208 	adds.w	r2, r2, r8
 80032b8:	eb43 0309 	adc.w	r3, r3, r9
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	0259      	lsls	r1, r3, #9
 80032c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032ca:	0250      	lsls	r0, r2, #9
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f7fc ff7c 	bl	80001d8 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e04a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	461a      	mov	r2, r3
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	ea02 0400 	and.w	r4, r2, r0
 8003302:	ea03 0501 	and.w	r5, r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	014b      	lsls	r3, r1, #5
 8003314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003318:	0142      	lsls	r2, r0, #5
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	1b00      	subs	r0, r0, r4
 8003320:	eb61 0105 	sbc.w	r1, r1, r5
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	018b      	lsls	r3, r1, #6
 800332e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003332:	0182      	lsls	r2, r0, #6
 8003334:	1a12      	subs	r2, r2, r0
 8003336:	eb63 0301 	sbc.w	r3, r3, r1
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	00d9      	lsls	r1, r3, #3
 8003344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003348:	00d0      	lsls	r0, r2, #3
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	1912      	adds	r2, r2, r4
 8003350:	eb45 0303 	adc.w	r3, r5, r3
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0299      	lsls	r1, r3, #10
 800335e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003362:	0290      	lsls	r0, r2, #10
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f7fc ff30 	bl	80001d8 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800339e:	60bb      	str	r3, [r7, #8]
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	68bb      	ldr	r3, [r7, #8]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e07b      	b.n	80034c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033de:	d009      	beq.n	80033f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
 80033e6:	e005      	b.n	80033f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe f8f6 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	ea42 0103 	orr.w	r1, r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0104 	and.w	r1, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f003 0210 	and.w	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af02      	add	r7, sp, #8
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ea:	d112      	bne.n	8003512 <HAL_SPI_Receive+0x44>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10e      	bne.n	8003512 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2204      	movs	r2, #4
 80034f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f8f1 	bl	80036f0 <HAL_SPI_TransmitReceive>
 800350e:	4603      	mov	r3, r0
 8003510:	e0ea      	b.n	80036e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_SPI_Receive+0x52>
 800351c:	2302      	movs	r3, #2
 800351e:	e0e3      	b.n	80036e8 <HAL_SPI_Receive+0x21a>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003528:	f7fe fff6 	bl	8002518 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800353e:	e0ca      	b.n	80036d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_SPI_Receive+0x7e>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003550:	e0c1      	b.n	80036d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2204      	movs	r2, #4
 8003556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003598:	d10f      	bne.n	80035ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d007      	beq.n	80035d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d162      	bne.n	80036a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035e0:	e02e      	b.n	8003640 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d115      	bne.n	800361c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f103 020c 	add.w	r2, r3, #12
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	87da      	strh	r2, [r3, #62]	; 0x3e
 800361a:	e011      	b.n	8003640 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800361c:	f7fe ff7c 	bl	8002518 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d803      	bhi.n	8003634 <HAL_SPI_Receive+0x166>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d102      	bne.n	800363a <HAL_SPI_Receive+0x16c>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800363e:	e04a      	b.n	80036d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1cb      	bne.n	80035e2 <HAL_SPI_Receive+0x114>
 800364a:	e031      	b.n	80036b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d113      	bne.n	8003682 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	b292      	uxth	r2, r2
 8003666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003680:	e011      	b.n	80036a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003682:	f7fe ff49 	bl	8002518 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d803      	bhi.n	800369a <HAL_SPI_Receive+0x1cc>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d102      	bne.n	80036a0 <HAL_SPI_Receive+0x1d2>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036a4:	e017      	b.n	80036d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1cd      	bne.n	800364c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fa45 	bl	8003b44 <SPI_EndRxTransaction>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	75fb      	strb	r3, [r7, #23]
 80036d2:	e000      	b.n	80036d6 <HAL_SPI_Receive+0x208>
  }

error :
 80036d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08c      	sub	sp, #48	; 0x30
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036fe:	2301      	movs	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x26>
 8003712:	2302      	movs	r3, #2
 8003714:	e18a      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x33c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800371e:	f7fe fefb 	bl	8002518 <HAL_GetTick>
 8003722:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800373c:	2b01      	cmp	r3, #1
 800373e:	d00f      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x70>
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d107      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x68>
 8003750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003754:	2b04      	cmp	r3, #4
 8003756:	d003      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800375e:	e15b      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x82>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x82>
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003778:	e14e      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2205      	movs	r2, #5
 800378a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	887a      	ldrh	r2, [r7, #2]
 800379e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	887a      	ldrh	r2, [r7, #2]
 80037b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b40      	cmp	r3, #64	; 0x40
 80037d0:	d007      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ea:	d178      	bne.n	80038de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_SPI_TransmitReceive+0x10a>
 80037f4:	8b7b      	ldrh	r3, [r7, #26]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d166      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381e:	e053      	b.n	80038c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d11b      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x176>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d016      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x176>
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d113      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	881a      	ldrh	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	1c9a      	adds	r2, r3, #2
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d119      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x1b8>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d014      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	b292      	uxth	r2, r2
 800388a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a4:	2301      	movs	r3, #1
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038a8:	f7fe fe36 	bl	8002518 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d807      	bhi.n	80038c8 <HAL_SPI_TransmitReceive+0x1d8>
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d003      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038c6:	e0a7      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1a6      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x130>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1a1      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x130>
 80038dc:	e07c      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x1fc>
 80038e6:	8b7b      	ldrh	r3, [r7, #26]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d16b      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003912:	e057      	b.n	80039c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d11c      	bne.n	800395c <HAL_SPI_TransmitReceive+0x26c>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d017      	beq.n	800395c <HAL_SPI_TransmitReceive+0x26c>
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d114      	bne.n	800395c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d119      	bne.n	800399e <HAL_SPI_TransmitReceive+0x2ae>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d014      	beq.n	800399e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800399a:	2301      	movs	r3, #1
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800399e:	f7fe fdbb 	bl	8002518 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d803      	bhi.n	80039b6 <HAL_SPI_TransmitReceive+0x2c6>
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d102      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x2cc>
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039c2:	e029      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1a2      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x224>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d19d      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f917 	bl	8003c10 <SPI_EndRxTxTransaction>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039f4:	e010      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10b      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	e000      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3730      	adds	r7, #48	; 0x30
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a44:	f7fe fd68 	bl	8002518 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a54:	f7fe fd60 	bl	8002518 <HAL_GetTick>
 8003a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a5a:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	015b      	lsls	r3, r3, #5
 8003a60:	0d1b      	lsrs	r3, r3, #20
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a6a:	e054      	b.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d050      	beq.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a74:	f7fe fd50 	bl	8002518 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d902      	bls.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d13d      	bne.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa2:	d111      	bne.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aac:	d004      	beq.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	d107      	bne.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad0:	d10f      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e017      	b.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d19b      	bne.n	8003a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000000 	.word	0x20000000

08003b44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b58:	d111      	bne.n	8003b7e <SPI_EndRxTransaction+0x3a>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b62:	d004      	beq.n	8003b6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6c:	d107      	bne.n	8003b7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b86:	d12a      	bne.n	8003bde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d012      	beq.n	8003bb8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff ff49 	bl	8003a34 <SPI_WaitFlagStateUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02d      	beq.n	8003c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e026      	b.n	8003c06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff ff36 	bl	8003a34 <SPI_WaitFlagStateUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01a      	beq.n	8003c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e013      	b.n	8003c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2101      	movs	r1, #1
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff ff23 	bl	8003a34 <SPI_WaitFlagStateUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e000      	b.n	8003c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <SPI_EndRxTxTransaction+0x7c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <SPI_EndRxTxTransaction+0x80>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0d5b      	lsrs	r3, r3, #21
 8003c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3a:	d112      	bne.n	8003c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2200      	movs	r2, #0
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff fef4 	bl	8003a34 <SPI_WaitFlagStateUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d016      	beq.n	8003c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e00f      	b.n	8003c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d0f2      	beq.n	8003c62 <SPI_EndRxTxTransaction+0x52>
 8003c7c:	e000      	b.n	8003c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c7e:	bf00      	nop
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	165e9f81 	.word	0x165e9f81

08003c94 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e034      	b.n	8003d14 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7fc fd44 	bl	800074c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f000 fca6 	bl	8004620 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	f000 fcf0 	bl	80046c4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6858      	ldr	r0, [r3, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	f000 fd25 	bl	8004740 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	6892      	ldr	r2, [r2, #8]
 8003cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	f041 0101 	orr.w	r1, r1, #1
 8003d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e041      	b.n	8003db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fd5e 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fa96 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d001      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e04e      	b.n	8003e72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <HAL_TIM_Base_Start_IT+0xc4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d022      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d01d      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x80>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d018      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d013      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x80>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00e      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x80>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x80>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d004      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x80>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d111      	bne.n	8003e60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d010      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5e:	e007      	b.n	8003e70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800
 8003e8c:	40000c00 	.word	0x40000c00
 8003e90:	40010400 	.word	0x40010400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40001800 	.word	0x40001800

08003e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0202 	mvn.w	r2, #2
 8003ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f9b5 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f9a7 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f9b8 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0204 	mvn.w	r2, #4
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f98b 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f97d 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f98e 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0208 	mvn.w	r2, #8
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f961 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f953 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f964 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0210 	mvn.w	r2, #16
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f937 	bl	800424e <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f929 	bl	800423a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f93a 	bl	8004262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10e      	bne.n	8004020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d107      	bne.n	8004020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0201 	mvn.w	r2, #1
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fc80 	bl	8001920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b80      	cmp	r3, #128	; 0x80
 800402c:	d10e      	bne.n	800404c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d107      	bne.n	800404c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fae0 	bl	800460c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d10e      	bne.n	8004078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d107      	bne.n	8004078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8ff 	bl	8004276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d10e      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b20      	cmp	r3, #32
 8004092:	d107      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0220 	mvn.w	r2, #32
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 faaa 	bl	80045f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_TIM_ConfigClockSource+0x1c>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e0b4      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x186>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004100:	d03e      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0xd4>
 8004102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004106:	f200 8087 	bhi.w	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 800410a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410e:	f000 8086 	beq.w	800421e <HAL_TIM_ConfigClockSource+0x172>
 8004112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004116:	d87f      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b70      	cmp	r3, #112	; 0x70
 800411a:	d01a      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0xa6>
 800411c:	2b70      	cmp	r3, #112	; 0x70
 800411e:	d87b      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b60      	cmp	r3, #96	; 0x60
 8004122:	d050      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004124:	2b60      	cmp	r3, #96	; 0x60
 8004126:	d877      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b50      	cmp	r3, #80	; 0x50
 800412a:	d03c      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0xfa>
 800412c:	2b50      	cmp	r3, #80	; 0x50
 800412e:	d873      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d058      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	d86f      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b30      	cmp	r3, #48	; 0x30
 800413a:	d064      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x15a>
 800413c:	2b30      	cmp	r3, #48	; 0x30
 800413e:	d86b      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d060      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x15a>
 8004144:	2b20      	cmp	r3, #32
 8004146:	d867      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d05c      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x15a>
 800414c:	2b10      	cmp	r3, #16
 800414e:	d05a      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x15a>
 8004150:	e062      	b.n	8004218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6899      	ldr	r1, [r3, #8]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f000 f9ad 	bl	80044c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	609a      	str	r2, [r3, #8]
      break;
 800417e:	e04f      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f000 f996 	bl	80044c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041a2:	609a      	str	r2, [r3, #8]
      break;
 80041a4:	e03c      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f000 f90a 	bl	80043cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2150      	movs	r1, #80	; 0x50
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f963 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 80041c4:	e02c      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 f929 	bl	800442a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2160      	movs	r1, #96	; 0x60
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f953 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 80041e4:	e01c      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 f8ea 	bl	80043cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2140      	movs	r1, #64	; 0x40
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f943 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 8004204:	e00c      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f000 f93a 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 8004216:	e003      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      break;
 800421c:	e000      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800421e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a40      	ldr	r2, [pc, #256]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d00f      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <TIM_Base_SetConfig+0x118>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <TIM_Base_SetConfig+0x11c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <TIM_Base_SetConfig+0x120>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d108      	bne.n	80042de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d02b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d027      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <TIM_Base_SetConfig+0x118>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d023      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <TIM_Base_SetConfig+0x11c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01f      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <TIM_Base_SetConfig+0x120>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d017      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <TIM_Base_SetConfig+0x128>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a27      	ldr	r2, [pc, #156]	; (80043b8 <TIM_Base_SetConfig+0x12c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00f      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a26      	ldr	r2, [pc, #152]	; (80043bc <TIM_Base_SetConfig+0x130>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <TIM_Base_SetConfig+0x134>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <TIM_Base_SetConfig+0x138>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <TIM_Base_SetConfig+0x13c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <TIM_Base_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0xf8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <TIM_Base_SetConfig+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d103      	bne.n	800438c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	615a      	str	r2, [r3, #20]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	40000c00 	.word	0x40000c00
 80043b0:	40010400 	.word	0x40010400
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40014400 	.word	0x40014400
 80043bc:	40014800 	.word	0x40014800
 80043c0:	40001800 	.word	0x40001800
 80043c4:	40001c00 	.word	0x40001c00
 80043c8:	40002000 	.word	0x40002000

080043cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 030a 	bic.w	r3, r3, #10
 8004408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0210 	bic.w	r2, r3, #16
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	031b      	lsls	r3, r3, #12
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f043 0307 	orr.w	r3, r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	021a      	lsls	r2, r3, #8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e05a      	b.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d01d      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a18      	ldr	r2, [pc, #96]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10c      	bne.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40010400 	.word	0x40010400
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40001800 	.word	0x40001800

080045f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004638:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <FSMC_NORSRAM_Init+0xa0>)
 800463e:	4013      	ands	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800464a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004650:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004656:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800465c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004662:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004668:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800466e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004674:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800467a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004680:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004686:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800468c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d103      	bne.n	80046a4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	fff00080 	.word	0xfff00080

080046c4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046de:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80046e6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046f2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80046fa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004702:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	3b01      	subs	r3, #1
 800470a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800470c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	3b02      	subs	r3, #2
 8004714:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004716:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800471c:	4313      	orrs	r3, r2
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6979      	ldr	r1, [r7, #20]
 800472c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004758:	d122      	bne.n	80047a0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004762:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004768:	4013      	ands	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004776:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800477e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004786:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800478c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6979      	ldr	r1, [r7, #20]
 800479a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800479e:	e005      	b.n	80047ac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80047a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	cff00000 	.word	0xcff00000

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4d0d      	ldr	r5, [pc, #52]	; (80047f8 <__libc_init_array+0x38>)
 80047c4:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c6:	1b64      	subs	r4, r4, r5
 80047c8:	10a4      	asrs	r4, r4, #2
 80047ca:	2600      	movs	r6, #0
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	4d0b      	ldr	r5, [pc, #44]	; (8004800 <__libc_init_array+0x40>)
 80047d2:	4c0c      	ldr	r4, [pc, #48]	; (8004804 <__libc_init_array+0x44>)
 80047d4:	f000 f820 	bl	8004818 <_init>
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	2600      	movs	r6, #0
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	080077e0 	.word	0x080077e0
 80047fc:	080077e0 	.word	0x080077e0
 8004800:	080077e0 	.word	0x080077e0
 8004804:	080077e4 	.word	0x080077e4

08004808 <memset>:
 8004808:	4402      	add	r2, r0
 800480a:	4603      	mov	r3, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	f803 1b01 	strb.w	r1, [r3], #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <_init>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr

08004824 <_fini>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	bf00      	nop
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr
